{"title":"Estudio de caso: Análisis de ventas de una empresa de comida rápida","markdown":{"yaml":{"lang":"es"},"headingText":"Estudio de caso: Análisis de ventas de una empresa de comida rápida","containsRefs":false,"markdown":"\n\n\n## Descripción del problema\n\n::: {style=\"text-align:justify\"}\nSe presentan datos que son parte de las ventas de una empresa de comida rápida. Para brindar una mejor idea del estudio caso se presentará una extensión de lo que es una empresa de comida rápida y una franquicia .\n\nUna empresa de comida rápida es un tipo de negocio dentro del sector alimenticio que se especializa en la preparación y venta de alimentos y bebidas que pueden ser servidos y consumidos rápidamente. Estas empresas suelen ofrecer menús estandarizados y utilizan métodos de producción en masa para asegurar la rapidez y la eficiencia en el servicio. Algunas características típicas de una empresa de comida rápida incluyen:\n\n1-Rapidez en el Servicio: La principal característica es la rapidez con la que los clientes pueden recibir sus pedidos, generalmente en pocos minutos.\n\n2-Menú Limitado y Estandarizado: Los menús suelen ser simples y consistentes en todas las ubicaciones de la cadena, permitiendo una preparación rápida y eficiente.\n\n3-Precios Asequibles: Los precios suelen ser más bajos en comparación con los restaurantes tradicionales, lo que los hace accesibles a una amplia gama de clientes.\n\n4-Métodos de Preparación Eficientes: Utilizan técnicas de cocción rápida, como freidoras y parrillas de alta eficiencia, así como la pre-preparación de ingredientes.\n\n5-Autoservicio y Comida para Llevar: Muchas de estas empresas ofrecen opciones de autoservicio y comida para llevar, facilitando el consumo rápido y conveniente.\n\n6-Ambiente Informal: El ambiente es generalmente informal y está diseñado para facilitar el flujo rápido de clientes, con áreas de autoservicio y estaciones de recolección de pedidos.\n\nEjemplos de empresas de comida rápida incluyen grandes cadenas internacionales como McDonald's, Burger King, KFC, Subway, Carl's Jr y Taco Bell. Estas empresas han expandido su presencia globalmente, adaptándose a diferentes mercados y culturas mientras mantienen su enfoque en la rapidez y eficiencia del servicio.\n\nMuchas de estas empresas otorga parte del derecho a operar en diferentes franquicias.\n\nUna franquicia es un modelo de negocio en el cual una empresa (el franquiciador) otorga a otra parte (el franquiciado) el derecho a operar un negocio utilizando su marca, productos, servicios y modelo operativo a cambio de una tarifa o regalías. Este modelo permite a los franquiciadores expandir su marca y presencia en el mercado sin tener que invertir en nuevas ubicaciones directamente. Al mismo tiempo, ofrece a los franquiciados la oportunidad de operar un negocio con una marca establecida y un sistema probado. Algunas características clave de una franquicia incluyen:\n\n1-Marca y Sistema Operativo: El franquiciado utiliza la marca comercial, logotipos, productos y servicios del franquiciador, así como su sistema operativo, que puede incluir recetas, métodos de producción, estrategias de marketing, entre otros.\n\n2-Pago de Tarifas: El franquiciado paga al franquiciador una tarifa inicial y, en muchos casos, regalías continuas basadas en un porcentaje de las ventas. Estas tarifas cubren el uso de la marca y el soporte continuo del franquiciador.\n\n3-Capacitación y Soporte: El franquiciador proporciona capacitación inicial y soporte continuo al franquiciado, lo cual puede incluir formación en gestión empresarial, operaciones, marketing y servicio al cliente.\n\n4-Estándares y Control de Calidad: Para mantener la consistencia y calidad de la marca, el franquiciador establece estándares y procedimientos que los franquiciados deben seguir. Esto puede incluir auditorias y evaluaciones periódicas.\n\n5-Contrato de Franquicia: La relación entre el franquiciador y el franquiciado está regulada por un contrato de franquicia que detalla los derechos y obligaciones de ambas partes, incluyendo la duración del acuerdo y las condiciones de renovación.\n\n6-Territorio Exclusivo: A menudo, el contrato otorga al franquiciado un territorio exclusivo en el cual puede operar, evitando la competencia directa con otras franquicias de la misma marca en esa área.\n\nEjemplos de negocios que utilizan el modelo de franquicia incluyen cadenas de comida rápida (como McDonald's, Subway y KFC), Carl's Jr, hoteles (como Marriott y Hilton), servicios de limpieza, tiendas de conveniencia y muchos otros sectores. Este modelo permite una expansión rápida y eficiente del negocio mientras ofrece a los emprendedores la oportunidad de operar con el respaldo de una marca establecida.\n\nEsta empresa ofrece en sus productos dos tipos de hamburguesas, bebidas como sodas, cervezas y cafés. En la información de las ventas incluye registros obtenidos por una Terminal Punto de Venta (TPV), el sistema de pago usado en establecimientos comerciales para procesar transacciones de venta. Permite a los comerciantes aceptar el uso de tarjetas de crédito y débito. Se tiene registro de las ventas por cada día desde el año 2018 al noviembre del 2020, haciendo un cierre pandémico, se registran en dos etapas, antes de pandemia los datos a partir del 25 de julio del 2018 al 10 de abril del 2020. Los datos después de pandemia se registraron a partir del 3 de agosto del 2020 y cerrando finalmente el 10 de noviembre del 2020, los cuales se les aplicó una homogenización para un buen manejo de los datos y así poder presentar un mejor análisis.\n:::\n\n## Elementos de Ciencia de Datos\n\n### Importación de los datos originales a R\n\n::: {style=\"text-align:justify\"}\nSe cargan los datos del archivo excel para ser leído y almacenarlo en un dataframe (@sec-dataframe) para poder manipular cada uno de los elementos de la base de datos.\n\n```{r,  echo = FALSE, message=FALSE,  warning = FALSE}\nlibrary(readxl)\nlibrary(readr)\nlibrary(tseries)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(psych)\nlibrary(plotly)\nlibrary(ruin)\nlibrary(MASS)\nlibrary(fitdistrplus)\nlibrary(logspline)\nlibrary(vegan)\nlibrary(ggplot2)\nlibrary(dtplyr)\n# instalar DT con: remotes::install_github('rstudio/DT')\nlibrary(DT)#Para poner el dataframe en ventana\n```\n\n```{r, message=FALSE, warning = FALSE}\nDatos <- read_excel(\"~/TM/Datos.xlsx\", col_types = \n                  c(\"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\",\n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\",\n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\"\n                        ))\n\nDatos\n```\n\nComo se puede apreciar, es necesario eliminar columnas, reducido a las columnas de las ventas de los diferentes productos que oferta la empresa para así obtener las ventas totales.\n:::\n\n### Homogenización del total de ventas por día\n\n::: {style=\"text-align:justify\"}\nMediante este proceso se eliminan y se corrigen valores atípicos, valores faltantes o alguna inconsistencia que se presentan en los datos. Esto implica la eliminación de datos incompletos, conocidos como datos faltantes o NA. También se renombran cabeceras de cada columna del dataframe para facilitar la lectura del archivo.\n\n```{r, warning = FALSE}\n#Eliminamos las columnas con datos faltantes\ndatos <- Datos[, -c(6,8,10,12,14,16,18,20,22,24, 26,28, 30,32, 34, 36,\n                    38,39, 40,  42, 44, 46, 48, 50,51,52, 53, 54,55, 56, \n57,58,59,60,61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73,74,72, 75)]\n#Cambiar las cabeceras del dataframe  \ndatos <- data.frame(datos%>% rename(Año = ...1 ))\ndatos <- data.frame(datos%>% rename(Mes = ...2, Semana = ...3, Dia= ...4, \n                  Fecha = ...5, Ventas= X240519, \n                  TotalVentas = X247172.9,Customers = X973,\n                  Totalcustomers = X1136, \n                  CH_Promedio = X371.753114754098, \n                  TotalCH_Promedio = ...17, Burgers = X2099,\n                  TotalBurgers = X2162, \n                  Thickurgers = X1384...23, \n                  TotalThickburgers = X1384...25,\n                  Total_Burgers = X2402, \n                  T_Total_Burgers= X2525,Bebidas = X1556...31,\n                  Totalbebidas = X1556...33, Cervezas = X61,\n                  Totalcervezas = X83, Cafes = X83,\n                  Totalcafes = X54, Ventas_TPV = X158904,\n                  Total_Ventas_TPV = X173412.5,\n                  HR_Laborales = ...47,\n                  Total_HR_Laborales = ...49 ))\n```\n\nPor último, se realizó la separación de la base de datos antes de la pandemia y después de la pandemia, presentando así los dataframes resultantes en el siguiente código y como se ilustra posteriormente:\n\n```{r, eval= FALSE, message=FALSE}\n#Analisis de los datos:\n#Filtros por días:\n#___________________________Antes de la pandemia___________________________\n\nfil_before1<- data.frame(subset(datos, Año <= 2019))\nfil_before2<- data.frame(subset(datos, Año == 2020 & Mes <= 4))\nfil_before <- rbind(fil_before1, fil_before2)\n\n#________________________Después de la pandemia____________________________\n\nfil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8))\n```\n:::\n\n### DataFrame Resultante: Antes de la pandemia\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo = FALSE, attr.output='style=\"max-height: 100px;\"'}\n\n#\n#Poner un apartado donde explique que es la visualización de los datos \n#Elimina las filas con datos faltantes\n#datos <- data.frame( datos %>% filter(!is.na(Año)))\n#DATAFRAME RESULTANTE:\n#_________________________________Antes de la pandemia____________________________\nfil_before1<- data.frame(subset(datos, Año <= 2019))\nfil_before2<- data.frame(subset(datos, Año == 2020 & Mes <= 4))\nfil_before <- rbind(fil_before1, fil_before2)\nDT::datatable(fil_before)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo = FALSE, attr.output='style=\"max-height: 200px;\"'}\n\n#\n#Poner un apartado donde explique que es la visualización de los datos \n#Elimina las filas con datos faltantes\n#datos <- data.frame( datos %>% filter(!is.na(Año)))\n#DATAFRAME RESULTANTE:\n#_________________________________Antes de la pandemia____________________________\nfil_before1_new<- data.frame(subset(datos, Año < 2019 & Mes <= 8))\n#fil_before_new <- fil_before %>%select(Año, Mes, Dia, Ventas)\nfil_before_new <- subset(fil_before1_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))\n\nfil_before_new\n```\n:::\n\n### DataFrame Resultante: Después de la pandemia\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo = FALSE}\n#________________________Después de la pandemia__________________________________\n\n\nfil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8))\nDT::datatable(fil_dat_after)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo = FALSE}\n#________________________Después de la pandemia__________________________________\n\n\nfil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes>=8 & Mes<9))\nfil_after_new <- subset(fil_dat_after_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))\nfil_after_new\n\n```\n:::\n\n::: {style=\"text-align:justify\"}\nPara realizar la identificación de las diferentes distribuciones e implementar los gráficos como los histogramas y los boxplot, se elaboran filtros correspondientes para las ventas por cada día antes y después de pandemia\n\nLos comandos para realizar los filtros es el siguiente:\n:::\n\n```{r, echo = TRUE, message=FALSE}\n#filtra los datos del día Domingo antes de la pandemia\nfil_dat_1_before<- data.frame(subset(fil_before, Dia == 1))\n#___________________________________________________________\n#filtra los datos del día Lunes antes de la pandemia\nfil_dat_2_before<- data.frame(subset(fil_before, Dia == 2))\n#___________________________________________________________\n#filtra los datos del día martes antes de la pandemia\nfil_dat_3_before<- data.frame(subset(fil_before, Dia == 3))\n#___________________________________________________________\n#filtra los datos del día miércoles antes de la pandemia\nfil_dat_4_before<- data.frame(subset(fil_before, Dia == 4))\n#___________________________________________________________\n#filtra los datos del día Jueves antes de la pandemia\nfil_dat_5_before<- data.frame(subset(fil_before, Dia == 5))\n#___________________________________________________________\n#filtra los datos del día Viernes antes de la pandemia\nfil_dat_6_before<- data.frame(subset(fil_before, Dia == 6))\n#___________________________________________________________\n#filtra los datos del día Sábado antes de la pandemia\nfil_dat_7_before<- data.frame(subset(fil_before, Dia == 7))\n```\n\n```{r, echo = TRUE, message=FALSE}\n#____________________________________________________________________\nfil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8))\n#filtra los datos del día domingo despues de la pandemia\nfil_dat_1_after<- data.frame(subset(datos, \n                                    Año == 2020 & Mes >= 8 & Dia==1))\n#____________________________________________________________________\n#filtra los datos del día lunes despues de la pandemia\nfil_dat_2_after<- data.frame(subset(datos,\n                                    Año == 2020 & Mes >= 8 & Dia ==2))\n#____________________________________________________________________\n#filtra los datos del día martes despues de la pandemia\nfil_dat_3_after<- data.frame(subset(datos,\n                                    Año == 2020 & Mes >= 8 & Dia ==3))\n#____________________________________________________________________\n#filtra los datos del día miércoles despues de la pandemia\nfil_dat_4_after<- data.frame(subset(datos,\n                                    Año == 2020 & Mes >= 8 & Dia ==4))\n#____________________________________________________________________\n#filtra los datos del día jueves despues de la pandemia\nfil_dat_5_after<- data.frame(subset(datos,\n                                    Año == 2020 & Mes >= 8 & Dia ==5))\n#____________________________________________________________________\n#filtra los datos del día viernes despues de la pandemia\nfil_dat_6_after<- data.frame(subset(datos,\n                                    Año == 2020 & Mes >= 8 & Dia ==6))\n#____________________________________________________________________\n#filtra los datos del día sábado despues de la pandemia\nfil_dat_7_after<- data.frame(subset(datos,\n                                    Año == 2020 & Mes >= 8 & Dia ==7))\n\n```\n\n::: {style=\"text-align:justify\"}\nPara visualizar gráficamente el comportamiento de las ventas por día, a continuación se construyen los histogramas por día, en los periodos antes y después de la pandemia.\n:::\n\n### Análisis gráfico de las ventas por día:\n\n::: {style=\"text-align:justify\"}\nPara la generación de los gráficos se empleó los filtros anteriores, con el fin de obtener un análisis descriptivo de cada uno de ellos.\n:::\n\n#### Histogramas de los datos de ventas por día antes de la pandemia\n\n::: {style=\"text-align:justify\"}\nEl código que genera estos histogramas en R es el siguiente:\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval=FALSE}\n# muestra el gráfico de todos los histogramas de ventas por día \n# antes de la pandemia\npar(mar=c(2,2,2,2))\npar(mfrow =c(3,3))\nhist(fil_dat_1_before$Ventas, \n     main = \"Ventas día Domingo\", xlab = \"Ventas\")\nhist(fil_dat_2_before$Ventas, \n     main = \"Ventas día Lunes\", xlab = \"Ventas\")\nhist(fil_dat_3_before$Ventas,\n     main = \"Ventas día Martes\", xlab = \"Ventas\")\nhist(fil_dat_4_before$Ventas, \n     main = \"Ventas día Miércoles\", xlab = \"Ventas\")\nhist(fil_dat_5_before$Ventas, \n     main = \"Ventas día Jueves\", xlab = \"Ventas\")\nhist(fil_dat_6_before$Ventas, \n     main = \"Ventas día Viernes\", xlab = \"Ventas\")\nhist(fil_dat_7_before$Ventas, \n     main = \"Ventas día Sábado\", xlab = \"Ventas\")\n```\n\n![Histogramas de las ventas por día antes de la pandemia.](his_1.png){fig-align=\"center\" width=\"80%\"}\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-his1}\n```{r}\n# muestra el gráfico de todos los histogramas de ventas por día antes de la pandemia\npar(mar=c(2,2,2,2))\npar(mfrow =c(3,3))\nhist(fil_dat_1_before$Ventas, main = \"Ventas día Domingo\", xlab = \"Ventas\")\nhist(fil_dat_2_before$Ventas, main = \"Ventas día Lunes\", xlab = \"Ventas\")\nhist(fil_dat_3_before$Ventas, main = \"Ventas día Martes\", xlab = \"Ventas\")\nhist(fil_dat_4_before$Ventas, main = \"Ventas día Miércoles\", xlab = \"Ventas\")\nhist(fil_dat_5_before$Ventas, main = \"Ventas día Jueves\", xlab = \"Ventas\")\nhist(fil_dat_6_before$Ventas, main = \"Ventas día Viernes\", xlab = \"Ventas\")\nhist(fil_dat_7_before$Ventas, main = \"Ventas día Sábado\", xlab = \"Ventas\")\n```\n\nHistogramas de las ventas por día antes de la pandemia.\n:::\n:::\n\n::: {style=\"text-align:justify\"}\nPara profundizar en el análisis descriptivo de las ventas periódicas se presenta ahora los boxplot de las ventas por cada día de la semana.\n:::\n\n#### Boxplot de datos de ventas por días antes de la pandemia\n\n```{r, echo= FALSE}\nsummary(fil_dat_1_before$Ventas)\nsummary(fil_dat_2_before$Ventas)\nsummary(fil_dat_3_before$Ventas)\nsummary(fil_dat_4_before$Ventas)\nsummary(fil_dat_5_before$Ventas)\nsummary(fil_dat_6_before$Ventas)\nsummary(fil_dat_7_before$Ventas)\n\n```\n\n::: {style=\"text-align:justify\"}\nEl código que genera en R los boxplot es el siguiente:\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-box1}\n```{r, echo=TRUE}\n# muestra el gráfico de todos los boxplot de ventas por día antes de la pandemia \nfig <- plot_ly(y =fil_dat_1_before$Ventas, name = \"Ventas día Domingo\", \n               boxpoints = \"all\",type = \"box\", )\nfig <- fig %>% add_trace(y = fil_dat_2_before$Ventas,  \n                         name = \"Ventas día Lunes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_3_before$Ventas,  \n                         name = \"Ventas día Martes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_4_before$Ventas,  \n                         name = \"Ventas día Miércoles\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_5_before$Ventas,  \n                         name = \"Ventas día Jueves\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_6_before$Ventas,  \n                         name = \"Ventas día Viernes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_7_before$Ventas,  \n                         name = \"Ventas día Sábado\", boxpoints = \"all\")\n\nfig\n\n```\n\nBoxplot de las ventas por día antes de la pandemia.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval=FALSE, out.width=\"40%\"}\n# muestra el gráfico de todos los boxplot de ventas por día \n# antes de la pandemia \nfig <- plot_ly(y =fil_dat_1_before$Ventas, name = \"Ventas día Domingo\", \n               boxpoints = \"all\",type = \"box\", )\nfig <- fig %>% add_trace(y = fil_dat_2_before$Ventas,  \n                         name = \"Ventas día Lunes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_3_before$Ventas,  \n                         name = \"Ventas día Martes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_4_before$Ventas,  \n                         name = \"Ventas día Miércoles\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_5_before$Ventas,  \n                         name = \"Ventas día Jueves\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_6_before$Ventas,  \n                         name = \"Ventas día Viernes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_7_before$Ventas,  \n                         name = \"Ventas día Sábado\", boxpoints = \"all\")\n\nfig\n```\n\n![Boxplot de las ventas por día antes de la pandemia.](fig-box1pdf.png)\n:::\n\n#### Histogramas de los datos de ventas por día después de la pandemia\n\n::: {style=\"text-align:justify\"}\nEl código que genera estos histogramas en R es el siguiente:\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-his2}\n```{r, echo=TRUE}\n\n# muestra el gráfico de todos los histogramas de ventas por día despues de la pandemia\npar(mar=c(2,2,2,2))\npar(mfrow =c(3,3))\nhist(fil_dat_1_after$Ventas, main = \"Ventas día Domingo\", xlab = \"Ventas\")\nhist(fil_dat_2_after$Ventas, main = \"Ventas día Lunes\", xlab = \"Ventas\")\nhist(fil_dat_3_after$Ventas, main = \"Ventas día Martes\", xlab = \"Ventas\")\nhist(fil_dat_4_after$Ventas, main = \"Ventas día Miércoles\", xlab = \"Ventas\")\nhist(fil_dat_5_after$Ventas, main = \"Ventas día Jueves\", xlab = \"Ventas\")\nhist(fil_dat_6_after$Ventas, main = \"Ventas día Viernes\", xlab = \"Ventas\")\nhist(fil_dat_7_after$Ventas, main = \"Ventas día Sábado\", xlab = \"Ventas\")\n```\n\nHistogramas de las ventas por día después de la pandemia.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval= FALSE}\n# muestra el gráfico de todos los histogramas de ventas por día \n#despues de la pandemia\npar(mar=c(2,2,2,2))\npar(mfrow =c(3,3))\nhist(fil_dat_1_after$Ventas, \n     main = \"Ventas día Domingo\", xlab = \"Ventas\")\nhist(fil_dat_2_after$Ventas, \n     main = \"Ventas día Lunes\", xlab = \"Ventas\")\nhist(fil_dat_3_after$Ventas, \n     main = \"Ventas día Martes\", xlab = \"Ventas\")\nhist(fil_dat_4_after$Ventas,\n     main = \"Ventas día Miércoles\", xlab = \"Ventas\")\nhist(fil_dat_5_after$Ventas, \n     main = \"Ventas día Jueves\", xlab = \"Ventas\")\nhist(fil_dat_6_after$Ventas, \n     main = \"Ventas día Viernes\", xlab = \"Ventas\")\nhist(fil_dat_7_after$Ventas, \n     main = \"Ventas día Sábado\", xlab = \"Ventas\")\n```\n\n![Histogramas de las ventas por día después de la pandemia.](his_2.png){fig-align=\"center\" width=\"80%\"}\n:::\n\n::: {style=\"text-align:justify\"}\nEl comportamiento periódico de las ventas, se observa en los boxplot de las ventas por cada día de la semana.\n:::\n\n#### Boxplot de datos de ventas por días limpios después de la pandemia\n\n```{r}\nsummary(fil_dat_1_after$Ventas)\nsummary(fil_dat_2_after$Ventas)\nsummary(fil_dat_3_after$Ventas)\nsummary(fil_dat_4_after$Ventas)\nsummary(fil_dat_5_after$Ventas)\nsummary(fil_dat_6_after$Ventas)\nsummary(fil_dat_7_after$Ventas)\n\n```\n\n::: {style=\"text-align:justify\"}\nEl código que genera estos los boxplot en R es el siguiente:\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-box2}\n```{r, echo =TRUE}\nlibrary(plotly)\n\n#día 1 = domingo\n#día 2 = lunes\n#día 3 = martes\n#día 4 = miércoles\n#día 5 = jueves\n#día 6 = viernes \n#día 7 = sábado\nfig <- plot_ly(y =fil_dat_1_after$Ventas, name = \"Ventas día Domingo\", boxpoints = \"all\",type = \"box\")\nfig <- fig %>% add_trace(y = fil_dat_2_after$Ventas,  \n                         name = \"Ventas día Lunes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_3_after$Ventas,  \n                         name = \"Ventas día Martes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_4_after$Ventas,  \n                         name = \"Ventas día Miércoles\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_5_after$Ventas,  \n                         name = \"Ventas día Jueves\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_6_after$Ventas,  \n                         name = \"Ventas día Viernes\", boxpoints=\"all\")\nfig <- fig %>% add_trace(y = fil_dat_7_after$Ventas,  \n                         name = \"Ventas día Sábado\", boxpoints = \"all\")\n\nfig\n```\n\nBoxplot de las ventas por día después de la pandemia.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval=FALSE}\n# muestra el gráfico de todos los boxplot de ventas por día antes de la pandemia \nfig <- plot_ly(y =fil_dat_1_after$Ventas, name = \"Ventas día Domingo\",\n               boxpoints = \"all\",type = \"box\")\n\nfig <- fig %>% add_trace(y = fil_dat_2_after$Ventas,  \n                         name = \"Ventas día Lunes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_3_after$Ventas,  \n                         name = \"Ventas día Martes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_4_after$Ventas,  \n                         name = \"Ventas día Miércoles\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_5_after$Ventas,  \n                         name = \"Ventas día Jueves\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_6_after$Ventas,  \n                         name = \"Ventas día Viernes\", boxpoints=\"all\")\nfig <- fig %>% add_trace(y = fil_dat_7_after$Ventas,  \n                         name = \"Ventas día Sábado\", boxpoints = \"all\")\nfig\n```\n\n![Boxplot de las ventas por día después de la pandemia.](fig-box2pdf.png){fig-align=\"center\"}\n:::\n\n## Identificación de distribuciones de probabilidad de las ventas por día\n\n::: {style=\"text-align:justify\"}\nCon el fin de adaptar el modelo de Cramér Lundberg es necesario ajustar distribuciones de probabilidad de las ventas para cada día de la semana. Haciendo uso del test de Jarque Bera que ayuda a identificar cuales días siguen una distribución normal y el test de Kolmogorov de Smirnov.\n\nEl siguiente código aplica los diferentes test de normalidad para las ventas por día antes de la pandemia:(Citar Jarque Bera)\n:::\n\n```{r, echo = FALSE, message=FALSE}\n#Analisis de los datos:\n#Filtros por días:\n#_________________________________Antes de la pandemia____________________________________________\nfil_before1<- data.frame(subset(datos, Año <= 2019))\nfil_before2<- data.frame(subset(datos, Año == 2020 & Mes <= 4))\nfil_before <- rbind(fil_before1, fil_before2)\n\n#filtra los datos del día domingo antes de la pandemia\nfil_dat_1_before<- data.frame(subset(fil_before, Dia == 1))\n#Calcula la media, mediana, etc.\n#median(fil_dat_1_before$Ventas)\n#summary(fil_dat_1_before$Ventas)\n#p1b <-hist(fil_dat_1_before$Ventas)\n#______________________________________________________________________________________________\n#quitamos los outliers de la base de datos del día 1(domingo):\n\n#dim(fil_dat_1_before)\n\nQ <- quantile(fil_dat_1_before$Ventas, probs=c(.10, .80), na.rm = FALSE)\nIQR <- IQR(fil_dat_1_before$Ventas)\n\nLower <- Q[1] - 1.5*IQR\nUpper <- Q[2] + 1.5*IQR\n\nfil_dat_1_before <- subset(fil_dat_1_before, fil_dat_1_before$Ventas > Lower & fil_dat_1_before$Ventas < Upper)\n\n#dim(fil_dat_1_before)\n\naux_box <- data.frame(fil_dat_1_before$Ventas)\n#box1_b <-boxplot(fil_dat_1_before$Ventas, outline=FALSE) #Dato atípico\n#_______________________________________________________________________\n#filtra los datos del día Lunes antes de la pandemia\nfil_dat_2_before<- data.frame(subset(fil_before, Dia == 2))\n#Sacamos la media, mediana\n#median(fil_dat_2_before$Ventas)\n#summary(fil_dat_2_before$Ventas)\n#Histogramas\n#p2b <- hist(fil_dat_2_before$Ventas)\n#Boxplot\n#Se ajustara una distribuciión con el comando siguiente:\n\n\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_2_before)\n\nQ2 <- quantile(fil_dat_2_before$Ventas, probs=c(.10, .70), na.rm = FALSE)\nIQR2 <- IQR(fil_dat_2_before$Ventas)\n\nLower <- Q2[1] - 1.5*IQR2\nUpper <- Q2[2] + 1.5*IQR2\n\nfil_dat_2_before <- subset(fil_dat_2_before, fil_dat_2_before$Ventas > Lower & fil_dat_2_before$Ventas < Upper)\n\n#dim(fil_dat_2_before)\n\naux_box1 <- data.frame(fil_dat_2_before$Ventas)\n#___________________________\n#filtra los datos del día martes antes de la pandemia\nfil_dat_3_before<- data.frame(subset(fil_before, Dia == 3))\n\n#median(fil_dat_3_before$Ventas)\n#summary(fil_dat_3_before$Ventas)\n#p3b <- hist(fil_dat_3_before$Ventas)\n#boxplot(fil_dat_3_before$Ventas, outline=FALSE) #Dato atípico\n#describe(fil_dat_3_before$Ventas)\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_3_before)\n\nQ3 <- quantile(fil_dat_3_before$Ventas, probs=c(.10, .75), na.rm = FALSE)\nIQR3 <- IQR(fil_dat_3_before$Ventas)\n\nLower <- Q3[1] - 1.5*IQR3\nUpper <- Q3[2] + 1.5*IQR3\n\nfil_dat_3_before <- subset(fil_dat_3_before, fil_dat_3_before$Ventas > Lower & fil_dat_3_before$Ventas < Upper)\n\n#dim(fil_dat_3_before)\n\naux_box3 <- data.frame(fil_dat_3_before$Ventas)\n#__________________________________\n#filtra los datos del día miércoles antes de la pandemia\nfil_dat_4_before<- data.frame(subset(fil_before, Dia == 4))\n\n#median(fil_dat_4_before$Ventas)\n#summary(fil_dat_4_before$Ventas)\n#p4b <- hist(fil_dat_4_before$Ventas)\n#boxplot(fil_dat_4_before$Ventas, outline=FALSE) #Dato atípico\n\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_4_before)\n\nQ4 <- quantile(fil_dat_4_before$Ventas, probs=c(.05, .60), na.rm = FALSE)\nIQR4 <- IQR(fil_dat_4_before$Ventas)\n\nLower <- Q4[1] - 1.5*IQR4\nUpper <- Q4[2] + 1.5*IQR4 \n\nfil_dat_4_before <- subset(fil_dat_4_before, fil_dat_4_before$Ventas > Lower & fil_dat_4_before$Ventas < Upper)\n\n#dim(fil_dat_4_before)\n\naux_box4 <- data.frame(fil_dat_4_before$Ventas)\n#_______________________________________________________________________________\n#filtra los datos del día Jueves antes de la pandemia\nfil_dat_5_before<- data.frame(subset(fil_before, Dia == 5))\n\n#median(fil_dat_5_before$Ventas)\n#summary(fil_dat_5_before$Ventas)\n#p5b <- hist(fil_dat_5_before$Ventas)\n#boxplot(fil_dat_5_before$Ventas, outline=FALSE) #Dato atípico\n\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_5_before)\n\nQ5 <- quantile(fil_dat_5_before$Ventas, probs=c(.10, .65), na.rm = FALSE)\nIQR5 <- IQR(fil_dat_5_before$Ventas)\n\nLower <- Q5[1] - 1.5*IQR5\nUpper <- Q5[2] + 1.5*IQR5 \n\nfil_dat_5_before <- subset(fil_dat_5_before, fil_dat_5_before$Ventas > Lower & fil_dat_5_before$Ventas < Upper)\n\n#dim(fil_dat_5_before)\n\naux_box5 <- data.frame(fil_dat_5_before$Ventas)\n##########################################################\n#filtra los datos del día Viernes antes de la pandemia\nfil_dat_6_before<- data.frame(subset(fil_before, Dia == 6))\n\n#median(fil_dat_6_before$Ventas)\n#summary(fil_dat_6_before$Ventas)\n#p6b <- hist(fil_dat_6_before$Ventas)\n#boxplot(fil_dat_6_before$Ventas, outline=FALSE) #Dato atípico\n\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_6_before)\n\nQ6 <- quantile(fil_dat_6_before$Ventas, probs=c(.15, .75), na.rm = FALSE)\nIQR6 <- IQR(fil_dat_6_before$Ventas)\n\nLower <- Q6[1] - 1.5*IQR6\nUpper <- Q6[2] + 1.5*IQR6\n\nfil_dat_6_before <- subset(fil_dat_6_before, fil_dat_6_before$Ventas > Lower & fil_dat_6_before$Ventas < Upper)\n\n#dim(fil_dat_6_before)\n\naux_box6 <- data.frame(fil_dat_6_before$Ventas)\n\n```\n\n```{r, echo=TRUE}\n#Calcularemos los test correspondientes a los filtros\n#de ventas por día:\n\n#JARQUE BERA\njarque.bera.test(fil_dat_1_before$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#por lo tanto los datos se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n\nfitdistr(fil_dat_1_before$Ventas, \"normal\")\n\n#JARQUE BERA\njarque.bera.test(fil_dat_2_before$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#por lo tanto los datos se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_2_before$Ventas, \"normal\")\n\n#JARQUE BERA\njarque.bera.test(fil_dat_3_before$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#por lo tanto los datos se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_3_before$Ventas, \"normal\")\n\n#JARQUE BERA\njarque.bera.test(fil_dat_4_before$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#por lo tanto los datos se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_4_before$Ventas, \"normal\")\n\n#JARQUE BERA\njarque.bera.test(fil_dat_5_before$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#por lo tanto los datos se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_5_before$Ventas, \"normal\")\n\n#JARQUE BERA\njarque.bera.test(fil_dat_6_before$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#por lo tanto los datos se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_6_before$Ventas, \"normal\")\n\n```\n\n::: {style=\"text-align:justify\"}\nPara el caso del día sábado, denotado como séptimo día, no se obtuvo una distribución normal por lo que se utilizo la paqueteria de R fitdistrplus para probar el ajuste de otras distribuciones clásicas de probabilidad. Las distribuciones probadas se presentan en el código siguiente:\n\n```{r, echo = TRUE, message=FALSE}\nfitdistr(fil_dat_7_before$Ventas, \"weibull\")\nfitdistr(fil_dat_7_before$Ventas, \"exponential\")\nfitdistr(fil_dat_7_before$Ventas, \"lognormal\")\n\n```\n\n::: {style=\"text-align:justify\"}\nDe lo anterior podemos decir que el mejor ajuste se obtuvo al usar la distribución Weibull.\n:::\n:::\n\n### Prueba de la distribución Weibull:\n\n::: {style=\"text-align:justify\"}\nUna vez ajustada la distribución Weibull, se prueban sus parametros con la aplicación del test de Kolmogorov de Smirnov. El siguiente código implementa ambos procedimientos:\n\n```{r, echo = FALSE, message=FALSE}\n#############################################\n#filtra los datos del día Sábado antes de la pandemia\nfil_dat_7_before<- data.frame(subset(fil_before, Dia == 7))\n#___________________________________________________________\n\nQ7 <- quantile(fil_dat_7_before$Ventas, probs=c(.25, .75), na.rm = FALSE)\nIQR7 <- IQR(fil_dat_7_before$Ventas)\n\nLower <- Q7[1] - 1.5*IQR7\nUpper <- Q7[2] + 1.5*IQR7 \n\nfil_dat_7_before <- subset(fil_dat_7_before, fil_dat_7_before$Ventas > Lower & fil_dat_7_before$Ventas < Upper)\n\naux_box7 <- data.frame(fil_dat_7_before$Ventas)\n```\n:::\n\n```{r, echo = TRUE, message=FALSE}\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#JARQUE BERA\njarque.bera.test(fil_dat_7_before$Ventas)\n#Fitting de de una distri bución weibull\n#fil_dat_7_before$Ventas\nfit.weibull <- fitdist(fil_dat_7_before$Ventas, \"weibull\")\nfit.weibull\nvector_ventas7_ordenados <- fil_dat_7_before$Ventas[order(fil_dat_7_before$Ventas)]\nn = 83\nF_x = numeric(n)\nfor(i in 1:n){\n  F_x[i] <- (i/ n)\n}\n#F_x\nf_gorro_x <-  pweibull(vector_ventas7_ordenados,\n                       shape = 4.784508e+00, scale =1.295070e+05, \n                       lower.tail = TRUE, log.p = FALSE)\nks <- abs(F_x - f_gorro_x)\n```\n\n#### Representación gráfica al aplicar el test de Kolmogorov de Smirnov\n\n```{r, echo = FALSE, message=FALSE}\nmax(ks)\nvalor_critico = (1.36/(sqrt(n)))\nvalor_critico\n```\n\n```{r, message=FALSE}\n\nx <- 1:83 \ng1 <- plot(1:83, F_x) \ng2 <- plot(1:83, f_gorro_x) \nplot(x, F_x, col='red', xlab='x', ylab='y')\n\n#add second line to plot \npoints(x, f_gorro_x, col='blue')\n```\n\n::: {style=\"text-align:justify\"}\nPara el periodo despues de pandemia se repite la misma metodología. Aplicamos el test de Jarque Bera a los datos para cada día de la semana después de pandemia.\n:::\n\n```{r, echo = FALSE, message=FALSE}\n#________________________Después de la pandemia__________________________________\n\n\nfil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8))\n#filtra los datos del día domingo despues de la pandemia\nfil_dat_1_after<- data.frame(subset(datos, Año == 2020 & Mes >= 8 & Dia==1))\n\n#median(fil_dat_1_after$Ventas)\n#summary(fil_dat_1_after$Ventas)\n#p1 <- hist(fil_dat_1_after$Ventas)\n#boxplot(fil_dat_1_after$Ventas)\n#______________________________________________________________________\n\n\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_1_after$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra  proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_1_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_1_after$Ventas)\nfitdistr(fil_dat_1_after$Ventas, \"normal\")\n\n#filtra los datos del día lunes despues de la pandemia\nfil_dat_2_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==2))\nfil_dat_2_after <- fil_dat_2_after[fil_dat_2_after$Ventas != max(fil_dat_2_after$Ventas), ]\n#median(fil_dat_2_after$Ventas)\n#summary(fil_dat_2_after$Ventas)\n#p2 <- hist(fil_dat_2_after$Ventas)\n#boxplot(fil_dat_2_after$Ventas, outline=FALSE) #Dato atípico\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_2_after)\n#Q2a <- quantile(fil_dat_2_after$Ventas, probs=c(.05, .95), na.rm = FALSE)\n#IQR2a <- IQR(fil_dat_2_after$Ventas)\n\n#Lower <- Q2a[1] - 1.5*IQR2a\n#Upper <- Q2a[2] + 1.5*IQR2a \n\n#fil_dat_2_after <- subset(fil_dat_2_after, fil_dat_2_after > Lower & fil_dat_2_after < Upper)\n\n#_________________________________________\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_2_after$Ventas)\n#El valor p es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra no proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_2_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_2_after$Ventas)\nfitdistr(fil_dat_2_after$Ventas, \"normal\")\n\n#filtra los datos del día martes despues de la pandemia\nfil_dat_3_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==3))\n\n#median(fil_dat_3_after$Ventas)\n#summary(fil_dat_3_after$Ventas)\n#Histograma de las ventas día martes\n#p3 <- hist(fil_dat_3_after$Ventas)\n#boxplot(fil_dat_3_after$Ventas)\n\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_3_after)\n\n\n#dim(fil_dat_3_after$Ventas)\n\n#aux_box3a <- data.frame(fil_dat_3_after)\n#___________________________\n\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_3_after$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_3_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_3_after$Ventas)\nfitdistr(fil_dat_3_after$Ventas, \"normal\")\n\n#filtra los datos del día miércoles despues de la pandemia\nfil_dat_4_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==4))\n\n#median(fil_dat_4_after$Ventas)\n#summary(fil_dat_4_after$Ventas)\n#p4 <- hist(fil_dat_4_after$Ventas)\n#boxplot(fil_dat_4_after$Ventas, outline=FALSE) #Dato atípico\n\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_4_after$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_4_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_4_after$Ventas)\nfitdistr(fil_dat_4_after$Ventas, \"normal\")\n\n#filtra los datos del día jueves despues de la pandemia\nfil_dat_5_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==5))\n\n#median(fil_dat_5_after$Ventas)\n#summary(fil_dat_5_after$Ventas)\n#p5 <- hist(fil_dat_5_after$Ventas)\n#boxplot(fil_dat_5_after$Ventas, outline=FALSE)#Dato atípico\n\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_5_after$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_5_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_5_after$Ventas)\nfitdistr(fil_dat_5_after$Ventas, \"normal\")\n\n#filtra los datos del día viernes despues de la pandemia\nfil_dat_6_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==6))\n\n#median(fil_dat_6_after$Ventas)\n#summary(fil_dat_6_after$Ventas)\n#p6 <- hist(fil_dat_6_after$Ventas)\n#boxplot(fil_dat_6_after$Ventas)\n\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_6_after$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_6_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_6_after$Ventas)\nfitdistr(fil_dat_6_after$Ventas, \"normal\")\n\n#filtra los datos del día sábado despues de la pandemia\nfil_dat_7_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==7))\n\n#median(fil_dat_7_after$Ventas)\n#summary(fil_dat_7_after$Ventas)\n#p7 <- hist(fil_dat_7_after$Ventas)\n#boxplot(fil_dat_7_after$Ventas)\n\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_7_after$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_7_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_7_after$Ventas)\n#Se ajustara una distribución con el comando siguiente:\nfitdistr(fil_dat_7_after$Ventas, \"normal\")\n```\n\n```{r}\n#_______Después de la pandemia____________________________________\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra  proviene de una población con distribución normal.\n#JARQUE BERA\njarque.bera.test(fil_dat_1_after$Ventas)\nfitdistr(fil_dat_1_after$Ventas, \"normal\")\n#________________________________________________________________\n#Calcularemos los test correspondientes \n#a los filtros de de ventas por día:\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#JARQUE BERA\njarque.bera.test(fil_dat_2_after$Ventas)\nfitdistr(fil_dat_2_after$Ventas, \"normal\")\n#________________________________________________________________\n#Calcularemos los test correspondientes \n# a los filtros de de ventas por día:\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#JARQUE BERA\njarque.bera.test(fil_dat_3_after$Ventas)\nfitdistr(fil_dat_3_after$Ventas, \"normal\")\n#________________________________________________________________\n#Calcularemos los test correspondientes \n# a los filtros de de ventas por día:\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#JARQUE BERA\njarque.bera.test(fil_dat_4_after$Ventas)\nfitdistr(fil_dat_4_after$Ventas, \"normal\")\n#________________________________________________________________\n#Calcularemos los test correspondientes \n# a los filtros de de ventas por día:\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#JARQUE BERA\njarque.bera.test(fil_dat_5_after$Ventas)\nfitdistr(fil_dat_5_after$Ventas, \"normal\")\n#________________________________________________________________\n#Calcularemos los test correspondientes \n# a los filtros de de ventas por día:\n# El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#JARQUE BERA\njarque.bera.test(fil_dat_6_after$Ventas)\nfitdistr(fil_dat_6_after$Ventas, \"normal\")\n#________________________________________________________________\n#Calcularemos los test correspondientes \n# a los filtros de de ventas por día:\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\njarque.bera.test(fil_dat_7_after$Ventas)\n#Se ajustara una distribución con el comando siguiente:\nfitdistr(fil_dat_7_after$Ventas, \"normal\")\n```\n\n::: {style=\"text-align:justify\"}\nCon las distribuciones identificadas de las ventas por día en los dos periodos, ahora es posible simular las variables aleatorias de las ventas de cada día de la semana y por lo tanto simular las ganancias de toda la semana.\n:::\n\n## Modelo Modificado de Cramér-Lundberg para identificar la probabilidad de las ganancias insuficientes en una empresa de comida rápida\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align:justify\"}\nComo ya se vio en la sección (@sec-modelo_C_L) el Modelo de Cramér-Lundberg (MCL)es una herramienta utilizada en el campo de la gestión de riesgos y las finanzas para evaluar la probabilidad de incumplimiento o pérdidas insuficientes en una empresa. Aunque no es específicamente diseñado para analizar la variación de las ganancias de una empresa, en particular una empresa de comida rápida, se propone en este trabajo una adaptación del modelo, para evaluar la probabilidad de ganancias en este tipo de negocio, que puede facilitar el análisis de la evolución financiera de la empresa.\n\nPara ello la ecuación general del modelo modificado que representa la evolución de las ganancias en el tiempo hasta la semana $t$, denotada por $G$ queda definida como: $$G(t) = u -ct + V(t), \\ \\ t = 1, 2, 3, ...$$ {#eq-4.1}\n\n::: {style=\"text-align:justify\"}\nla cual se estudiara en los periodos de tiempo (pre-pandemia, pos-pandemia).\n:::\n\n-   $V(t)$: son los ingresos de las ganancias por día para cada semana.\n\n-   $c$ : Son los costos de las obligaciones financieras del inversionista, como prestamos, pagos por adquisición de la franquicia, compras de equipos inmobiliarios, pagos de empleados, etc.\n\n-   $u \\geq 0$ : Es el capital inicial con el cual inicia la empresa a trabajar.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align:justify\"}\nComo ya se vio en la sección (@sec-modelo_C_L) El Modelo de Cramér-Lundberg (MCL) es una herramienta utilizada en el campo de la gestión de riesgos y las finanzas para evaluar la probabilidad de incumplimiento o pérdidas insuficientes en una empresa. Aunque no es específicamente diseñado para analizar la variación de las ganancias de una empresa, en particular una empresa de comida rápida, puede adaptarse para evaluar la probabilidad de ganancias insuficientes en este tipo de negocio, que puede llevar a la decisión de cierre de las actividades de la empresa.\n\nPara ello la ecuación general del modelo modificado que representa la evolución de las ganancias en el tiempo hasta la semana $t$, denotada por $G$ queda definida como: $$G(t) = u -ct + V(t), \\ \\ t = 1, 2, 3, ...$$ {#eq-4.1pdf}\n\n::: {style=\"text-align:justify\"}\nla cual se estudiara en los dos periodo de tiempo (pre-pandemia, pos-pandemia).\n:::\n\n-   $V(t)$: son los ingresos de las ganancias por día para cada semana\n\n-   $c$ : Son los costos de las obligaciones financieras del inversionista, como prestamos, pagos por adquisición de la franquicia, compras de equipos inmobiliarios, pagos de empleados, etc.\n\n-   $u \\geq 0$ : Es el capital inicial con el cual inicia la empresa a trabajar.\n:::\n:::\n\n### Caso pre-pandemia\n\n::: {style=\"text-align:justify\"}\nPara la implementación del modelo modificado Cramér-Lundberg con los datos antes de la pandemia se hizo la simulación de las variables aleatorias mediante las distribuciones de las ventas por día tomado como las ganancias acumuladas, y se estimó los parámetros de $u$ y $c$, por lo que el modelo es determinista y se incrementa por semana.\n:::\n\n#### Modelo de Cramér-Lundberg simulado en R con datos reales de las ventas por día de la empresa.\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align:justify\"}\nEn la (@fig-trayectoria) se muestra la trayectoria del modelo bajo los supuestos del modelo modificado, el proceso comienza con $t = 90$, que son las $90$ semanas de de las ventas registradas por día antes del cierre pandemico, con un capital inicial de $u= 1759629$, una tasa de $c= 0.29$, los montos de las ganancias tienen distribución normal ($N$) y weibull ($W$).\n\nEl código que genera la trayectoria es el siguiente:\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align:justify\"}\nEn la (@fig-fig-trayectoriapdf) se muestra la trayectoria del modelo bajo los supuestos del modelo modificado, el proceso comienza con $t = 90$, que son las $90$ semanas de de las ventas registradas por día antes del cierre pandemico, con un capital inicial de $u= 1759629$, una tasa de $c= 0.29$, los montos de las ganancias tienen distribución normal y weibull.\n\nEl código que genera la trayectoria es el siguiente:\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r , eval=FALSE, message=FALSE}\n#Simulación Modelo Clásico de Cramér-Lundberg \n#para tres meses: Antes de la pandemia\n#Con los datos reales de la empresa\nlibrary(dplyr)#librería para poder renombrar las cabeceras \n# de los dataframes\n#Parámetros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc =0.29*u #prima de pago cada timepo t. c=0.5*u\nt_final = 90\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt <- function(u, c, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)\n  Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 )  + \n            rnorm(1, mean = 48125.734 , sd=17150.338 )   +  \n            rnorm(1, mean =  44509.755, sd = 14312.338)  + \n            rnorm(1, mean =   46904.516, sd = 16238.151) + \n            rnorm(1, mean = 52786.734  , sd = 18403.17)  + \n            rnorm(1, mean = 118645.9  , sd = 36530.24)   + \n    rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] +\n                  tiempo_llegada,tiempo[length(tiempo)] +\n                  tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n           Cramer_trayectoria[length(Cramer_trayectoria)]- \n                              c*tiempo_llegada,\n          Cramer_trayectoria[length(Cramer_trayectoria)]-\n                              c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename\n                               (Tiempo = tiempo, \n                                 Ct = Cramer_trayectoria))\n  return(df_trayectoria)\n  \n}\ntrayectoria <- trayectoria_CLt(u,c, t_final )\n\n#Intalación de plotly usando github\n#devtools::install_github(\"ropensci/plotly\")\n\nfig_tr<- plot_ly(trayectoria, x = ~Tiempo, y = ~Ct, \nname = \"Ganancias: G(t)\", type = \"scatter\", mode = \"lines\")\nfig_tr <- fig_tr %>% add_trace(x = ~Tiempo, y = u,  \nname = \"Capital inicial: u\", type = \"scatter\", mode = \"lines\")\nfig_tr\n```\n\n![Trayectoria del proceso de evolución del modelo modificado de Cramér Lundberg antes de la pandemia.](fig-trayectoriapdf.png){#fig-fig-trayectoriapdf fig-align=\"center\" width=\"80%\"}\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-trayectoria}\n```{r , echo = TRUE, message=FALSE}\n#Simulación Modelo Clásico de Cramér-Lundberg \n#para tres meses: Antes de la pandemia\n#Con los datos reales de la empresa\n\nlibrary(dplyr) # librería para poder renombrar las cabeceras \n# de los dataframes\n\n#Parámetros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc =0.29*u #prima de pago cada timepo t. c=0.5*u\nt_final = 90\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt <- function(u, c, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)\n  Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) + \n    rnorm(1, mean = 48125.734 , sd=17150.338 ) +  \n   rnorm(1, mean =  44509.755, sd = 14312.338 ) + \n    rnorm(1, mean =   46904.516, sd = 16238.151 ) + \n    rnorm(1, mean = 52786.734  , sd = 18403.17 ) + \n    rnorm(1, mean = 118645.9  , sd = 36530.24) + \n    rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + \n                tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n    Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada,\n    Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  return(df_trayectoria)\n  \n}\ntrayectoria <- trayectoria_CLt(u,c, t_final )\n\n#Intalación de plotly usando github\n#devtools::install_github(\"ropensci/plotly\")\n\nfig_tr<- plot_ly(trayectoria, x = ~Tiempo, y = ~Ct, \nname = \"Ganancias: G(t)\", type = \"scatter\", mode = \"lines\")\nfig_tr <- fig_tr %>% add_trace(x = ~Tiempo, y = u,  \nname = \"Capital inicial: u\", type = \"scatter\", mode = \"lines\")\nfig_tr\n\n```\n\nTrayectoria del proceso de evolución del modelo modificado de Cramér Lundberg antes de la pandemia.\n:::\n:::\n\n#### Probabilidad de ruina\n\n::: {style=\"text-align:justify\"}\nCon la simulación de la variable aleatoria $G(t)$, es posible ahora calcular la probabilidad de ruina, utilizando el método de Monte Carlo(citar).\n\nPara ello, se quiere analizar el momento en el que $G(t)\\leq u$, es decir cuando la ganancia al final de la semana $t$ es menor al capital inicial. Cuando $G(t)\\leq0$, se alcanza como la ruina de la empresa, para ambos casos se utiliza la comparación con la tasa de interés para préstamos bancarios de $0.8$ anual.\n\nEl código para simular la probabilidad de las ganancias finales bajas es el siguiente:\n:::\n\n```{r, echo= TRUE, message=FALSE}\n#Simulación de la probabilidad de ruina: Antes de la pandemia\n#Con los datos reales de la empresa\nlibrary(dplyr) # librería para poder renombrar \n#las cabeceras de los dataframes\n\n#Parámetros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada tiempo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 48\nmu = 1 #tiempos entrellegadas constantes\ntrayectoria_CLt <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1) \n    #Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) + \n             rnorm(1, mean = 48125.734 , sd=17150.338 ) +  \n             rnorm(1, mean =  44509.755, sd = 14312.338 ) + \n             rnorm(1, mean =   46904.516, sd = 16238.151 ) + \n             rnorm(1, mean = 52786.734  , sd = 18403.17 ) + \n             rnorm(1, mean = 118645.9  , sd = 36530.24) +\n             rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] +\n                  tiempo_llegada,tiempo[length(tiempo)] + \n                  tiempo_llegada ) \n    Cramer_trayectoria <-c(Cramer_trayectoria,\n                Cramer_trayectoria[length(Cramer_trayectoria)]-\n                  c*tiempo_llegada,\n                Cramer_trayectoria[length(Cramer_trayectoria)]-\n                  c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n# 1.08*u es la ganancia inferior a la de un tasa de \n  #un título financiero \n#para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.08*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>%rename\n                               (Tiempo = tiempo, \n                                Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria <- trayectoria_CLt(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar \n#la probabilidad de las ganancias bajas\nn_replicaciones = 100\nr_baja_ganancia <- replicate(n_replicaciones,\ntrayectoria_CLt(u, c, lambda_Nt, t_final)\n[2])\n#r_baja_ganancia \nprob_baja_ganancia <- sum(r_baja_ganancia >0)/n_replicaciones\n```\n\n::: {style=\"text-align:justify\"}\nEs claro que la evolución de $G(t)$ antes de la pandemia genera una probabilidad de ganancias bajas cero.\n:::\n\n```{r, echo=FALSE}\nprob_baja_ganancia\n```\n\n::: {style=\"text-align:justify\"}\nEl código para calcular la probabilidad de ruina es el siguiente:\n:::\n\n```{r, echo= TRUE, message=FALSE}\n#Simulación de la probabilidad de ruina: Antes de la pandemia\n#Con los datos reales de la empresa\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada tiempo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 48\nmu = 1 #tiempos entrellegadas constantes\ntrayectoria_CLt <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1) \n#Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) +\n             rnorm(1, mean = 48125.734 , sd=17150.338 )   +  \n             rnorm(1, mean =  44509.755, sd = 14312.338 ) + \n             rnorm(1, mean =   46904.516, sd = 16238.151) + \n             rnorm(1, mean = 52786.734  , sd = 18403.17 ) +\n             rnorm(1, mean = 118645.9  , sd = 36530.24)   + \n             rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] +\n                  tiempo_llegada,tiempo[length(tiempo)] + \n                  tiempo_llegada ) \n    Cramer_trayectoria <-c(Cramer_trayectoria,\n                Cramer_trayectoria[length(Cramer_trayectoria)]-\n                             c*tiempo_llegada,\n                Cramer_trayectoria[length(Cramer_trayectoria)]-\n                             c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n# 1.08*u es la ganancia inferior a la de un tasa de\n# un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.08*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename\n                               (Tiempo = tiempo, \n                                 Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria <- trayectoria_CLt(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_ruina <- replicate(n_replicaciones, \n            trayectoria_CLt(u, c, lambda_Nt, t_final)[1])\n#r_ruina\nprob_ruin <- sum(r_ruina>0)/n_replicaciones\n```\n\n::: {style=\"text-align:justify\"}\nEn efecto la evolución de $G(t)$ antes de la pandemia genera una probabilidad ruina cero.\n:::\n\n```{r, echo=FALSE}\nprob_ruin\n```\n\n#### Análisis de sensibilidad\n\n::: {style=\"text-align:justify\"}\nSe desea ahora analizar los cambios del resultado del modelo cuando se modifican sus entradas o parámetros, por lo cual se realiza un análisis de sensibilidad de algunos parámetros.\n\nPara ello del modelo modificado de Cramér Lundberg se toma los parámetros $u$ y $c$ del modelo modificado y se establece los rangos o valores posibles para cada uno de los ciertos parámetros, también se toma las medianas de las ganancia en la semana final de 100 simulaciones de las trayectorias del modelo, los rangos se determinan hasta que el modelo presente un comportamiento diferente.\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo =TRUE}\n#Simulación Modelo Clásico de Cramer-Lundberg para tres meses: \n#Antes de la pandemia Con los datos reales de la empresa\n\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 90\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) +\nrnorm(1, mean = 48125.734 , sd=17150.338 ) +  \nrnorm(1, mean =  44509.755, sd = 14312.338 ) + \nrnorm(1, mean =   46904.516, sd = 16238.151 ) + \nrnorm(1, mean = 52786.734  , sd = 18403.17 ) \n+ rnorm(1, mean = 81601.876  , sd = 23756.037) \n+ rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,\n    tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n    Cramer_trayectoria[length(Cramer_trayectoria)]- \n      c*tiempo_llegada,\n    Cramer_trayectoria[length(Cramer_trayectoria)]-\n      c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n      {\n      ruina = 1\n      }\n    else\n      {\n      ruina = 0\n      }\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename\n                               (Tiempo = tiempo, \n                                Ct = Cramer_trayectoria))\n  return(df_trayectoria$Ct[length(df_trayectoria$Ct)])\n  \n}\n\n# La función generador_mediana nos calcula \n#la mediana de las ganancias finales \n#de 100 trayectorias, fijando el u= surplus y el c\ngenerador_mediana<- function(ui,cj)\n  {\n  ganancia_final_replicas <- replicate(100, \n                                       trayectoria_CLt(u, c,\n                                        lambda_Nt, t_final))\n  return( median(ganancia_final_replicas))\n  }\n#Se crea la rejilla donde se hace el analisis de sensibilidad\n#para diferentes valores de u y c\ngrid_u <- seq(from = (u-100000*4), to = (u+100000*4), by = 100000)\ngrid_c <- seq(from = (decimal_c-0.01*4), to = (decimal_c+0.01*4), \n              by = 0.01)\nu_t <- grid_u\nmatriz_mediana <- matrix(rep(0, length(u_t)*length(grid_c)),\nnrow= length(u_t), ncol= length(grid_c))\nG_t <- matriz_mediana\n\nfor (i in 1:length(u_t)) \n  {\n    for (j in 1:length(grid_c)) \n      {\n      G_t[i,j] <- generador_mediana(u_t[i],grid_c[j]*u_t[i])\n      }\n  }  \n#matriz_mediana\n\n#Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- u_t*grid_c\nfig <- plot_ly(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], \n             end = u_t[length(u_t)], \n             size =100000 , color = 'red'),\n    z = list(show = TRUE, start = G_t[1], \n             end = G_t[length(G_t)], \n             size = 0.01*100000)),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\nfig <- fig %>% layout(\n  scene = list(autosize = F, width = 500, height = 500,\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 8),\n    camera = list(eye = list(x = 0, \n                             y = -1, z = 1)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\nfig\n\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval = FALSE}\n#Simulación Modelo Clásico de Cramer-Lundberg para tres meses: \n#Antes de la pandemia Con los datos reales de la empresa\n\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 90\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) +\n            rnorm(1, mean = 48125.734 , sd=17150.338 )    +  \n            rnorm(1, mean =  44509.755, sd = 14312.338 )  + \n            rnorm(1, mean =   46904.516, sd = 16238.151 ) + \n            rnorm(1, mean = 52786.734  , sd = 18403.17 )  + \n            rnorm(1, mean = 81601.876  , sd = 23756.037)  + \n            rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] +\n                  tiempo_llegada,\n                tiempo[length(tiempo)] + \n                  tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n            Cramer_trayectoria[length(Cramer_trayectoria)]- \n                          c*tiempo_llegada,\n            Cramer_trayectoria[length(Cramer_trayectoria)]-\n                          c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n      {\n      ruina = 1\n      }\n    else\n      {\n      ruina = 0\n      }\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename\n                               (Tiempo = tiempo, \n                                Ct = Cramer_trayectoria))\n  return(df_trayectoria$Ct[length(df_trayectoria$Ct)])\n  \n}\n\n# La función generador_mediana nos calcula \n#la mediana de las ganancias finales \n#de 100 trayectorias, fijando el u= surplus y el c\ngenerador_mediana<- function(ui,cj)\n  {\n  ganancia_final_replicas <- replicate(100, \n                                       trayectoria_CLt(u, c,\n                                        lambda_Nt, t_final))\n  return( median(ganancia_final_replicas))\n  }\n#Se crea la rejilla donde se hace el analisis de sensibilidad\n#para diferentes valores de u y c\ngrid_u <- seq(from = (u-100000*4), to = (u+100000*4), by = 100000)\ngrid_c <- seq(from = (decimal_c-0.01*4), to = (decimal_c+0.01*4), \n              by = 0.01)\nu_t <- grid_u\n\nmatriz_mediana <- matrix(rep(0, length(grid_u)*length(grid_c)),\nnrow= length(grid_u), ncol= length(grid_c))\nG_t <- matriz_mediana\nfor (i in 1:length(grid_u)) \n  {\n    for (j in 1:length(grid_c)) \n      {\n        G_t[i,j] <- generador_mediana(u_t[i],\n                              grid_c[j]*u_t[i])\n      }\n  }  \n#matriz_mediana\n\n#Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- grid_u*grid_c\nfig <- plot_ly(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], \n             end = u_t[length(u_t)], \n             size =100000 , color = 'red'),\n    z = list(show = TRUE, start = G_t[1], \n             end = G_t[length(G_t)], \n             size = 0.01*100000)),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\nfig <- fig %>% layout(\n  scene = list(autosize = F, width = 500, height = 500,\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 8),\n    camera = list(eye = list(x = 0, \n                             y = -1, z = 1)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\nfig\n\n\n```\n\n![Análisis de sensibilidad pre-pandemia para 90 semanas](fig-analisispdf.png){fig-align=\"center\" width=\"500\"}\n:::\n\n### Caso pos-pandemia\n\n::: {style=\"text-align:justify\"}\nDe manera análoga a la metodología empleada con los datos pre-pandemicos, para la simulación del modelo Crámer-Lundberg con los datos después de la pandemia se hizo uso de las medias de las distribuciones de las ventas por día tomado como las ganancias acumuladas, y se estimó los parámetros de $u$ y $c$.\n:::\n\n#### Modelo de Cramér-Lundberg simulado en R con datos reales de las ventas por día de la empresa\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align:justify\"}\nEn la (@fig-trayectoria2) se muestra la trayectoria del modelo bajo los supuestos del modelo modificado, el proceso comienza con $t = 14$, que son las $14$ semanas de las ventas registradas por día después del cierre pandémico, con un capital inicial de $u= 1759629$, una tasa de $c= 0.29$, los montos de las ganancias tienen todas distribución normal ($N$).\n\nEl código que genera la trayectoria es el siguiente:\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align:justify\"}\nEn la (@fig-fig-trayectoria2pdf) se muestra la trayectoria del modelo bajo los supuestos del modelo modificado, el proceso comienza con $t = 14$, que son las $14$ semanas de de las ventas registradas por día después del cierre pandemico, con un capital inicial de $u= 1759629$, una tasa de $c= 0.29$, los montos de las ganancias tienen todas distribución normal ($N$).\n\nEl código que genera la trayectoria es el siguiente:\n:::\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-trayectoria2}\n```{r , echo = TRUE, message=FALSE}\n\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = (0.29*u) #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 \n    ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \nCramer_trayectoria <- c(Cramer_trayectoria,\nCramer_trayectoria[length(Cramer_trayectoria)]\n-c*tiempo_llegada,\n\nCramer_trayectoria[length(Cramer_trayectoria)]-\nc*tiempo_llegada +  Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr2 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, y = ~Ct, name = \"Ganancias: G(t)\",type = \"scatter\", mode = \"lines\")\n\nfig_tr2 <- fig_tr2 %>% add_trace(x = ~Tiempo, y = u,  name = \"Capital inicial: u\", type = \"scatter\", mode = \"lines\")\nfig_tr2\n\n\n```\n\nTrayectoria de pérdidas del proceso de evolución modificado de Cramér Lundberg después de la pandemia.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r , eval=FALSE}\n\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = (0.29*u) #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)+\n             rnorm(1, mean =  39841.721 , sd= 7873.446)  + \n             rnorm(1, mean =   41751.747, sd = 5687.030) + \n             rnorm(1, mean =   43243.143, sd = 10517.841)+ \n             rnorm(1, mean = 43010.307  , sd = 7741.889 )+ \n             rnorm(1, mean = 61191.300  , sd = 7202.989) + \n             rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \ntiempo <- c(tiempo, tiempo[length(tiempo)] +\n              tiempo_llegada,tiempo[length(tiempo)] +\n              tiempo_llegada ) \nCramer_trayectoria <- c(Cramer_trayectoria,\nCramer_trayectoria[length(Cramer_trayectoria)] -\n  c*tiempo_llegada, \nCramer_trayectoria[length(Cramer_trayectoria)] -\n  c*tiempo_llegada +  Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\ndf_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% \n                                        rename(Tiempo = tiempo,\n                                        Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                              lambda_Nt,t_final)\n\n\nlibrary(plotly)\nfig_tr2 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, \n                                              y = ~Ct, \n          name = \"Ganancias: G(t)\",\n          type = \"scatter\", mode = \"lines\")\n\nfig_tr2 <- fig_tr2 %>% add_trace(x = ~Tiempo, y = u,\n        name = \"Capital inicial: u\", \n        type = \"scatter\", mode = \"lines\")\nfig_tr2\n\n\n```\n\n![Trayectoria de pérdidas del proceso de evolución modificado de Cramér Lundberg después de la pandemia](trayectoria2pdf.png){#fig-fig-trayectoria2pdf fig-align=\"left\" width=\"600\"}\n:::\n\n::: {style=\"text-align:justify\"}\nSe emplean los mismos parámetros obtenidos en el periodo de tiempo pre pandemia del modelo modificado donde se observa una completa ruina al alcanzar $17$ semanas.\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r , eval =FALSE}\nlibrary(dplyr) # libreria para poder renombrar \n# las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 17\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) \n+ rnorm(1, mean =  39841.721 , sd= 7873.446 \n    ) +  \nrnorm(1, mean =   41751.747, sd = 5687.030  ) + \nrnorm(1, mean =   43243.143, sd = 10517.841 ) + \nrnorm(1, mean = 43010.307  , sd = 7741.889 ) + \nrnorm(1, mean = 61191.300  , sd = 7202.989) + \nrnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] \n    + tiempo_llegada,tiempo[length(tiempo)]\n    + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n    Cramer_trayectoria[length(Cramer_trayectoria)]\n    - c*tiempo_llegada,\n    Cramer_trayectoria[length(Cramer_trayectoria)]-\n    c*tiempo_llegada +  Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\ndf_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                        rename(Tiempo = tiempo,\n    Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr3 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, \n                                              y = ~Ct,\n            name = \"Ganancias:G(t)\",\n            type = \"scatter\", mode = \"lines\")\n\nfig_tr3 <- fig_tr3 %>% add_trace(x = ~Tiempo, y = u,\n           name = \"Capital inicial:u\", \n           type = \"scatter\", mode = \"lines\")\nfig_tr3\n```\n\n![](trayectoria3pdf.png){#fig-fig-trayectoria3pdf}\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-trayectoria3}\n```{r , eval =FALSE}\nlibrary(dplyr) # libreria para poder renombrar \n# las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 17\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) \n+ rnorm(1, mean =  39841.721 , sd= 7873.446 \n    ) +  \nrnorm(1, mean =   41751.747, sd = 5687.030  ) + \nrnorm(1, mean =   43243.143, sd = 10517.841 ) + \nrnorm(1, mean = 43010.307  , sd = 7741.889 ) + \nrnorm(1, mean = 61191.300  , sd = 7202.989) + \nrnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] \n    + tiempo_llegada,tiempo[length(tiempo)]\n    + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n    Cramer_trayectoria[length(Cramer_trayectoria)]\n    - c*tiempo_llegada,\n    Cramer_trayectoria[length(Cramer_trayectoria)]-\n    c*tiempo_llegada +  Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\ndf_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                        rename(Tiempo = tiempo,\n    Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr3 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, \n                   y = ~Ct, \n                   name = \"Ganancias:G(t)\",\n                   type = \"scatter\", mode = \"lines\")\n\nfig_tr3 <- fig_tr3 %>% add_trace(x = ~Tiempo, y = u,\n           name = \"Capital inicial:u\", \n           type = \"scatter\", mode = \"lines\")\nfig_tr3\n\n\n```\n:::\n:::\n\n::: {style=\"text-align:justify\"}\nLa evolución del proceso de pérdidas en el modelo modificado de Cramér-Lundberg proporciona una herramienta más precisa y adaptable para predecir y contrarrestar los impactos financieros negativos de la empresa.\n\nSe incorpora un factor adicional y ajuste que mejoran la simulación del modelo, mediante la modificación del parámetro $c$, reduciendo un $17\\%$ presentándose así los resultados siguientes mediante el siguiente código.\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-trayectoria4}\n```{r , echo = TRUE, message=FALSE}\n\nlibrary(dplyr) # libreria para poder renombrar \n# las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = (0.29*u)*(0.83) #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    \n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) + \n            rnorm(1, mean =  39841.721 , sd= 7873.446) +  \n            rnorm(1, mean =   41751.747, sd = 5687.030) + \n            rnorm(1, mean =   43243.143, sd = 10517.841) + \n            rnorm(1, mean = 43010.307  , sd = 7741.889) + \n            rnorm(1, mean = 61191.300  , sd = 7202.989) + \n            rnorm(1, mean =  85684.058 , sd = 8371.359 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + \n                tiempo_llegada,tiempo[length(tiempo)] + \n                tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]-\n                            c*tiempo_llegada, \n                            Cramer_trayectoria[length(Cramer_trayectoria)]- \n                            c*tiempo_llegada + Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename\n                                             (Tiempo = tiempo, \n                                               Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr4 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, \n                   y = ~Ct, \n         name = \"Ganancias: G(t)\",type = \"scatter\", mode = \"lines\")\n\nfig_tr4 <- fig_tr4 %>% add_trace(x = ~Tiempo, y = u,\n           name = \"Capital inicial:u\", type = \"scatter\", mode = \"lines\")\nfig_tr4\n\n```\n\nTrayectoria del proceso de pérdidas generadas por el modelo modificado de Cramér Lundberg después de la pandemia con una reducción de los costos al $17 \\%$.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r , eval=FALSE}\n\nlibrary(dplyr) # libreria para poder renombrar \n# las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = (0.29*u)*(0.83) #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    \n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) + \n            rnorm(1, mean =  39841.721 , sd= 7873.446) +  \n            rnorm(1, mean =   41751.747, sd = 5687.030) + \n            rnorm(1, mean =   43243.143, sd = 10517.841) + \n            rnorm(1, mean = 43010.307  , sd = 7741.889) + \n            rnorm(1, mean = 61191.300  , sd = 7202.989) + \n            rnorm(1, mean =  85684.058 , sd = 8371.359 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + \n                tiempo_llegada,tiempo[length(tiempo)] + \n                tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                    Cramer_trayectoria[length(Cramer_trayectoria)]-\n                          c*tiempo_llegada, \n                    Cramer_trayectoria[length(Cramer_trayectoria)]- \n                            c*tiempo_llegada + Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% \n                                          rename(Tiempo = tiempo, \n                                          Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr4 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, \n                   y = ~Ct, \n         name = \"Ganancias: G(t)\",\n         type = \"scatter\", mode = \"lines\")\n\nfig_tr4 <- fig_tr4 %>% add_trace(x = ~Tiempo, y = u,\n        name = \"Capital inicial: u\", \n        type = \"scatter\", mode = \"lines\")\nfig_tr4\n\n\n```\n\n![Trayectoria del proceso de pérdidas generadas por el modelo de Cramér Lundberg después de la pandemia con una reducción de los costos al 17%.](trayectoria4pdf.png){fig-align=\"center\"}\n:::\n\n#### Probabilidad de ruina\n\n::: {style=\"text-align:justify\"}\nAl igual que para el caso con los datos antes de la pandemia se analizó la semana en el que $G(t)\\leq u$ y cuando $G(t)\\leq0$, haciendo la comparación con la tasa de interés de $0.8$ anual en una cuenta de ahorro para una inversión del capital inicial $u$, para este periodo tomamos $t = 14$, es decir los datos registrados hasta las $14$ semanas después de pandemia donde la tasa es de $0.0233$\n\nEl código para calcular la probabilidad de las ganancias finales bajas es el siguiente:\n:::\n\n```{r, eval= FALSE, message=FALSE}\nlibrary(dplyr) # librería para poder renombrar las \n# cabeceras de los dataframes\n\n#Parámetros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\nmu = 1 #tiempos entrellegadas constantes\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) \n#Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075   ) \n              + rnorm(1, mean =  39841.721 , sd= 7873.446  ) \n              + rnorm(1, mean =   41751.747, sd = 5687.030 ) \n              + rnorm(1, mean =   43243.143, sd = 10517.841) \n              + rnorm(1, mean = 43010.307  , sd = 7741.889 ) \n              + rnorm(1, mean = 61191.300  , sd = 7202.989 ) \n              + rnorm(1, mean =  85684.058 , sd = 8371.359)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + \n                  tiempo_llegada,tiempo[length(tiempo)]+ \n                  tiempo_llegada) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n    Cramer_trayectoria[length(Cramer_trayectoria)] - \n      c*tiempo_llegada, \n    Cramer_trayectoria[length(Cramer_trayectoria)]- \n      c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n# 1.08*u es la ganancia inferior a la de un tasa de \n# un título financiero  para el año 2018\n  \n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < (1 + (14*0.08)/48)*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% \n                                  rename(Tiempo = tiempo,\n                                         Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_baja_ganancia_post_pandemia <- replicate(n_replicaciones,\n                          trayectoria_CLt_post_pandemia(u, c, \n                                         lambda_Nt, t_final)[2])\nr_baja_ganancia_post_pandemia \nprob_baja_ganancia_post_pandemia <- sum(r_baja_ganancia_post_pandemia >0)/\nn_replicaciones\nprob_baja_ganancia_post_pandemia\n```\n\n```{r, echo = FALSE, message=FALSE}\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo , media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) #Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  # 1.08*u es la ganancia inferior a la de un tasa de un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_baja_ganancia_post_pandemia <- replicate(n_replicaciones, trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[2])\n#r_baja_ganancia_post_pandemia \nprob_baja_ganancia_post_pandemia <- sum(r_baja_ganancia_post_pandemia >0)/n_replicaciones\n```\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align:justify\"}\nClaramente la probabilidad de las ganancias bajas de la evolución de $G(t)$ después de la pandemia sea $1$, pues como se muestra en la gráfica (@fig-trayectoria) #fig-trayectoriatodas las ventas registradas están por debajo del capital inicial\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align:justify\"}\nClaramente la probabilidad de las ganancias bajas de la evolución de $G(t)$ después de la pandemia sea $1$, pues como se muestra en la @fig-fig-trayectoria2pdf todas las ventas registradas están por debajo del capital inicial\n:::\n:::\n\n```{r, echo=FALSE}\nprob_baja_ganancia_post_pandemia\n```\n\nEl código para calcular la probabilidad de las ganancias finales bajas durante las $17$ semanas es el siguiente:\n\n```{r, echo = TRUE, message=FALSE}\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 17\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo ,\n#media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) \n#Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)+ \n              rnorm(1, mean =  39841.721 , sd= 7873.446) + \n              rnorm(1, mean =   41751.747, sd = 5687.030)+ \n              rnorm(1, mean =   43243.143, sd = 10517.841)+ \n              rnorm(1, mean = 43010.307  , sd = 7741.889)+ \n              rnorm(1, mean = 61191.300  , sd = 7202.989)+ \n              rnorm(1, mean =  85684.058 , sd = 8371.359 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)]+ \n                  tiempo_llegada,tiempo[length(tiempo)]+ \n                  tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                      Cramer_trayectoria[length(Cramer_trayectoria)]-\n                      c*tiempo_llegada, \n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                      c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n# 1.08*u es la ganancia inferior a la de un tasa de \n# un título financieropara el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02833*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                            rename(Tiempo = tiempo, \n                                            Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_baja_ganancia_post_pandemia <- replicate(n_replicaciones, \n          trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[2])\n#r_baja_ganancia_post_pandemia \nprob_baja_ganancia_post_pandemia <- sum(r_baja_ganancia_post_pandemia >0)/\nn_replicaciones\nprob_baja_ganancia_post_pandemia\n```\n\n::: {style=\"text-align:justify\"}\nEl código para calcular la probabilidad de ruina es el siguiente:\n:::\n\n```{r, eval = FALSE, message=FALSE}\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo , \n#media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) \n#Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)  +\n               rnorm(1, mean =  39841.721 , sd= 7873.446 ) + \n               rnorm(1, mean =   41751.747, sd = 5687.030) + \n               rnorm(1, mean =   43243.143, sd = 10517.841)+ \n               rnorm(1, mean = 43010.307  , sd = 7741.889 )+\n               rnorm(1, mean = 61191.300  , sd = 7202.989) +\n               rnorm(1, mean =  85684.058 , sd = 8371.359 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] +\n                  tiempo_llegada,tiempo[length(tiempo)] + \n                  tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                       Cramer_trayectoria[length(Cramer_trayectoria)]-\n                          c*tiempo_llegada, \n                       Cramer_trayectoria[length(Cramer_trayectoria)]-\n                         c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n# 1.08*u es la ganancia inferior a la de un tasa de \n# un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% \n                                  rename(Tiempo = tiempo, \n                                  Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_ruina_post_pandemia <- replicate(n_replicaciones,\n          trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])\n#r_ruina_post_pandemia\nprob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/\nn_replicaciones\nprob_ruin_post_pandemia\n\n```\n\n::: {style=\"text-align:justify\"}\nLo que significa que a pesar de que las ganancias sean todas menores al capital inicial, en todas la simulaciones, nunca se presenta una que sea menor que cero.\n:::\n\n```{r, echo = FALSE, message=FALSE}\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo , media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) #Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  # 1.08*u es la ganancia inferior a la de un tasa de un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% \n                                  rename(Tiempo = tiempo, \n                                         Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_ruina_post_pandemia <- replicate(n_replicaciones,\n        trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])\n#r_ruina_post_pandemia\nprob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/n_replicaciones\nprob_ruin_post_pandemia\n\n```\n\n::: {style=\"text-align:justify\"}\nEl código para calcular la probabilidad de ruina durante las $17$ semanas es el siguiente:\n:::\n\n```{r, echo = TRUE, message=FALSE}\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 17\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo , \n#media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) \n# Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)  + \n               rnorm(1, mean =  39841.721 , sd= 7873.446)  +  \n               rnorm(1, mean =   41751.747, sd = 5687.030) + \n               rnorm(1, mean =   43243.143, sd = 10517.841)+ \n               rnorm(1, mean = 43010.307  , sd = 7741.889) + \n               rnorm(1, mean =  85684.058 , sd = 8371.359)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + \n                  tiempo_llegada,tiempo[length(tiempo)] + \n                  tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                      Cramer_trayectoria[length(Cramer_trayectoria)]-\n                      c*tiempo_llegada, \n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                      c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n# 1.08*u es la ganancia inferior a la de \n# un tasa de un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02833*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% \n                                  rename(Tiempo = tiempo, \n                                         Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_ruina_post_pandemia <- replicate(n_replicaciones,\n                          trayectoria_CLt_post_pandemia(u, c, \n                                          lambda_Nt, t_final)[1])\n#r_ruina_post_pandemia\nprob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/\nn_replicaciones\nprob_ruin_post_pandemia\n\n```\n\n#### Análisis de sensibilidad\n\n::: {style=\"text-align:justify\"}\nModificando los parámetros $u$ y $c$ para erl periodo pso-pandemia del modelo modificado y estableciendo los rangos o valores posibles para cada uno de los ciertos parámetros, se presenta el análisis de sensibilidad durante las semanas registradas después de la pandemia que fueron $14$,. Se toman la mediana de las $100$ simulaciones de la ganancia final de la semana obtenida por el modelo, es decir la venta registrada en la última semana de los datos registrados.\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo = TRUE, message=FALSE}\n\nlibrary(dplyr) # librería para poder renombrar \n# las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c = 0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) + \n              rnorm(1, mean =  39841.721 , sd= 7873.446)  +  \n              rnorm(1, mean =   41751.747, sd = 5687.030) + \n              rnorm(1, mean =   43243.143, sd = 10517.841)+ \n              rnorm(1, mean = 43010.307  , sd = 7741.889) + \n              rnorm(1, mean = 61191.300  , sd = 7202.989) + \n              rnorm(1, mean =  85684.058 , sd = 8371.359)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] \n                + tiempo_llegada,tiempo[length(tiempo)] \n                + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                        c*tiempo_llegada, \n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                       c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n    {\n      ruina = 1\n    }\n    else\n    {\n      ruina = 0\n    }\n  }\n  df_post_pandemia<- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                  rename(Tiempo = tiempo, \n                                         Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia$Ct[length\n                                (df_trayectoria_post_pandemia$Ct)])\n}\n\n# La función generador_mediana nos calcula la mediana de \n# las ganancias finales de 100 trayectorias, \n# fijando el u= surplus y el c\ngenerador_mediana_post_pandemia<- function(ui,cj)\n  {\n  ganancia_final_replicas_post_pandemia <- replicate(100,\n           trayectoria_CLt_post_pandemia(u, c,lambda_Nt, t_final))\n    return( median(ganancia_final_replicas_post_pandemia))\n  }\n# Se crea la rejilla donde se hace el analisis de sensibilidad\n# para diferentes valores de u y c\ngrid_u_post_pandemia <- seq(from = (u-100000*4), \n                            to = (u+100000*4), \n                            by = 100000)\ngrid_c_post_pandemia <- seq(from = (decimal_c-0.01*4), \n                            to = (decimal_c+0.01*4), \n                            by = 0.01)\nu_t <- grid_u_post_pandemia\nmatriz_mediana_post_pandemia <- matrix(rep(0, \n      length(grid_u_post_pandemia)*length(grid_c_post_pandemia)),\n      nrow= length(grid_u_post_pandemia), \n      ncol= length(grid_c_post_pandemia))\n\nG_t <- matriz_mediana_post_pandemia\n\nfor (i in 1:length(u_t)) \n{\n  for (j in 1:length(grid_c_post_pandemia)) \n  {\n    G_t[i,j] <- generador_mediana_post_pandemia(u_t[i], \n                                  grid_c_post_pandemia[j]*u_t[i])\n  }\n} \n# matriz_mediana_post_pandemia  \n# Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- u_t*grid_c_post_pandemia\nfig2 <- plot_ly(\n  type = 'surface',\n  contours = list(x = list(show = TRUE, start = u_t[1], \n                  end = grid_u_post_pandemia[length(u_t)], \n                  size =100000 , color = 'black'),\n                  z = list(show = TRUE, start = G_t[1], \n                  end = G_t[length(G_t)], \n                  size = 0.01*100000)),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\nfig2 <- fig2 %>% layout(\n    scene = list(\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 4),\n    camera = list(eye = list(x = 0, \n                             y = -1, \n                             z = 1)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\nfig2\n\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval = FALSE, message=FALSE}\n\nlibrary(dplyr) # libreria para poder renombrar \n# las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) + \n              rnorm(1, mean =  39841.721 , sd= 7873.446)  +  \n              rnorm(1, mean =   41751.747, sd = 5687.030) + \n              rnorm(1, mean =   43243.143, sd = 10517.841)+ \n              rnorm(1, mean = 43010.307  , sd = 7741.889) + \n              rnorm(1, mean = 61191.300  , sd = 7202.989) + \n              rnorm(1, mean =  85684.058 , sd = 8371.359)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] \n                + tiempo_llegada,tiempo[length(tiempo)] \n                + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                        c*tiempo_llegada, \n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                       c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n    {\n      ruina = 1\n    }\n    else\n    {\n      ruina = 0\n    }\n  }\n  df_post_pandemia<- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                  rename(Tiempo = tiempo, \n                                         Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia$Ct[length\n                                (df_trayectoria_post_pandemia$Ct)])\n}\n\n# La función generador_mediana nos calcula la mediana de \n# las ganancias finales de 100 trayectorias, \n# fijando el u= surplus y el c\ngenerador_mediana_post_pandemia<- function(ui,cj)\n  {\n  ganancia_final_replicas_post_pandemia <- replicate(100,\n           trayectoria_CLt_post_pandemia(u, c,lambda_Nt, t_final))\n    return( median(ganancia_final_replicas_post_pandemia))\n  }\n# Se crea la rejilla donde se hace el analisis de sensibilidad\n# para diferentes valores de u y c\ngrid_u_post_pandemia <- seq(from = (u-100000*4), \n                            to = (u+100000*4), \n                            by = 100000)\ngrid_c_post_pandemia <- seq(from = (decimal_c-0.01*4), \n                            to = (decimal_c+0.01*4), \n                            by = 0.01)\nu_t <- grid_u_post_pandemia\nmatriz_mediana_post_pandemia <- matrix(rep(0, \n      length(grid_u_post_pandemia)*length(grid_c_post_pandemia)),\n      nrow= length(grid_u_post_pandemia), \n      ncol= length(grid_c_post_pandemia))\n\nG_t <- matriz_mediana_post_pandemia\n\nfor (i in 1:length(u_t)) \n{\n  for (j in 1:length(grid_c_post_pandemia)) \n  {\n    G_t[i,j] <- generador_mediana_post_pandemia(u_t[i], \n                                  grid_c_post_pandemia[j]*u_t[i])\n  }\n}  \n# matriz_mediana_post_pandemia  \n# Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- u_t*grid_c_post_pandemia\nfig2 <- plot_ly(\n  type = 'surface',\n  contours = list(x = list(show = TRUE, start = u_t[1], \n                  end = grid_u_post_pandemia[length(u_t)], \n                  size =100000 , color = 'black'),\n                  z = list(show = TRUE, start = G_t[1], \n                  end = G_t[length(G_t)], \n                  size = 0.01*100000)),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\nfig2 <- fig2 %>% layout(\n    scene = list(\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 4),\n    camera = list(eye = list(x = 0, \n                             y = -1, \n                             z = 1)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\nfig2\n\n\n```\n:::\n\n![](fig-analisis2pdf.png){fig-align=\"center\" width=\"600\"}\n\n::: {style=\"text-align:justify\"}\nSe presenta también el análisis de sensibilidad para $t = 19$, debido a que en $19$ semanas se presenta el caso donde se pueden registrar ventas por debajo del cero, es decir, casos donde $G(t)\\leq0$.\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo=TRUE, message=FALSE, warning=FALSE}\n\n\nlibrary(dplyr) # libreria para poder \n# renombrar las cabeceras de los dataframes\n\n# Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n# Es un estimado a partir de la media de las ganancias por semana, \n# multiplicado por 10/3, \n# siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 19\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n# donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n# CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n# Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) + \n              rnorm(1, mean =  39841.721 , sd= 7873.446)  +  \n              rnorm(1, mean =   41751.747, sd = 5687.030) + \n              rnorm(1, mean =   43243.143, sd = 10517.841)+ \n              rnorm(1, mean = 43010.307  , sd = 7741.889) + \n              rnorm(1, mean = 61191.300  , sd = 7202.989) + \n              rnorm(1, mean =  85684.058 , sd = 8371.359)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] \n                + tiempo_llegada,tiempo[length(tiempo)] \n                + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                        c*tiempo_llegada, \n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                       c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n    {\n      ruina = 1\n    }\n    else\n    {\n      ruina = 0\n    }\n  }\n  df_post_pandemia<- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                  rename(Tiempo = tiempo, \n                                         Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia$Ct[length\n                                (df_trayectoria_post_pandemia$Ct)])\n}\n\n# La función generador_mediana nos calcula la mediana de \n# las ganancias finales de 100 trayectorias, \n# fijando el u= surplus y el c\ngenerador_mediana_post_pandemia<- function(ui,cj)\n  {\n  ganancia_final_replicas_post_pandemia <- replicate(100,\n           trayectoria_CLt_post_pandemia(u, c,lambda_Nt, t_final))\n    return( median(ganancia_final_replicas_post_pandemia))\n  }\n# Se crea la rejilla donde se hace el analisis de sensibilidad\n# para diferentes valores de u y c\ngrid_u_post_pandemia <- seq(from = (u-100000*4), \n                            to = (u+100000*4), \n                            by = 100000)\ngrid_c_post_pandemia <- seq(from = (decimal_c-0.01*4), \n                            to = (decimal_c+0.01*4), \n                            by = 0.01)\nu_t <- grid_u_post_pandemia\nmatriz_mediana_post_pandemia <- matrix(rep(0, \n      length(grid_u_post_pandemia)*length(grid_c_post_pandemia)),\n      nrow= length(grid_u_post_pandemia), \n      ncol= length(grid_c_post_pandemia))\n\nG_t <- matriz_mediana_post_pandemia\n\nfor (i in 1:length(u_t)) \n{\n  for (j in 1:length(grid_c_post_pandemia)) \n  {\n    G_t[i,j] <- generador_mediana_post_pandemia(u_t[i], \n                                  grid_c_post_pandemia[j]*u_t[i])\n  }\n} \n\n#Grafica del ánalisis de sensibilidad\n#Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- grid_u_post_pandemia*grid_c_post_pandemia\n\nz1<- matrix(rep(0,\nlength(grid_u_post_pandemia)*length(grid_c_post_pandemia)), nrow=\nlength(grid_u_post_pandemia), ncol= length(grid_c_post_pandemia))\n\nz2<- matrix(rep(u,\nlength(grid_u_post_pandemia)*length(grid_c_post_pandemia)), nrow=\nlength(grid_u_post_pandemia), ncol= length(grid_c_post_pandemia))\n\nfig3 <- plot_ly(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], end =\nu_t[length(u_t)], size =100000 ,\ncolor = 'black'),\n    z = list(show = TRUE, start = G_t[1], \n             end = G_t[length(G_t)], size =0.01*100000 , \n             color = 'white')),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\n\nfig3 <- fig3%>% add_surface(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], \n             end = u_t[length(u_t)], size =100000 ,\n             color = 'black'),\n    y = list(show = TRUE, start = c_t[1], \n             end = c_t[length(c_t)], \n             size = 0.01*100000 , color = 'red')),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~z1)\n\nfig3 <- fig3 %>% layout(\n  scene = list(\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 4),\n    camera = list(eye = list(x = 0, y = -1, z = 1)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\n\nfig3\n\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n\n\nlibrary(dplyr) # libreria para poder \n# renombrar las cabeceras de los dataframes\n\n# Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n# Es un estimado a partir de la media de las ganancias por semana, \n# multiplicado por 10/3, \n# siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 19\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n# donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n# CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n# Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) + \n              rnorm(1, mean =  39841.721 , sd= 7873.446)  +  \n              rnorm(1, mean =   41751.747, sd = 5687.030) + \n              rnorm(1, mean =   43243.143, sd = 10517.841)+ \n              rnorm(1, mean = 43010.307  , sd = 7741.889) + \n              rnorm(1, mean = 61191.300  , sd = 7202.989) + \n              rnorm(1, mean =  85684.058 , sd = 8371.359)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] \n                + tiempo_llegada,tiempo[length(tiempo)] \n                + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                        c*tiempo_llegada, \n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                       c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n    {\n      ruina = 1\n    }\n    else\n    {\n      ruina = 0\n    }\n  }\n  df_post_pandemia<- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                  rename(Tiempo = tiempo, \n                                         Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia$Ct[length\n                                (df_trayectoria_post_pandemia$Ct)])\n}\n\n# La función generador_mediana nos calcula la mediana de \n# las ganancias finales de 100 trayectorias, \n# fijando el u= surplus y el c\ngenerador_mediana_post_pandemia<- function(ui,cj)\n  {\n  ganancia_final_replicas_post_pandemia <- replicate(100,\n           trayectoria_CLt_post_pandemia(u, c,lambda_Nt, t_final))\n    return( median(ganancia_final_replicas_post_pandemia))\n  }\n# Se crea la rejilla donde se hace el analisis de sensibilidad\n# para diferentes valores de u y c\ngrid_u_post_pandemia <- seq(from = (u-100000*4), \n                            to = (u+100000*4), \n                            by = 100000)\ngrid_c_post_pandemia <- seq(from = (decimal_c-0.01*4), \n                            to = (decimal_c+0.01*4), \n                            by = 0.01)\nu_t <- grid_u_post_pandemia\nmatriz_mediana_post_pandemia <- matrix(rep(0, \n      length(grid_u_post_pandemia)*length(grid_c_post_pandemia)),\n      nrow= length(grid_u_post_pandemia), \n      ncol= length(grid_c_post_pandemia))\n\nG_t <- matriz_mediana_post_pandemia\n\nfor (i in 1:length(u_t)) \n{\n  for (j in 1:length(grid_c_post_pandemia)) \n  {\n    G_t[i,j] <- generador_mediana_post_pandemia(u_t[i], \n                                  grid_c_post_pandemia[j]*u_t[i])\n  }\n} \n\n#Grafica del ánalisis de sensibilidad\n#Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- grid_u_post_pandemia*grid_c_post_pandemia\n\nz1<- matrix(rep(0,\nlength(grid_u_post_pandemia)*length(grid_c_post_pandemia)), nrow=\nlength(grid_u_post_pandemia), ncol= length(grid_c_post_pandemia))\n\nz2<- matrix(rep(u,\nlength(grid_u_post_pandemia)*length(grid_c_post_pandemia)), nrow=\nlength(grid_u_post_pandemia), ncol= length(grid_c_post_pandemia))\n\nfig3 <- plot_ly(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], end =\nu_t[length(u_t)], size =100000 ,\ncolor = 'black'),\n    z = list(show = TRUE, start = G_t[1], \n             end = G_t[length(G_t)], size =0.01*100000 , \n             color = 'white')),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\n\nfig3 <- fig3%>% add_surface(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], \n             end = u_t[length(u_t)], size =100000 ,\n             color = 'black'),\n    y = list(show = TRUE, start = c_t[1], \n             end = c_t[length(c_t)], \n             size = 0.01*100000 , color = 'red')),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~z1)\n\nfig3 <- fig3 %>% layout(\n  scene = list(\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 4),\n    camera = list(eye = list(x = 0, y = -1, z = 1)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\n\nfig3\n\n```\n\n![](fig-analisis3pdf.png){fig-align=\"center\" width=\"600\"}\n:::\n\n## Análisis de resultados y recomendaciones.\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align:justify\"}\nCon los datos registrados de $90$ semanas antes de pandemia en el modelo modificado (@eq-4.1) se obtiene un crecimiento positivo de las ganancias simuladas, en particular mayor que el capital inicial, es decir la probabilidad del evento donde $G(t)\\geq u$ es positiva, con $t=90$, como se puede observar en la imagen (@fig-trayectoria), por lo que en el intervalo de tiempo en el que se estudia la empresa generaría siempre ganancias positivas y se lograría suplir la deuda e incluso pensar en implementar más equipos inmobiliarios.\n\nMientras que después de la pandemia, se puede argumentar con base en las observaciones de las $14$ semanas de las ventas registradas, usando los mismos parámetros obtenidos para los datos antes de la pandemia implementados, las ganancias son bajas como se muestra en la imagen (@fig-trayectoria2). Aquí se observa que la simulación de las ganancias son menores que el capital inicial y al dar seguimiento en el intervalo de tiempo con los datos registrados después de pandemiahasta la semana $17$ se observa que las ganancias son menores que cero, por lo que se puede concluir que se llega a una ruina total, como se muestra el caso en la imagen (@fig-trayectoria3).\n\nAnalizando el caso en el que se modificara los parámetros de los costos del modelo (@eq-4.1), se concluye que al calibrar el parámetro $c$, este se puede reducir a un $17 \\%$ para cuando $t=14$, es decir, al final de la semana $14$ puede evitarse la perdida total de las ganancias que son mayores que el capital inicial, como se observa en la figura (@fig-trayectoria4).\n\nComo $c$, es el parámetro de los pagos que incluye el pago por la adquisición de la franquicia, compras de equipos inmobiliarios, pagos de empleados y prestamos, el anterior análisis quiere decir que se necesita un recorte de personal del $17 \\%$ como mínimo y una reestructuración financiera del capital pendiente por pagar, haciendo los pagos más pequeños a un tiempo extendido, con el fin de la funcionalidad del negocio durante este proceso pandemico y evitar el cierre de quiebra.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align:justify\"}\nCon los datos registrados de $90$ semanas antes de pandemia en el modelo modificado (@eq-4.1pdf) se obtiene un crecimiento positivo de las ganancias simuladas, en particular mayor que el capital inicial, es decir la probabilidad del evento donde $G(t)\\geq u$ es positiva, con $t=90$, como se puede observar en la imagen (@fig-fig-trayectoriapdf), por lo que en el intervalo de tiempo en el que se estudia la empresa generaría siempre ganancias positivas y se lograría suplir la deuda e incluso pensar en implementar más equipos inmobiliarios.\n\nMientras que después de la pandemia, se puede argumentar con base en las observaciones de las $14$ semanas de las ventas registradas, usando los mismos parámetros obtenidos para los datos antes de la pandemia implementados, las ganancias son bajas como se muestra en la imagen (@fig-fig-trayectoria2pdf). Aquí se observa que la simulación de las ganancias son menores que el capital inicial y al dar seguimiento en el intervalo de tiempo con los datos registrados después de pandemia hasta la semana $17$ se observa que las ganancias son menores que cero, por lo que se puede concluir que se llega a una ruina total, como se muestra el caso en la imagen (@fig-fig-trayectoria3pdf).\n\nAnalizando el caso en el que se modifica los parámetros de los costos del modelo (@eq-4.1pdf) , se concluye que al calibrar el parámetro $c$, este se puede reducir a un $17 \\%$ para cuando $t=14$, es decir, al final de la semana $14$ puede evitarse la perdida total de las ganancias que son mayores que el capital inicial, como se observa en la figura (@fig-fig-trayectoria4pdf).\n\nComo $c$, es el parámetro de los pagos que incluye el pago de la adquisición de la franquicia, compras de equipos inmobiliarios, pagos de empleados y prestamos, el anterior análisis quiere decir que se necesita un recorte de personal del $17 \\%$ como mínimo y una reestructuración financiera del capital pendiente por pagar, haciendo los pagos más pequeños a un tiempo extendido, con el fin de la funcionalidad del negocio durante este proceso pandemico y evitar el cierre de quiebra.\n:::\n:::\n","srcMarkdownNoYaml":"\n\n# Estudio de caso: Análisis de ventas de una empresa de comida rápida\n\n## Descripción del problema\n\n::: {style=\"text-align:justify\"}\nSe presentan datos que son parte de las ventas de una empresa de comida rápida. Para brindar una mejor idea del estudio caso se presentará una extensión de lo que es una empresa de comida rápida y una franquicia .\n\nUna empresa de comida rápida es un tipo de negocio dentro del sector alimenticio que se especializa en la preparación y venta de alimentos y bebidas que pueden ser servidos y consumidos rápidamente. Estas empresas suelen ofrecer menús estandarizados y utilizan métodos de producción en masa para asegurar la rapidez y la eficiencia en el servicio. Algunas características típicas de una empresa de comida rápida incluyen:\n\n1-Rapidez en el Servicio: La principal característica es la rapidez con la que los clientes pueden recibir sus pedidos, generalmente en pocos minutos.\n\n2-Menú Limitado y Estandarizado: Los menús suelen ser simples y consistentes en todas las ubicaciones de la cadena, permitiendo una preparación rápida y eficiente.\n\n3-Precios Asequibles: Los precios suelen ser más bajos en comparación con los restaurantes tradicionales, lo que los hace accesibles a una amplia gama de clientes.\n\n4-Métodos de Preparación Eficientes: Utilizan técnicas de cocción rápida, como freidoras y parrillas de alta eficiencia, así como la pre-preparación de ingredientes.\n\n5-Autoservicio y Comida para Llevar: Muchas de estas empresas ofrecen opciones de autoservicio y comida para llevar, facilitando el consumo rápido y conveniente.\n\n6-Ambiente Informal: El ambiente es generalmente informal y está diseñado para facilitar el flujo rápido de clientes, con áreas de autoservicio y estaciones de recolección de pedidos.\n\nEjemplos de empresas de comida rápida incluyen grandes cadenas internacionales como McDonald's, Burger King, KFC, Subway, Carl's Jr y Taco Bell. Estas empresas han expandido su presencia globalmente, adaptándose a diferentes mercados y culturas mientras mantienen su enfoque en la rapidez y eficiencia del servicio.\n\nMuchas de estas empresas otorga parte del derecho a operar en diferentes franquicias.\n\nUna franquicia es un modelo de negocio en el cual una empresa (el franquiciador) otorga a otra parte (el franquiciado) el derecho a operar un negocio utilizando su marca, productos, servicios y modelo operativo a cambio de una tarifa o regalías. Este modelo permite a los franquiciadores expandir su marca y presencia en el mercado sin tener que invertir en nuevas ubicaciones directamente. Al mismo tiempo, ofrece a los franquiciados la oportunidad de operar un negocio con una marca establecida y un sistema probado. Algunas características clave de una franquicia incluyen:\n\n1-Marca y Sistema Operativo: El franquiciado utiliza la marca comercial, logotipos, productos y servicios del franquiciador, así como su sistema operativo, que puede incluir recetas, métodos de producción, estrategias de marketing, entre otros.\n\n2-Pago de Tarifas: El franquiciado paga al franquiciador una tarifa inicial y, en muchos casos, regalías continuas basadas en un porcentaje de las ventas. Estas tarifas cubren el uso de la marca y el soporte continuo del franquiciador.\n\n3-Capacitación y Soporte: El franquiciador proporciona capacitación inicial y soporte continuo al franquiciado, lo cual puede incluir formación en gestión empresarial, operaciones, marketing y servicio al cliente.\n\n4-Estándares y Control de Calidad: Para mantener la consistencia y calidad de la marca, el franquiciador establece estándares y procedimientos que los franquiciados deben seguir. Esto puede incluir auditorias y evaluaciones periódicas.\n\n5-Contrato de Franquicia: La relación entre el franquiciador y el franquiciado está regulada por un contrato de franquicia que detalla los derechos y obligaciones de ambas partes, incluyendo la duración del acuerdo y las condiciones de renovación.\n\n6-Territorio Exclusivo: A menudo, el contrato otorga al franquiciado un territorio exclusivo en el cual puede operar, evitando la competencia directa con otras franquicias de la misma marca en esa área.\n\nEjemplos de negocios que utilizan el modelo de franquicia incluyen cadenas de comida rápida (como McDonald's, Subway y KFC), Carl's Jr, hoteles (como Marriott y Hilton), servicios de limpieza, tiendas de conveniencia y muchos otros sectores. Este modelo permite una expansión rápida y eficiente del negocio mientras ofrece a los emprendedores la oportunidad de operar con el respaldo de una marca establecida.\n\nEsta empresa ofrece en sus productos dos tipos de hamburguesas, bebidas como sodas, cervezas y cafés. En la información de las ventas incluye registros obtenidos por una Terminal Punto de Venta (TPV), el sistema de pago usado en establecimientos comerciales para procesar transacciones de venta. Permite a los comerciantes aceptar el uso de tarjetas de crédito y débito. Se tiene registro de las ventas por cada día desde el año 2018 al noviembre del 2020, haciendo un cierre pandémico, se registran en dos etapas, antes de pandemia los datos a partir del 25 de julio del 2018 al 10 de abril del 2020. Los datos después de pandemia se registraron a partir del 3 de agosto del 2020 y cerrando finalmente el 10 de noviembre del 2020, los cuales se les aplicó una homogenización para un buen manejo de los datos y así poder presentar un mejor análisis.\n:::\n\n## Elementos de Ciencia de Datos\n\n### Importación de los datos originales a R\n\n::: {style=\"text-align:justify\"}\nSe cargan los datos del archivo excel para ser leído y almacenarlo en un dataframe (@sec-dataframe) para poder manipular cada uno de los elementos de la base de datos.\n\n```{r,  echo = FALSE, message=FALSE,  warning = FALSE}\nlibrary(readxl)\nlibrary(readr)\nlibrary(tseries)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(psych)\nlibrary(plotly)\nlibrary(ruin)\nlibrary(MASS)\nlibrary(fitdistrplus)\nlibrary(logspline)\nlibrary(vegan)\nlibrary(ggplot2)\nlibrary(dtplyr)\n# instalar DT con: remotes::install_github('rstudio/DT')\nlibrary(DT)#Para poner el dataframe en ventana\n```\n\n```{r, message=FALSE, warning = FALSE}\nDatos <- read_excel(\"~/TM/Datos.xlsx\", col_types = \n                  c(\"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\",\n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\",\n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\", \n                    \"numeric\",\"numeric\",\"numeric\",\"numeric\",\"numeric\"\n                        ))\n\nDatos\n```\n\nComo se puede apreciar, es necesario eliminar columnas, reducido a las columnas de las ventas de los diferentes productos que oferta la empresa para así obtener las ventas totales.\n:::\n\n### Homogenización del total de ventas por día\n\n::: {style=\"text-align:justify\"}\nMediante este proceso se eliminan y se corrigen valores atípicos, valores faltantes o alguna inconsistencia que se presentan en los datos. Esto implica la eliminación de datos incompletos, conocidos como datos faltantes o NA. También se renombran cabeceras de cada columna del dataframe para facilitar la lectura del archivo.\n\n```{r, warning = FALSE}\n#Eliminamos las columnas con datos faltantes\ndatos <- Datos[, -c(6,8,10,12,14,16,18,20,22,24, 26,28, 30,32, 34, 36,\n                    38,39, 40,  42, 44, 46, 48, 50,51,52, 53, 54,55, 56, \n57,58,59,60,61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73,74,72, 75)]\n#Cambiar las cabeceras del dataframe  \ndatos <- data.frame(datos%>% rename(Año = ...1 ))\ndatos <- data.frame(datos%>% rename(Mes = ...2, Semana = ...3, Dia= ...4, \n                  Fecha = ...5, Ventas= X240519, \n                  TotalVentas = X247172.9,Customers = X973,\n                  Totalcustomers = X1136, \n                  CH_Promedio = X371.753114754098, \n                  TotalCH_Promedio = ...17, Burgers = X2099,\n                  TotalBurgers = X2162, \n                  Thickurgers = X1384...23, \n                  TotalThickburgers = X1384...25,\n                  Total_Burgers = X2402, \n                  T_Total_Burgers= X2525,Bebidas = X1556...31,\n                  Totalbebidas = X1556...33, Cervezas = X61,\n                  Totalcervezas = X83, Cafes = X83,\n                  Totalcafes = X54, Ventas_TPV = X158904,\n                  Total_Ventas_TPV = X173412.5,\n                  HR_Laborales = ...47,\n                  Total_HR_Laborales = ...49 ))\n```\n\nPor último, se realizó la separación de la base de datos antes de la pandemia y después de la pandemia, presentando así los dataframes resultantes en el siguiente código y como se ilustra posteriormente:\n\n```{r, eval= FALSE, message=FALSE}\n#Analisis de los datos:\n#Filtros por días:\n#___________________________Antes de la pandemia___________________________\n\nfil_before1<- data.frame(subset(datos, Año <= 2019))\nfil_before2<- data.frame(subset(datos, Año == 2020 & Mes <= 4))\nfil_before <- rbind(fil_before1, fil_before2)\n\n#________________________Después de la pandemia____________________________\n\nfil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8))\n```\n:::\n\n### DataFrame Resultante: Antes de la pandemia\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo = FALSE, attr.output='style=\"max-height: 100px;\"'}\n\n#\n#Poner un apartado donde explique que es la visualización de los datos \n#Elimina las filas con datos faltantes\n#datos <- data.frame( datos %>% filter(!is.na(Año)))\n#DATAFRAME RESULTANTE:\n#_________________________________Antes de la pandemia____________________________\nfil_before1<- data.frame(subset(datos, Año <= 2019))\nfil_before2<- data.frame(subset(datos, Año == 2020 & Mes <= 4))\nfil_before <- rbind(fil_before1, fil_before2)\nDT::datatable(fil_before)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo = FALSE, attr.output='style=\"max-height: 200px;\"'}\n\n#\n#Poner un apartado donde explique que es la visualización de los datos \n#Elimina las filas con datos faltantes\n#datos <- data.frame( datos %>% filter(!is.na(Año)))\n#DATAFRAME RESULTANTE:\n#_________________________________Antes de la pandemia____________________________\nfil_before1_new<- data.frame(subset(datos, Año < 2019 & Mes <= 8))\n#fil_before_new <- fil_before %>%select(Año, Mes, Dia, Ventas)\nfil_before_new <- subset(fil_before1_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))\n\nfil_before_new\n```\n:::\n\n### DataFrame Resultante: Después de la pandemia\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo = FALSE}\n#________________________Después de la pandemia__________________________________\n\n\nfil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8))\nDT::datatable(fil_dat_after)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo = FALSE}\n#________________________Después de la pandemia__________________________________\n\n\nfil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes>=8 & Mes<9))\nfil_after_new <- subset(fil_dat_after_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))\nfil_after_new\n\n```\n:::\n\n::: {style=\"text-align:justify\"}\nPara realizar la identificación de las diferentes distribuciones e implementar los gráficos como los histogramas y los boxplot, se elaboran filtros correspondientes para las ventas por cada día antes y después de pandemia\n\nLos comandos para realizar los filtros es el siguiente:\n:::\n\n```{r, echo = TRUE, message=FALSE}\n#filtra los datos del día Domingo antes de la pandemia\nfil_dat_1_before<- data.frame(subset(fil_before, Dia == 1))\n#___________________________________________________________\n#filtra los datos del día Lunes antes de la pandemia\nfil_dat_2_before<- data.frame(subset(fil_before, Dia == 2))\n#___________________________________________________________\n#filtra los datos del día martes antes de la pandemia\nfil_dat_3_before<- data.frame(subset(fil_before, Dia == 3))\n#___________________________________________________________\n#filtra los datos del día miércoles antes de la pandemia\nfil_dat_4_before<- data.frame(subset(fil_before, Dia == 4))\n#___________________________________________________________\n#filtra los datos del día Jueves antes de la pandemia\nfil_dat_5_before<- data.frame(subset(fil_before, Dia == 5))\n#___________________________________________________________\n#filtra los datos del día Viernes antes de la pandemia\nfil_dat_6_before<- data.frame(subset(fil_before, Dia == 6))\n#___________________________________________________________\n#filtra los datos del día Sábado antes de la pandemia\nfil_dat_7_before<- data.frame(subset(fil_before, Dia == 7))\n```\n\n```{r, echo = TRUE, message=FALSE}\n#____________________________________________________________________\nfil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8))\n#filtra los datos del día domingo despues de la pandemia\nfil_dat_1_after<- data.frame(subset(datos, \n                                    Año == 2020 & Mes >= 8 & Dia==1))\n#____________________________________________________________________\n#filtra los datos del día lunes despues de la pandemia\nfil_dat_2_after<- data.frame(subset(datos,\n                                    Año == 2020 & Mes >= 8 & Dia ==2))\n#____________________________________________________________________\n#filtra los datos del día martes despues de la pandemia\nfil_dat_3_after<- data.frame(subset(datos,\n                                    Año == 2020 & Mes >= 8 & Dia ==3))\n#____________________________________________________________________\n#filtra los datos del día miércoles despues de la pandemia\nfil_dat_4_after<- data.frame(subset(datos,\n                                    Año == 2020 & Mes >= 8 & Dia ==4))\n#____________________________________________________________________\n#filtra los datos del día jueves despues de la pandemia\nfil_dat_5_after<- data.frame(subset(datos,\n                                    Año == 2020 & Mes >= 8 & Dia ==5))\n#____________________________________________________________________\n#filtra los datos del día viernes despues de la pandemia\nfil_dat_6_after<- data.frame(subset(datos,\n                                    Año == 2020 & Mes >= 8 & Dia ==6))\n#____________________________________________________________________\n#filtra los datos del día sábado despues de la pandemia\nfil_dat_7_after<- data.frame(subset(datos,\n                                    Año == 2020 & Mes >= 8 & Dia ==7))\n\n```\n\n::: {style=\"text-align:justify\"}\nPara visualizar gráficamente el comportamiento de las ventas por día, a continuación se construyen los histogramas por día, en los periodos antes y después de la pandemia.\n:::\n\n### Análisis gráfico de las ventas por día:\n\n::: {style=\"text-align:justify\"}\nPara la generación de los gráficos se empleó los filtros anteriores, con el fin de obtener un análisis descriptivo de cada uno de ellos.\n:::\n\n#### Histogramas de los datos de ventas por día antes de la pandemia\n\n::: {style=\"text-align:justify\"}\nEl código que genera estos histogramas en R es el siguiente:\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval=FALSE}\n# muestra el gráfico de todos los histogramas de ventas por día \n# antes de la pandemia\npar(mar=c(2,2,2,2))\npar(mfrow =c(3,3))\nhist(fil_dat_1_before$Ventas, \n     main = \"Ventas día Domingo\", xlab = \"Ventas\")\nhist(fil_dat_2_before$Ventas, \n     main = \"Ventas día Lunes\", xlab = \"Ventas\")\nhist(fil_dat_3_before$Ventas,\n     main = \"Ventas día Martes\", xlab = \"Ventas\")\nhist(fil_dat_4_before$Ventas, \n     main = \"Ventas día Miércoles\", xlab = \"Ventas\")\nhist(fil_dat_5_before$Ventas, \n     main = \"Ventas día Jueves\", xlab = \"Ventas\")\nhist(fil_dat_6_before$Ventas, \n     main = \"Ventas día Viernes\", xlab = \"Ventas\")\nhist(fil_dat_7_before$Ventas, \n     main = \"Ventas día Sábado\", xlab = \"Ventas\")\n```\n\n![Histogramas de las ventas por día antes de la pandemia.](his_1.png){fig-align=\"center\" width=\"80%\"}\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-his1}\n```{r}\n# muestra el gráfico de todos los histogramas de ventas por día antes de la pandemia\npar(mar=c(2,2,2,2))\npar(mfrow =c(3,3))\nhist(fil_dat_1_before$Ventas, main = \"Ventas día Domingo\", xlab = \"Ventas\")\nhist(fil_dat_2_before$Ventas, main = \"Ventas día Lunes\", xlab = \"Ventas\")\nhist(fil_dat_3_before$Ventas, main = \"Ventas día Martes\", xlab = \"Ventas\")\nhist(fil_dat_4_before$Ventas, main = \"Ventas día Miércoles\", xlab = \"Ventas\")\nhist(fil_dat_5_before$Ventas, main = \"Ventas día Jueves\", xlab = \"Ventas\")\nhist(fil_dat_6_before$Ventas, main = \"Ventas día Viernes\", xlab = \"Ventas\")\nhist(fil_dat_7_before$Ventas, main = \"Ventas día Sábado\", xlab = \"Ventas\")\n```\n\nHistogramas de las ventas por día antes de la pandemia.\n:::\n:::\n\n::: {style=\"text-align:justify\"}\nPara profundizar en el análisis descriptivo de las ventas periódicas se presenta ahora los boxplot de las ventas por cada día de la semana.\n:::\n\n#### Boxplot de datos de ventas por días antes de la pandemia\n\n```{r, echo= FALSE}\nsummary(fil_dat_1_before$Ventas)\nsummary(fil_dat_2_before$Ventas)\nsummary(fil_dat_3_before$Ventas)\nsummary(fil_dat_4_before$Ventas)\nsummary(fil_dat_5_before$Ventas)\nsummary(fil_dat_6_before$Ventas)\nsummary(fil_dat_7_before$Ventas)\n\n```\n\n::: {style=\"text-align:justify\"}\nEl código que genera en R los boxplot es el siguiente:\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-box1}\n```{r, echo=TRUE}\n# muestra el gráfico de todos los boxplot de ventas por día antes de la pandemia \nfig <- plot_ly(y =fil_dat_1_before$Ventas, name = \"Ventas día Domingo\", \n               boxpoints = \"all\",type = \"box\", )\nfig <- fig %>% add_trace(y = fil_dat_2_before$Ventas,  \n                         name = \"Ventas día Lunes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_3_before$Ventas,  \n                         name = \"Ventas día Martes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_4_before$Ventas,  \n                         name = \"Ventas día Miércoles\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_5_before$Ventas,  \n                         name = \"Ventas día Jueves\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_6_before$Ventas,  \n                         name = \"Ventas día Viernes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_7_before$Ventas,  \n                         name = \"Ventas día Sábado\", boxpoints = \"all\")\n\nfig\n\n```\n\nBoxplot de las ventas por día antes de la pandemia.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval=FALSE, out.width=\"40%\"}\n# muestra el gráfico de todos los boxplot de ventas por día \n# antes de la pandemia \nfig <- plot_ly(y =fil_dat_1_before$Ventas, name = \"Ventas día Domingo\", \n               boxpoints = \"all\",type = \"box\", )\nfig <- fig %>% add_trace(y = fil_dat_2_before$Ventas,  \n                         name = \"Ventas día Lunes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_3_before$Ventas,  \n                         name = \"Ventas día Martes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_4_before$Ventas,  \n                         name = \"Ventas día Miércoles\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_5_before$Ventas,  \n                         name = \"Ventas día Jueves\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_6_before$Ventas,  \n                         name = \"Ventas día Viernes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_7_before$Ventas,  \n                         name = \"Ventas día Sábado\", boxpoints = \"all\")\n\nfig\n```\n\n![Boxplot de las ventas por día antes de la pandemia.](fig-box1pdf.png)\n:::\n\n#### Histogramas de los datos de ventas por día después de la pandemia\n\n::: {style=\"text-align:justify\"}\nEl código que genera estos histogramas en R es el siguiente:\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-his2}\n```{r, echo=TRUE}\n\n# muestra el gráfico de todos los histogramas de ventas por día despues de la pandemia\npar(mar=c(2,2,2,2))\npar(mfrow =c(3,3))\nhist(fil_dat_1_after$Ventas, main = \"Ventas día Domingo\", xlab = \"Ventas\")\nhist(fil_dat_2_after$Ventas, main = \"Ventas día Lunes\", xlab = \"Ventas\")\nhist(fil_dat_3_after$Ventas, main = \"Ventas día Martes\", xlab = \"Ventas\")\nhist(fil_dat_4_after$Ventas, main = \"Ventas día Miércoles\", xlab = \"Ventas\")\nhist(fil_dat_5_after$Ventas, main = \"Ventas día Jueves\", xlab = \"Ventas\")\nhist(fil_dat_6_after$Ventas, main = \"Ventas día Viernes\", xlab = \"Ventas\")\nhist(fil_dat_7_after$Ventas, main = \"Ventas día Sábado\", xlab = \"Ventas\")\n```\n\nHistogramas de las ventas por día después de la pandemia.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval= FALSE}\n# muestra el gráfico de todos los histogramas de ventas por día \n#despues de la pandemia\npar(mar=c(2,2,2,2))\npar(mfrow =c(3,3))\nhist(fil_dat_1_after$Ventas, \n     main = \"Ventas día Domingo\", xlab = \"Ventas\")\nhist(fil_dat_2_after$Ventas, \n     main = \"Ventas día Lunes\", xlab = \"Ventas\")\nhist(fil_dat_3_after$Ventas, \n     main = \"Ventas día Martes\", xlab = \"Ventas\")\nhist(fil_dat_4_after$Ventas,\n     main = \"Ventas día Miércoles\", xlab = \"Ventas\")\nhist(fil_dat_5_after$Ventas, \n     main = \"Ventas día Jueves\", xlab = \"Ventas\")\nhist(fil_dat_6_after$Ventas, \n     main = \"Ventas día Viernes\", xlab = \"Ventas\")\nhist(fil_dat_7_after$Ventas, \n     main = \"Ventas día Sábado\", xlab = \"Ventas\")\n```\n\n![Histogramas de las ventas por día después de la pandemia.](his_2.png){fig-align=\"center\" width=\"80%\"}\n:::\n\n::: {style=\"text-align:justify\"}\nEl comportamiento periódico de las ventas, se observa en los boxplot de las ventas por cada día de la semana.\n:::\n\n#### Boxplot de datos de ventas por días limpios después de la pandemia\n\n```{r}\nsummary(fil_dat_1_after$Ventas)\nsummary(fil_dat_2_after$Ventas)\nsummary(fil_dat_3_after$Ventas)\nsummary(fil_dat_4_after$Ventas)\nsummary(fil_dat_5_after$Ventas)\nsummary(fil_dat_6_after$Ventas)\nsummary(fil_dat_7_after$Ventas)\n\n```\n\n::: {style=\"text-align:justify\"}\nEl código que genera estos los boxplot en R es el siguiente:\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-box2}\n```{r, echo =TRUE}\nlibrary(plotly)\n\n#día 1 = domingo\n#día 2 = lunes\n#día 3 = martes\n#día 4 = miércoles\n#día 5 = jueves\n#día 6 = viernes \n#día 7 = sábado\nfig <- plot_ly(y =fil_dat_1_after$Ventas, name = \"Ventas día Domingo\", boxpoints = \"all\",type = \"box\")\nfig <- fig %>% add_trace(y = fil_dat_2_after$Ventas,  \n                         name = \"Ventas día Lunes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_3_after$Ventas,  \n                         name = \"Ventas día Martes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_4_after$Ventas,  \n                         name = \"Ventas día Miércoles\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_5_after$Ventas,  \n                         name = \"Ventas día Jueves\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_6_after$Ventas,  \n                         name = \"Ventas día Viernes\", boxpoints=\"all\")\nfig <- fig %>% add_trace(y = fil_dat_7_after$Ventas,  \n                         name = \"Ventas día Sábado\", boxpoints = \"all\")\n\nfig\n```\n\nBoxplot de las ventas por día después de la pandemia.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval=FALSE}\n# muestra el gráfico de todos los boxplot de ventas por día antes de la pandemia \nfig <- plot_ly(y =fil_dat_1_after$Ventas, name = \"Ventas día Domingo\",\n               boxpoints = \"all\",type = \"box\")\n\nfig <- fig %>% add_trace(y = fil_dat_2_after$Ventas,  \n                         name = \"Ventas día Lunes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_3_after$Ventas,  \n                         name = \"Ventas día Martes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_4_after$Ventas,  \n                         name = \"Ventas día Miércoles\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_5_after$Ventas,  \n                         name = \"Ventas día Jueves\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_6_after$Ventas,  \n                         name = \"Ventas día Viernes\", boxpoints=\"all\")\nfig <- fig %>% add_trace(y = fil_dat_7_after$Ventas,  \n                         name = \"Ventas día Sábado\", boxpoints = \"all\")\nfig\n```\n\n![Boxplot de las ventas por día después de la pandemia.](fig-box2pdf.png){fig-align=\"center\"}\n:::\n\n## Identificación de distribuciones de probabilidad de las ventas por día\n\n::: {style=\"text-align:justify\"}\nCon el fin de adaptar el modelo de Cramér Lundberg es necesario ajustar distribuciones de probabilidad de las ventas para cada día de la semana. Haciendo uso del test de Jarque Bera que ayuda a identificar cuales días siguen una distribución normal y el test de Kolmogorov de Smirnov.\n\nEl siguiente código aplica los diferentes test de normalidad para las ventas por día antes de la pandemia:(Citar Jarque Bera)\n:::\n\n```{r, echo = FALSE, message=FALSE}\n#Analisis de los datos:\n#Filtros por días:\n#_________________________________Antes de la pandemia____________________________________________\nfil_before1<- data.frame(subset(datos, Año <= 2019))\nfil_before2<- data.frame(subset(datos, Año == 2020 & Mes <= 4))\nfil_before <- rbind(fil_before1, fil_before2)\n\n#filtra los datos del día domingo antes de la pandemia\nfil_dat_1_before<- data.frame(subset(fil_before, Dia == 1))\n#Calcula la media, mediana, etc.\n#median(fil_dat_1_before$Ventas)\n#summary(fil_dat_1_before$Ventas)\n#p1b <-hist(fil_dat_1_before$Ventas)\n#______________________________________________________________________________________________\n#quitamos los outliers de la base de datos del día 1(domingo):\n\n#dim(fil_dat_1_before)\n\nQ <- quantile(fil_dat_1_before$Ventas, probs=c(.10, .80), na.rm = FALSE)\nIQR <- IQR(fil_dat_1_before$Ventas)\n\nLower <- Q[1] - 1.5*IQR\nUpper <- Q[2] + 1.5*IQR\n\nfil_dat_1_before <- subset(fil_dat_1_before, fil_dat_1_before$Ventas > Lower & fil_dat_1_before$Ventas < Upper)\n\n#dim(fil_dat_1_before)\n\naux_box <- data.frame(fil_dat_1_before$Ventas)\n#box1_b <-boxplot(fil_dat_1_before$Ventas, outline=FALSE) #Dato atípico\n#_______________________________________________________________________\n#filtra los datos del día Lunes antes de la pandemia\nfil_dat_2_before<- data.frame(subset(fil_before, Dia == 2))\n#Sacamos la media, mediana\n#median(fil_dat_2_before$Ventas)\n#summary(fil_dat_2_before$Ventas)\n#Histogramas\n#p2b <- hist(fil_dat_2_before$Ventas)\n#Boxplot\n#Se ajustara una distribuciión con el comando siguiente:\n\n\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_2_before)\n\nQ2 <- quantile(fil_dat_2_before$Ventas, probs=c(.10, .70), na.rm = FALSE)\nIQR2 <- IQR(fil_dat_2_before$Ventas)\n\nLower <- Q2[1] - 1.5*IQR2\nUpper <- Q2[2] + 1.5*IQR2\n\nfil_dat_2_before <- subset(fil_dat_2_before, fil_dat_2_before$Ventas > Lower & fil_dat_2_before$Ventas < Upper)\n\n#dim(fil_dat_2_before)\n\naux_box1 <- data.frame(fil_dat_2_before$Ventas)\n#___________________________\n#filtra los datos del día martes antes de la pandemia\nfil_dat_3_before<- data.frame(subset(fil_before, Dia == 3))\n\n#median(fil_dat_3_before$Ventas)\n#summary(fil_dat_3_before$Ventas)\n#p3b <- hist(fil_dat_3_before$Ventas)\n#boxplot(fil_dat_3_before$Ventas, outline=FALSE) #Dato atípico\n#describe(fil_dat_3_before$Ventas)\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_3_before)\n\nQ3 <- quantile(fil_dat_3_before$Ventas, probs=c(.10, .75), na.rm = FALSE)\nIQR3 <- IQR(fil_dat_3_before$Ventas)\n\nLower <- Q3[1] - 1.5*IQR3\nUpper <- Q3[2] + 1.5*IQR3\n\nfil_dat_3_before <- subset(fil_dat_3_before, fil_dat_3_before$Ventas > Lower & fil_dat_3_before$Ventas < Upper)\n\n#dim(fil_dat_3_before)\n\naux_box3 <- data.frame(fil_dat_3_before$Ventas)\n#__________________________________\n#filtra los datos del día miércoles antes de la pandemia\nfil_dat_4_before<- data.frame(subset(fil_before, Dia == 4))\n\n#median(fil_dat_4_before$Ventas)\n#summary(fil_dat_4_before$Ventas)\n#p4b <- hist(fil_dat_4_before$Ventas)\n#boxplot(fil_dat_4_before$Ventas, outline=FALSE) #Dato atípico\n\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_4_before)\n\nQ4 <- quantile(fil_dat_4_before$Ventas, probs=c(.05, .60), na.rm = FALSE)\nIQR4 <- IQR(fil_dat_4_before$Ventas)\n\nLower <- Q4[1] - 1.5*IQR4\nUpper <- Q4[2] + 1.5*IQR4 \n\nfil_dat_4_before <- subset(fil_dat_4_before, fil_dat_4_before$Ventas > Lower & fil_dat_4_before$Ventas < Upper)\n\n#dim(fil_dat_4_before)\n\naux_box4 <- data.frame(fil_dat_4_before$Ventas)\n#_______________________________________________________________________________\n#filtra los datos del día Jueves antes de la pandemia\nfil_dat_5_before<- data.frame(subset(fil_before, Dia == 5))\n\n#median(fil_dat_5_before$Ventas)\n#summary(fil_dat_5_before$Ventas)\n#p5b <- hist(fil_dat_5_before$Ventas)\n#boxplot(fil_dat_5_before$Ventas, outline=FALSE) #Dato atípico\n\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_5_before)\n\nQ5 <- quantile(fil_dat_5_before$Ventas, probs=c(.10, .65), na.rm = FALSE)\nIQR5 <- IQR(fil_dat_5_before$Ventas)\n\nLower <- Q5[1] - 1.5*IQR5\nUpper <- Q5[2] + 1.5*IQR5 \n\nfil_dat_5_before <- subset(fil_dat_5_before, fil_dat_5_before$Ventas > Lower & fil_dat_5_before$Ventas < Upper)\n\n#dim(fil_dat_5_before)\n\naux_box5 <- data.frame(fil_dat_5_before$Ventas)\n##########################################################\n#filtra los datos del día Viernes antes de la pandemia\nfil_dat_6_before<- data.frame(subset(fil_before, Dia == 6))\n\n#median(fil_dat_6_before$Ventas)\n#summary(fil_dat_6_before$Ventas)\n#p6b <- hist(fil_dat_6_before$Ventas)\n#boxplot(fil_dat_6_before$Ventas, outline=FALSE) #Dato atípico\n\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_6_before)\n\nQ6 <- quantile(fil_dat_6_before$Ventas, probs=c(.15, .75), na.rm = FALSE)\nIQR6 <- IQR(fil_dat_6_before$Ventas)\n\nLower <- Q6[1] - 1.5*IQR6\nUpper <- Q6[2] + 1.5*IQR6\n\nfil_dat_6_before <- subset(fil_dat_6_before, fil_dat_6_before$Ventas > Lower & fil_dat_6_before$Ventas < Upper)\n\n#dim(fil_dat_6_before)\n\naux_box6 <- data.frame(fil_dat_6_before$Ventas)\n\n```\n\n```{r, echo=TRUE}\n#Calcularemos los test correspondientes a los filtros\n#de ventas por día:\n\n#JARQUE BERA\njarque.bera.test(fil_dat_1_before$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#por lo tanto los datos se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n\nfitdistr(fil_dat_1_before$Ventas, \"normal\")\n\n#JARQUE BERA\njarque.bera.test(fil_dat_2_before$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#por lo tanto los datos se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_2_before$Ventas, \"normal\")\n\n#JARQUE BERA\njarque.bera.test(fil_dat_3_before$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#por lo tanto los datos se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_3_before$Ventas, \"normal\")\n\n#JARQUE BERA\njarque.bera.test(fil_dat_4_before$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#por lo tanto los datos se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_4_before$Ventas, \"normal\")\n\n#JARQUE BERA\njarque.bera.test(fil_dat_5_before$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#por lo tanto los datos se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_5_before$Ventas, \"normal\")\n\n#JARQUE BERA\njarque.bera.test(fil_dat_6_before$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#por lo tanto los datos se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_6_before$Ventas, \"normal\")\n\n```\n\n::: {style=\"text-align:justify\"}\nPara el caso del día sábado, denotado como séptimo día, no se obtuvo una distribución normal por lo que se utilizo la paqueteria de R fitdistrplus para probar el ajuste de otras distribuciones clásicas de probabilidad. Las distribuciones probadas se presentan en el código siguiente:\n\n```{r, echo = TRUE, message=FALSE}\nfitdistr(fil_dat_7_before$Ventas, \"weibull\")\nfitdistr(fil_dat_7_before$Ventas, \"exponential\")\nfitdistr(fil_dat_7_before$Ventas, \"lognormal\")\n\n```\n\n::: {style=\"text-align:justify\"}\nDe lo anterior podemos decir que el mejor ajuste se obtuvo al usar la distribución Weibull.\n:::\n:::\n\n### Prueba de la distribución Weibull:\n\n::: {style=\"text-align:justify\"}\nUna vez ajustada la distribución Weibull, se prueban sus parametros con la aplicación del test de Kolmogorov de Smirnov. El siguiente código implementa ambos procedimientos:\n\n```{r, echo = FALSE, message=FALSE}\n#############################################\n#filtra los datos del día Sábado antes de la pandemia\nfil_dat_7_before<- data.frame(subset(fil_before, Dia == 7))\n#___________________________________________________________\n\nQ7 <- quantile(fil_dat_7_before$Ventas, probs=c(.25, .75), na.rm = FALSE)\nIQR7 <- IQR(fil_dat_7_before$Ventas)\n\nLower <- Q7[1] - 1.5*IQR7\nUpper <- Q7[2] + 1.5*IQR7 \n\nfil_dat_7_before <- subset(fil_dat_7_before, fil_dat_7_before$Ventas > Lower & fil_dat_7_before$Ventas < Upper)\n\naux_box7 <- data.frame(fil_dat_7_before$Ventas)\n```\n:::\n\n```{r, echo = TRUE, message=FALSE}\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#JARQUE BERA\njarque.bera.test(fil_dat_7_before$Ventas)\n#Fitting de de una distri bución weibull\n#fil_dat_7_before$Ventas\nfit.weibull <- fitdist(fil_dat_7_before$Ventas, \"weibull\")\nfit.weibull\nvector_ventas7_ordenados <- fil_dat_7_before$Ventas[order(fil_dat_7_before$Ventas)]\nn = 83\nF_x = numeric(n)\nfor(i in 1:n){\n  F_x[i] <- (i/ n)\n}\n#F_x\nf_gorro_x <-  pweibull(vector_ventas7_ordenados,\n                       shape = 4.784508e+00, scale =1.295070e+05, \n                       lower.tail = TRUE, log.p = FALSE)\nks <- abs(F_x - f_gorro_x)\n```\n\n#### Representación gráfica al aplicar el test de Kolmogorov de Smirnov\n\n```{r, echo = FALSE, message=FALSE}\nmax(ks)\nvalor_critico = (1.36/(sqrt(n)))\nvalor_critico\n```\n\n```{r, message=FALSE}\n\nx <- 1:83 \ng1 <- plot(1:83, F_x) \ng2 <- plot(1:83, f_gorro_x) \nplot(x, F_x, col='red', xlab='x', ylab='y')\n\n#add second line to plot \npoints(x, f_gorro_x, col='blue')\n```\n\n::: {style=\"text-align:justify\"}\nPara el periodo despues de pandemia se repite la misma metodología. Aplicamos el test de Jarque Bera a los datos para cada día de la semana después de pandemia.\n:::\n\n```{r, echo = FALSE, message=FALSE}\n#________________________Después de la pandemia__________________________________\n\n\nfil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8))\n#filtra los datos del día domingo despues de la pandemia\nfil_dat_1_after<- data.frame(subset(datos, Año == 2020 & Mes >= 8 & Dia==1))\n\n#median(fil_dat_1_after$Ventas)\n#summary(fil_dat_1_after$Ventas)\n#p1 <- hist(fil_dat_1_after$Ventas)\n#boxplot(fil_dat_1_after$Ventas)\n#______________________________________________________________________\n\n\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_1_after$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra  proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_1_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_1_after$Ventas)\nfitdistr(fil_dat_1_after$Ventas, \"normal\")\n\n#filtra los datos del día lunes despues de la pandemia\nfil_dat_2_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==2))\nfil_dat_2_after <- fil_dat_2_after[fil_dat_2_after$Ventas != max(fil_dat_2_after$Ventas), ]\n#median(fil_dat_2_after$Ventas)\n#summary(fil_dat_2_after$Ventas)\n#p2 <- hist(fil_dat_2_after$Ventas)\n#boxplot(fil_dat_2_after$Ventas, outline=FALSE) #Dato atípico\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_2_after)\n#Q2a <- quantile(fil_dat_2_after$Ventas, probs=c(.05, .95), na.rm = FALSE)\n#IQR2a <- IQR(fil_dat_2_after$Ventas)\n\n#Lower <- Q2a[1] - 1.5*IQR2a\n#Upper <- Q2a[2] + 1.5*IQR2a \n\n#fil_dat_2_after <- subset(fil_dat_2_after, fil_dat_2_after > Lower & fil_dat_2_after < Upper)\n\n#_________________________________________\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_2_after$Ventas)\n#El valor p es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra no proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_2_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_2_after$Ventas)\nfitdistr(fil_dat_2_after$Ventas, \"normal\")\n\n#filtra los datos del día martes despues de la pandemia\nfil_dat_3_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==3))\n\n#median(fil_dat_3_after$Ventas)\n#summary(fil_dat_3_after$Ventas)\n#Histograma de las ventas día martes\n#p3 <- hist(fil_dat_3_after$Ventas)\n#boxplot(fil_dat_3_after$Ventas)\n\n#___________________________________________________________\n#quitamos los outliers de la base de datos del día 2(lunes):\n\n#dim(fil_dat_3_after)\n\n\n#dim(fil_dat_3_after$Ventas)\n\n#aux_box3a <- data.frame(fil_dat_3_after)\n#___________________________\n\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_3_after$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_3_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_3_after$Ventas)\nfitdistr(fil_dat_3_after$Ventas, \"normal\")\n\n#filtra los datos del día miércoles despues de la pandemia\nfil_dat_4_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==4))\n\n#median(fil_dat_4_after$Ventas)\n#summary(fil_dat_4_after$Ventas)\n#p4 <- hist(fil_dat_4_after$Ventas)\n#boxplot(fil_dat_4_after$Ventas, outline=FALSE) #Dato atípico\n\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_4_after$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_4_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_4_after$Ventas)\nfitdistr(fil_dat_4_after$Ventas, \"normal\")\n\n#filtra los datos del día jueves despues de la pandemia\nfil_dat_5_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==5))\n\n#median(fil_dat_5_after$Ventas)\n#summary(fil_dat_5_after$Ventas)\n#p5 <- hist(fil_dat_5_after$Ventas)\n#boxplot(fil_dat_5_after$Ventas, outline=FALSE)#Dato atípico\n\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_5_after$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_5_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_5_after$Ventas)\nfitdistr(fil_dat_5_after$Ventas, \"normal\")\n\n#filtra los datos del día viernes despues de la pandemia\nfil_dat_6_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==6))\n\n#median(fil_dat_6_after$Ventas)\n#summary(fil_dat_6_after$Ventas)\n#p6 <- hist(fil_dat_6_after$Ventas)\n#boxplot(fil_dat_6_after$Ventas)\n\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_6_after$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_6_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_6_after$Ventas)\nfitdistr(fil_dat_6_after$Ventas, \"normal\")\n\n#filtra los datos del día sábado despues de la pandemia\nfil_dat_7_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==7))\n\n#median(fil_dat_7_after$Ventas)\n#summary(fil_dat_7_after$Ventas)\n#p7 <- hist(fil_dat_7_after$Ventas)\n#boxplot(fil_dat_7_after$Ventas)\n\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_7_after$Ventas)\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_7_after$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_7_after$Ventas)\n#Se ajustara una distribución con el comando siguiente:\nfitdistr(fil_dat_7_after$Ventas, \"normal\")\n```\n\n```{r}\n#_______Después de la pandemia____________________________________\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra  proviene de una población con distribución normal.\n#JARQUE BERA\njarque.bera.test(fil_dat_1_after$Ventas)\nfitdistr(fil_dat_1_after$Ventas, \"normal\")\n#________________________________________________________________\n#Calcularemos los test correspondientes \n#a los filtros de de ventas por día:\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#JARQUE BERA\njarque.bera.test(fil_dat_2_after$Ventas)\nfitdistr(fil_dat_2_after$Ventas, \"normal\")\n#________________________________________________________________\n#Calcularemos los test correspondientes \n# a los filtros de de ventas por día:\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#JARQUE BERA\njarque.bera.test(fil_dat_3_after$Ventas)\nfitdistr(fil_dat_3_after$Ventas, \"normal\")\n#________________________________________________________________\n#Calcularemos los test correspondientes \n# a los filtros de de ventas por día:\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#JARQUE BERA\njarque.bera.test(fil_dat_4_after$Ventas)\nfitdistr(fil_dat_4_after$Ventas, \"normal\")\n#________________________________________________________________\n#Calcularemos los test correspondientes \n# a los filtros de de ventas por día:\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#JARQUE BERA\njarque.bera.test(fil_dat_5_after$Ventas)\nfitdistr(fil_dat_5_after$Ventas, \"normal\")\n#________________________________________________________________\n#Calcularemos los test correspondientes \n# a los filtros de de ventas por día:\n# El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\n#JARQUE BERA\njarque.bera.test(fil_dat_6_after$Ventas)\nfitdistr(fil_dat_6_after$Ventas, \"normal\")\n#________________________________________________________________\n#Calcularemos los test correspondientes \n# a los filtros de de ventas por día:\n#El valor p no es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra proviene de una población con distribución normal.\njarque.bera.test(fil_dat_7_after$Ventas)\n#Se ajustara una distribución con el comando siguiente:\nfitdistr(fil_dat_7_after$Ventas, \"normal\")\n```\n\n::: {style=\"text-align:justify\"}\nCon las distribuciones identificadas de las ventas por día en los dos periodos, ahora es posible simular las variables aleatorias de las ventas de cada día de la semana y por lo tanto simular las ganancias de toda la semana.\n:::\n\n## Modelo Modificado de Cramér-Lundberg para identificar la probabilidad de las ganancias insuficientes en una empresa de comida rápida\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align:justify\"}\nComo ya se vio en la sección (@sec-modelo_C_L) el Modelo de Cramér-Lundberg (MCL)es una herramienta utilizada en el campo de la gestión de riesgos y las finanzas para evaluar la probabilidad de incumplimiento o pérdidas insuficientes en una empresa. Aunque no es específicamente diseñado para analizar la variación de las ganancias de una empresa, en particular una empresa de comida rápida, se propone en este trabajo una adaptación del modelo, para evaluar la probabilidad de ganancias en este tipo de negocio, que puede facilitar el análisis de la evolución financiera de la empresa.\n\nPara ello la ecuación general del modelo modificado que representa la evolución de las ganancias en el tiempo hasta la semana $t$, denotada por $G$ queda definida como: $$G(t) = u -ct + V(t), \\ \\ t = 1, 2, 3, ...$$ {#eq-4.1}\n\n::: {style=\"text-align:justify\"}\nla cual se estudiara en los periodos de tiempo (pre-pandemia, pos-pandemia).\n:::\n\n-   $V(t)$: son los ingresos de las ganancias por día para cada semana.\n\n-   $c$ : Son los costos de las obligaciones financieras del inversionista, como prestamos, pagos por adquisición de la franquicia, compras de equipos inmobiliarios, pagos de empleados, etc.\n\n-   $u \\geq 0$ : Es el capital inicial con el cual inicia la empresa a trabajar.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align:justify\"}\nComo ya se vio en la sección (@sec-modelo_C_L) El Modelo de Cramér-Lundberg (MCL) es una herramienta utilizada en el campo de la gestión de riesgos y las finanzas para evaluar la probabilidad de incumplimiento o pérdidas insuficientes en una empresa. Aunque no es específicamente diseñado para analizar la variación de las ganancias de una empresa, en particular una empresa de comida rápida, puede adaptarse para evaluar la probabilidad de ganancias insuficientes en este tipo de negocio, que puede llevar a la decisión de cierre de las actividades de la empresa.\n\nPara ello la ecuación general del modelo modificado que representa la evolución de las ganancias en el tiempo hasta la semana $t$, denotada por $G$ queda definida como: $$G(t) = u -ct + V(t), \\ \\ t = 1, 2, 3, ...$$ {#eq-4.1pdf}\n\n::: {style=\"text-align:justify\"}\nla cual se estudiara en los dos periodo de tiempo (pre-pandemia, pos-pandemia).\n:::\n\n-   $V(t)$: son los ingresos de las ganancias por día para cada semana\n\n-   $c$ : Son los costos de las obligaciones financieras del inversionista, como prestamos, pagos por adquisición de la franquicia, compras de equipos inmobiliarios, pagos de empleados, etc.\n\n-   $u \\geq 0$ : Es el capital inicial con el cual inicia la empresa a trabajar.\n:::\n:::\n\n### Caso pre-pandemia\n\n::: {style=\"text-align:justify\"}\nPara la implementación del modelo modificado Cramér-Lundberg con los datos antes de la pandemia se hizo la simulación de las variables aleatorias mediante las distribuciones de las ventas por día tomado como las ganancias acumuladas, y se estimó los parámetros de $u$ y $c$, por lo que el modelo es determinista y se incrementa por semana.\n:::\n\n#### Modelo de Cramér-Lundberg simulado en R con datos reales de las ventas por día de la empresa.\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align:justify\"}\nEn la (@fig-trayectoria) se muestra la trayectoria del modelo bajo los supuestos del modelo modificado, el proceso comienza con $t = 90$, que son las $90$ semanas de de las ventas registradas por día antes del cierre pandemico, con un capital inicial de $u= 1759629$, una tasa de $c= 0.29$, los montos de las ganancias tienen distribución normal ($N$) y weibull ($W$).\n\nEl código que genera la trayectoria es el siguiente:\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align:justify\"}\nEn la (@fig-fig-trayectoriapdf) se muestra la trayectoria del modelo bajo los supuestos del modelo modificado, el proceso comienza con $t = 90$, que son las $90$ semanas de de las ventas registradas por día antes del cierre pandemico, con un capital inicial de $u= 1759629$, una tasa de $c= 0.29$, los montos de las ganancias tienen distribución normal y weibull.\n\nEl código que genera la trayectoria es el siguiente:\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r , eval=FALSE, message=FALSE}\n#Simulación Modelo Clásico de Cramér-Lundberg \n#para tres meses: Antes de la pandemia\n#Con los datos reales de la empresa\nlibrary(dplyr)#librería para poder renombrar las cabeceras \n# de los dataframes\n#Parámetros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc =0.29*u #prima de pago cada timepo t. c=0.5*u\nt_final = 90\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt <- function(u, c, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)\n  Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 )  + \n            rnorm(1, mean = 48125.734 , sd=17150.338 )   +  \n            rnorm(1, mean =  44509.755, sd = 14312.338)  + \n            rnorm(1, mean =   46904.516, sd = 16238.151) + \n            rnorm(1, mean = 52786.734  , sd = 18403.17)  + \n            rnorm(1, mean = 118645.9  , sd = 36530.24)   + \n    rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] +\n                  tiempo_llegada,tiempo[length(tiempo)] +\n                  tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n           Cramer_trayectoria[length(Cramer_trayectoria)]- \n                              c*tiempo_llegada,\n          Cramer_trayectoria[length(Cramer_trayectoria)]-\n                              c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename\n                               (Tiempo = tiempo, \n                                 Ct = Cramer_trayectoria))\n  return(df_trayectoria)\n  \n}\ntrayectoria <- trayectoria_CLt(u,c, t_final )\n\n#Intalación de plotly usando github\n#devtools::install_github(\"ropensci/plotly\")\n\nfig_tr<- plot_ly(trayectoria, x = ~Tiempo, y = ~Ct, \nname = \"Ganancias: G(t)\", type = \"scatter\", mode = \"lines\")\nfig_tr <- fig_tr %>% add_trace(x = ~Tiempo, y = u,  \nname = \"Capital inicial: u\", type = \"scatter\", mode = \"lines\")\nfig_tr\n```\n\n![Trayectoria del proceso de evolución del modelo modificado de Cramér Lundberg antes de la pandemia.](fig-trayectoriapdf.png){#fig-fig-trayectoriapdf fig-align=\"center\" width=\"80%\"}\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-trayectoria}\n```{r , echo = TRUE, message=FALSE}\n#Simulación Modelo Clásico de Cramér-Lundberg \n#para tres meses: Antes de la pandemia\n#Con los datos reales de la empresa\n\nlibrary(dplyr) # librería para poder renombrar las cabeceras \n# de los dataframes\n\n#Parámetros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc =0.29*u #prima de pago cada timepo t. c=0.5*u\nt_final = 90\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt <- function(u, c, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)\n  Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) + \n    rnorm(1, mean = 48125.734 , sd=17150.338 ) +  \n   rnorm(1, mean =  44509.755, sd = 14312.338 ) + \n    rnorm(1, mean =   46904.516, sd = 16238.151 ) + \n    rnorm(1, mean = 52786.734  , sd = 18403.17 ) + \n    rnorm(1, mean = 118645.9  , sd = 36530.24) + \n    rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + \n                tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n    Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada,\n    Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  return(df_trayectoria)\n  \n}\ntrayectoria <- trayectoria_CLt(u,c, t_final )\n\n#Intalación de plotly usando github\n#devtools::install_github(\"ropensci/plotly\")\n\nfig_tr<- plot_ly(trayectoria, x = ~Tiempo, y = ~Ct, \nname = \"Ganancias: G(t)\", type = \"scatter\", mode = \"lines\")\nfig_tr <- fig_tr %>% add_trace(x = ~Tiempo, y = u,  \nname = \"Capital inicial: u\", type = \"scatter\", mode = \"lines\")\nfig_tr\n\n```\n\nTrayectoria del proceso de evolución del modelo modificado de Cramér Lundberg antes de la pandemia.\n:::\n:::\n\n#### Probabilidad de ruina\n\n::: {style=\"text-align:justify\"}\nCon la simulación de la variable aleatoria $G(t)$, es posible ahora calcular la probabilidad de ruina, utilizando el método de Monte Carlo(citar).\n\nPara ello, se quiere analizar el momento en el que $G(t)\\leq u$, es decir cuando la ganancia al final de la semana $t$ es menor al capital inicial. Cuando $G(t)\\leq0$, se alcanza como la ruina de la empresa, para ambos casos se utiliza la comparación con la tasa de interés para préstamos bancarios de $0.8$ anual.\n\nEl código para simular la probabilidad de las ganancias finales bajas es el siguiente:\n:::\n\n```{r, echo= TRUE, message=FALSE}\n#Simulación de la probabilidad de ruina: Antes de la pandemia\n#Con los datos reales de la empresa\nlibrary(dplyr) # librería para poder renombrar \n#las cabeceras de los dataframes\n\n#Parámetros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada tiempo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 48\nmu = 1 #tiempos entrellegadas constantes\ntrayectoria_CLt <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1) \n    #Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) + \n             rnorm(1, mean = 48125.734 , sd=17150.338 ) +  \n             rnorm(1, mean =  44509.755, sd = 14312.338 ) + \n             rnorm(1, mean =   46904.516, sd = 16238.151 ) + \n             rnorm(1, mean = 52786.734  , sd = 18403.17 ) + \n             rnorm(1, mean = 118645.9  , sd = 36530.24) +\n             rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] +\n                  tiempo_llegada,tiempo[length(tiempo)] + \n                  tiempo_llegada ) \n    Cramer_trayectoria <-c(Cramer_trayectoria,\n                Cramer_trayectoria[length(Cramer_trayectoria)]-\n                  c*tiempo_llegada,\n                Cramer_trayectoria[length(Cramer_trayectoria)]-\n                  c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n# 1.08*u es la ganancia inferior a la de un tasa de \n  #un título financiero \n#para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.08*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>%rename\n                               (Tiempo = tiempo, \n                                Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria <- trayectoria_CLt(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar \n#la probabilidad de las ganancias bajas\nn_replicaciones = 100\nr_baja_ganancia <- replicate(n_replicaciones,\ntrayectoria_CLt(u, c, lambda_Nt, t_final)\n[2])\n#r_baja_ganancia \nprob_baja_ganancia <- sum(r_baja_ganancia >0)/n_replicaciones\n```\n\n::: {style=\"text-align:justify\"}\nEs claro que la evolución de $G(t)$ antes de la pandemia genera una probabilidad de ganancias bajas cero.\n:::\n\n```{r, echo=FALSE}\nprob_baja_ganancia\n```\n\n::: {style=\"text-align:justify\"}\nEl código para calcular la probabilidad de ruina es el siguiente:\n:::\n\n```{r, echo= TRUE, message=FALSE}\n#Simulación de la probabilidad de ruina: Antes de la pandemia\n#Con los datos reales de la empresa\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada tiempo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 48\nmu = 1 #tiempos entrellegadas constantes\ntrayectoria_CLt <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1) \n#Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) +\n             rnorm(1, mean = 48125.734 , sd=17150.338 )   +  \n             rnorm(1, mean =  44509.755, sd = 14312.338 ) + \n             rnorm(1, mean =   46904.516, sd = 16238.151) + \n             rnorm(1, mean = 52786.734  , sd = 18403.17 ) +\n             rnorm(1, mean = 118645.9  , sd = 36530.24)   + \n             rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] +\n                  tiempo_llegada,tiempo[length(tiempo)] + \n                  tiempo_llegada ) \n    Cramer_trayectoria <-c(Cramer_trayectoria,\n                Cramer_trayectoria[length(Cramer_trayectoria)]-\n                             c*tiempo_llegada,\n                Cramer_trayectoria[length(Cramer_trayectoria)]-\n                             c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n# 1.08*u es la ganancia inferior a la de un tasa de\n# un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.08*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename\n                               (Tiempo = tiempo, \n                                 Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria <- trayectoria_CLt(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_ruina <- replicate(n_replicaciones, \n            trayectoria_CLt(u, c, lambda_Nt, t_final)[1])\n#r_ruina\nprob_ruin <- sum(r_ruina>0)/n_replicaciones\n```\n\n::: {style=\"text-align:justify\"}\nEn efecto la evolución de $G(t)$ antes de la pandemia genera una probabilidad ruina cero.\n:::\n\n```{r, echo=FALSE}\nprob_ruin\n```\n\n#### Análisis de sensibilidad\n\n::: {style=\"text-align:justify\"}\nSe desea ahora analizar los cambios del resultado del modelo cuando se modifican sus entradas o parámetros, por lo cual se realiza un análisis de sensibilidad de algunos parámetros.\n\nPara ello del modelo modificado de Cramér Lundberg se toma los parámetros $u$ y $c$ del modelo modificado y se establece los rangos o valores posibles para cada uno de los ciertos parámetros, también se toma las medianas de las ganancia en la semana final de 100 simulaciones de las trayectorias del modelo, los rangos se determinan hasta que el modelo presente un comportamiento diferente.\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo =TRUE}\n#Simulación Modelo Clásico de Cramer-Lundberg para tres meses: \n#Antes de la pandemia Con los datos reales de la empresa\n\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 90\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) +\nrnorm(1, mean = 48125.734 , sd=17150.338 ) +  \nrnorm(1, mean =  44509.755, sd = 14312.338 ) + \nrnorm(1, mean =   46904.516, sd = 16238.151 ) + \nrnorm(1, mean = 52786.734  , sd = 18403.17 ) \n+ rnorm(1, mean = 81601.876  , sd = 23756.037) \n+ rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,\n    tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n    Cramer_trayectoria[length(Cramer_trayectoria)]- \n      c*tiempo_llegada,\n    Cramer_trayectoria[length(Cramer_trayectoria)]-\n      c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n      {\n      ruina = 1\n      }\n    else\n      {\n      ruina = 0\n      }\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename\n                               (Tiempo = tiempo, \n                                Ct = Cramer_trayectoria))\n  return(df_trayectoria$Ct[length(df_trayectoria$Ct)])\n  \n}\n\n# La función generador_mediana nos calcula \n#la mediana de las ganancias finales \n#de 100 trayectorias, fijando el u= surplus y el c\ngenerador_mediana<- function(ui,cj)\n  {\n  ganancia_final_replicas <- replicate(100, \n                                       trayectoria_CLt(u, c,\n                                        lambda_Nt, t_final))\n  return( median(ganancia_final_replicas))\n  }\n#Se crea la rejilla donde se hace el analisis de sensibilidad\n#para diferentes valores de u y c\ngrid_u <- seq(from = (u-100000*4), to = (u+100000*4), by = 100000)\ngrid_c <- seq(from = (decimal_c-0.01*4), to = (decimal_c+0.01*4), \n              by = 0.01)\nu_t <- grid_u\nmatriz_mediana <- matrix(rep(0, length(u_t)*length(grid_c)),\nnrow= length(u_t), ncol= length(grid_c))\nG_t <- matriz_mediana\n\nfor (i in 1:length(u_t)) \n  {\n    for (j in 1:length(grid_c)) \n      {\n      G_t[i,j] <- generador_mediana(u_t[i],grid_c[j]*u_t[i])\n      }\n  }  \n#matriz_mediana\n\n#Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- u_t*grid_c\nfig <- plot_ly(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], \n             end = u_t[length(u_t)], \n             size =100000 , color = 'red'),\n    z = list(show = TRUE, start = G_t[1], \n             end = G_t[length(G_t)], \n             size = 0.01*100000)),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\nfig <- fig %>% layout(\n  scene = list(autosize = F, width = 500, height = 500,\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 8),\n    camera = list(eye = list(x = 0, \n                             y = -1, z = 1)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\nfig\n\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval = FALSE}\n#Simulación Modelo Clásico de Cramer-Lundberg para tres meses: \n#Antes de la pandemia Con los datos reales de la empresa\n\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 90\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) +\n            rnorm(1, mean = 48125.734 , sd=17150.338 )    +  \n            rnorm(1, mean =  44509.755, sd = 14312.338 )  + \n            rnorm(1, mean =   46904.516, sd = 16238.151 ) + \n            rnorm(1, mean = 52786.734  , sd = 18403.17 )  + \n            rnorm(1, mean = 81601.876  , sd = 23756.037)  + \n            rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] +\n                  tiempo_llegada,\n                tiempo[length(tiempo)] + \n                  tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n            Cramer_trayectoria[length(Cramer_trayectoria)]- \n                          c*tiempo_llegada,\n            Cramer_trayectoria[length(Cramer_trayectoria)]-\n                          c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n      {\n      ruina = 1\n      }\n    else\n      {\n      ruina = 0\n      }\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename\n                               (Tiempo = tiempo, \n                                Ct = Cramer_trayectoria))\n  return(df_trayectoria$Ct[length(df_trayectoria$Ct)])\n  \n}\n\n# La función generador_mediana nos calcula \n#la mediana de las ganancias finales \n#de 100 trayectorias, fijando el u= surplus y el c\ngenerador_mediana<- function(ui,cj)\n  {\n  ganancia_final_replicas <- replicate(100, \n                                       trayectoria_CLt(u, c,\n                                        lambda_Nt, t_final))\n  return( median(ganancia_final_replicas))\n  }\n#Se crea la rejilla donde se hace el analisis de sensibilidad\n#para diferentes valores de u y c\ngrid_u <- seq(from = (u-100000*4), to = (u+100000*4), by = 100000)\ngrid_c <- seq(from = (decimal_c-0.01*4), to = (decimal_c+0.01*4), \n              by = 0.01)\nu_t <- grid_u\n\nmatriz_mediana <- matrix(rep(0, length(grid_u)*length(grid_c)),\nnrow= length(grid_u), ncol= length(grid_c))\nG_t <- matriz_mediana\nfor (i in 1:length(grid_u)) \n  {\n    for (j in 1:length(grid_c)) \n      {\n        G_t[i,j] <- generador_mediana(u_t[i],\n                              grid_c[j]*u_t[i])\n      }\n  }  \n#matriz_mediana\n\n#Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- grid_u*grid_c\nfig <- plot_ly(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], \n             end = u_t[length(u_t)], \n             size =100000 , color = 'red'),\n    z = list(show = TRUE, start = G_t[1], \n             end = G_t[length(G_t)], \n             size = 0.01*100000)),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\nfig <- fig %>% layout(\n  scene = list(autosize = F, width = 500, height = 500,\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 8),\n    camera = list(eye = list(x = 0, \n                             y = -1, z = 1)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\nfig\n\n\n```\n\n![Análisis de sensibilidad pre-pandemia para 90 semanas](fig-analisispdf.png){fig-align=\"center\" width=\"500\"}\n:::\n\n### Caso pos-pandemia\n\n::: {style=\"text-align:justify\"}\nDe manera análoga a la metodología empleada con los datos pre-pandemicos, para la simulación del modelo Crámer-Lundberg con los datos después de la pandemia se hizo uso de las medias de las distribuciones de las ventas por día tomado como las ganancias acumuladas, y se estimó los parámetros de $u$ y $c$.\n:::\n\n#### Modelo de Cramér-Lundberg simulado en R con datos reales de las ventas por día de la empresa\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align:justify\"}\nEn la (@fig-trayectoria2) se muestra la trayectoria del modelo bajo los supuestos del modelo modificado, el proceso comienza con $t = 14$, que son las $14$ semanas de las ventas registradas por día después del cierre pandémico, con un capital inicial de $u= 1759629$, una tasa de $c= 0.29$, los montos de las ganancias tienen todas distribución normal ($N$).\n\nEl código que genera la trayectoria es el siguiente:\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align:justify\"}\nEn la (@fig-fig-trayectoria2pdf) se muestra la trayectoria del modelo bajo los supuestos del modelo modificado, el proceso comienza con $t = 14$, que son las $14$ semanas de de las ventas registradas por día después del cierre pandemico, con un capital inicial de $u= 1759629$, una tasa de $c= 0.29$, los montos de las ganancias tienen todas distribución normal ($N$).\n\nEl código que genera la trayectoria es el siguiente:\n:::\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-trayectoria2}\n```{r , echo = TRUE, message=FALSE}\n\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = (0.29*u) #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 \n    ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \nCramer_trayectoria <- c(Cramer_trayectoria,\nCramer_trayectoria[length(Cramer_trayectoria)]\n-c*tiempo_llegada,\n\nCramer_trayectoria[length(Cramer_trayectoria)]-\nc*tiempo_llegada +  Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr2 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, y = ~Ct, name = \"Ganancias: G(t)\",type = \"scatter\", mode = \"lines\")\n\nfig_tr2 <- fig_tr2 %>% add_trace(x = ~Tiempo, y = u,  name = \"Capital inicial: u\", type = \"scatter\", mode = \"lines\")\nfig_tr2\n\n\n```\n\nTrayectoria de pérdidas del proceso de evolución modificado de Cramér Lundberg después de la pandemia.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r , eval=FALSE}\n\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = (0.29*u) #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)+\n             rnorm(1, mean =  39841.721 , sd= 7873.446)  + \n             rnorm(1, mean =   41751.747, sd = 5687.030) + \n             rnorm(1, mean =   43243.143, sd = 10517.841)+ \n             rnorm(1, mean = 43010.307  , sd = 7741.889 )+ \n             rnorm(1, mean = 61191.300  , sd = 7202.989) + \n             rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \ntiempo <- c(tiempo, tiempo[length(tiempo)] +\n              tiempo_llegada,tiempo[length(tiempo)] +\n              tiempo_llegada ) \nCramer_trayectoria <- c(Cramer_trayectoria,\nCramer_trayectoria[length(Cramer_trayectoria)] -\n  c*tiempo_llegada, \nCramer_trayectoria[length(Cramer_trayectoria)] -\n  c*tiempo_llegada +  Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\ndf_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% \n                                        rename(Tiempo = tiempo,\n                                        Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                              lambda_Nt,t_final)\n\n\nlibrary(plotly)\nfig_tr2 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, \n                                              y = ~Ct, \n          name = \"Ganancias: G(t)\",\n          type = \"scatter\", mode = \"lines\")\n\nfig_tr2 <- fig_tr2 %>% add_trace(x = ~Tiempo, y = u,\n        name = \"Capital inicial: u\", \n        type = \"scatter\", mode = \"lines\")\nfig_tr2\n\n\n```\n\n![Trayectoria de pérdidas del proceso de evolución modificado de Cramér Lundberg después de la pandemia](trayectoria2pdf.png){#fig-fig-trayectoria2pdf fig-align=\"left\" width=\"600\"}\n:::\n\n::: {style=\"text-align:justify\"}\nSe emplean los mismos parámetros obtenidos en el periodo de tiempo pre pandemia del modelo modificado donde se observa una completa ruina al alcanzar $17$ semanas.\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r , eval =FALSE}\nlibrary(dplyr) # libreria para poder renombrar \n# las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 17\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) \n+ rnorm(1, mean =  39841.721 , sd= 7873.446 \n    ) +  \nrnorm(1, mean =   41751.747, sd = 5687.030  ) + \nrnorm(1, mean =   43243.143, sd = 10517.841 ) + \nrnorm(1, mean = 43010.307  , sd = 7741.889 ) + \nrnorm(1, mean = 61191.300  , sd = 7202.989) + \nrnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] \n    + tiempo_llegada,tiempo[length(tiempo)]\n    + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n    Cramer_trayectoria[length(Cramer_trayectoria)]\n    - c*tiempo_llegada,\n    Cramer_trayectoria[length(Cramer_trayectoria)]-\n    c*tiempo_llegada +  Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\ndf_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                        rename(Tiempo = tiempo,\n    Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr3 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, \n                                              y = ~Ct,\n            name = \"Ganancias:G(t)\",\n            type = \"scatter\", mode = \"lines\")\n\nfig_tr3 <- fig_tr3 %>% add_trace(x = ~Tiempo, y = u,\n           name = \"Capital inicial:u\", \n           type = \"scatter\", mode = \"lines\")\nfig_tr3\n```\n\n![](trayectoria3pdf.png){#fig-fig-trayectoria3pdf}\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-trayectoria3}\n```{r , eval =FALSE}\nlibrary(dplyr) # libreria para poder renombrar \n# las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 17\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) \n+ rnorm(1, mean =  39841.721 , sd= 7873.446 \n    ) +  \nrnorm(1, mean =   41751.747, sd = 5687.030  ) + \nrnorm(1, mean =   43243.143, sd = 10517.841 ) + \nrnorm(1, mean = 43010.307  , sd = 7741.889 ) + \nrnorm(1, mean = 61191.300  , sd = 7202.989) + \nrnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] \n    + tiempo_llegada,tiempo[length(tiempo)]\n    + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n    Cramer_trayectoria[length(Cramer_trayectoria)]\n    - c*tiempo_llegada,\n    Cramer_trayectoria[length(Cramer_trayectoria)]-\n    c*tiempo_llegada +  Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\ndf_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                        rename(Tiempo = tiempo,\n    Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr3 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, \n                   y = ~Ct, \n                   name = \"Ganancias:G(t)\",\n                   type = \"scatter\", mode = \"lines\")\n\nfig_tr3 <- fig_tr3 %>% add_trace(x = ~Tiempo, y = u,\n           name = \"Capital inicial:u\", \n           type = \"scatter\", mode = \"lines\")\nfig_tr3\n\n\n```\n:::\n:::\n\n::: {style=\"text-align:justify\"}\nLa evolución del proceso de pérdidas en el modelo modificado de Cramér-Lundberg proporciona una herramienta más precisa y adaptable para predecir y contrarrestar los impactos financieros negativos de la empresa.\n\nSe incorpora un factor adicional y ajuste que mejoran la simulación del modelo, mediante la modificación del parámetro $c$, reduciendo un $17\\%$ presentándose así los resultados siguientes mediante el siguiente código.\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-trayectoria4}\n```{r , echo = TRUE, message=FALSE}\n\nlibrary(dplyr) # libreria para poder renombrar \n# las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = (0.29*u)*(0.83) #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    \n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) + \n            rnorm(1, mean =  39841.721 , sd= 7873.446) +  \n            rnorm(1, mean =   41751.747, sd = 5687.030) + \n            rnorm(1, mean =   43243.143, sd = 10517.841) + \n            rnorm(1, mean = 43010.307  , sd = 7741.889) + \n            rnorm(1, mean = 61191.300  , sd = 7202.989) + \n            rnorm(1, mean =  85684.058 , sd = 8371.359 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + \n                tiempo_llegada,tiempo[length(tiempo)] + \n                tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]-\n                            c*tiempo_llegada, \n                            Cramer_trayectoria[length(Cramer_trayectoria)]- \n                            c*tiempo_llegada + Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename\n                                             (Tiempo = tiempo, \n                                               Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr4 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, \n                   y = ~Ct, \n         name = \"Ganancias: G(t)\",type = \"scatter\", mode = \"lines\")\n\nfig_tr4 <- fig_tr4 %>% add_trace(x = ~Tiempo, y = u,\n           name = \"Capital inicial:u\", type = \"scatter\", mode = \"lines\")\nfig_tr4\n\n```\n\nTrayectoria del proceso de pérdidas generadas por el modelo modificado de Cramér Lundberg después de la pandemia con una reducción de los costos al $17 \\%$.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r , eval=FALSE}\n\nlibrary(dplyr) # libreria para poder renombrar \n# las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = (0.29*u)*(0.83) #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    \n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) + \n            rnorm(1, mean =  39841.721 , sd= 7873.446) +  \n            rnorm(1, mean =   41751.747, sd = 5687.030) + \n            rnorm(1, mean =   43243.143, sd = 10517.841) + \n            rnorm(1, mean = 43010.307  , sd = 7741.889) + \n            rnorm(1, mean = 61191.300  , sd = 7202.989) + \n            rnorm(1, mean =  85684.058 , sd = 8371.359 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + \n                tiempo_llegada,tiempo[length(tiempo)] + \n                tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                    Cramer_trayectoria[length(Cramer_trayectoria)]-\n                          c*tiempo_llegada, \n                    Cramer_trayectoria[length(Cramer_trayectoria)]- \n                            c*tiempo_llegada + Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% \n                                          rename(Tiempo = tiempo, \n                                          Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr4 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, \n                   y = ~Ct, \n         name = \"Ganancias: G(t)\",\n         type = \"scatter\", mode = \"lines\")\n\nfig_tr4 <- fig_tr4 %>% add_trace(x = ~Tiempo, y = u,\n        name = \"Capital inicial: u\", \n        type = \"scatter\", mode = \"lines\")\nfig_tr4\n\n\n```\n\n![Trayectoria del proceso de pérdidas generadas por el modelo de Cramér Lundberg después de la pandemia con una reducción de los costos al 17%.](trayectoria4pdf.png){fig-align=\"center\"}\n:::\n\n#### Probabilidad de ruina\n\n::: {style=\"text-align:justify\"}\nAl igual que para el caso con los datos antes de la pandemia se analizó la semana en el que $G(t)\\leq u$ y cuando $G(t)\\leq0$, haciendo la comparación con la tasa de interés de $0.8$ anual en una cuenta de ahorro para una inversión del capital inicial $u$, para este periodo tomamos $t = 14$, es decir los datos registrados hasta las $14$ semanas después de pandemia donde la tasa es de $0.0233$\n\nEl código para calcular la probabilidad de las ganancias finales bajas es el siguiente:\n:::\n\n```{r, eval= FALSE, message=FALSE}\nlibrary(dplyr) # librería para poder renombrar las \n# cabeceras de los dataframes\n\n#Parámetros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\nmu = 1 #tiempos entrellegadas constantes\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) \n#Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075   ) \n              + rnorm(1, mean =  39841.721 , sd= 7873.446  ) \n              + rnorm(1, mean =   41751.747, sd = 5687.030 ) \n              + rnorm(1, mean =   43243.143, sd = 10517.841) \n              + rnorm(1, mean = 43010.307  , sd = 7741.889 ) \n              + rnorm(1, mean = 61191.300  , sd = 7202.989 ) \n              + rnorm(1, mean =  85684.058 , sd = 8371.359)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + \n                  tiempo_llegada,tiempo[length(tiempo)]+ \n                  tiempo_llegada) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n    Cramer_trayectoria[length(Cramer_trayectoria)] - \n      c*tiempo_llegada, \n    Cramer_trayectoria[length(Cramer_trayectoria)]- \n      c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n# 1.08*u es la ganancia inferior a la de un tasa de \n# un título financiero  para el año 2018\n  \n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < (1 + (14*0.08)/48)*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% \n                                  rename(Tiempo = tiempo,\n                                         Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_baja_ganancia_post_pandemia <- replicate(n_replicaciones,\n                          trayectoria_CLt_post_pandemia(u, c, \n                                         lambda_Nt, t_final)[2])\nr_baja_ganancia_post_pandemia \nprob_baja_ganancia_post_pandemia <- sum(r_baja_ganancia_post_pandemia >0)/\nn_replicaciones\nprob_baja_ganancia_post_pandemia\n```\n\n```{r, echo = FALSE, message=FALSE}\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo , media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) #Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  # 1.08*u es la ganancia inferior a la de un tasa de un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_baja_ganancia_post_pandemia <- replicate(n_replicaciones, trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[2])\n#r_baja_ganancia_post_pandemia \nprob_baja_ganancia_post_pandemia <- sum(r_baja_ganancia_post_pandemia >0)/n_replicaciones\n```\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align:justify\"}\nClaramente la probabilidad de las ganancias bajas de la evolución de $G(t)$ después de la pandemia sea $1$, pues como se muestra en la gráfica (@fig-trayectoria) #fig-trayectoriatodas las ventas registradas están por debajo del capital inicial\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align:justify\"}\nClaramente la probabilidad de las ganancias bajas de la evolución de $G(t)$ después de la pandemia sea $1$, pues como se muestra en la @fig-fig-trayectoria2pdf todas las ventas registradas están por debajo del capital inicial\n:::\n:::\n\n```{r, echo=FALSE}\nprob_baja_ganancia_post_pandemia\n```\n\nEl código para calcular la probabilidad de las ganancias finales bajas durante las $17$ semanas es el siguiente:\n\n```{r, echo = TRUE, message=FALSE}\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 17\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo ,\n#media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) \n#Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)+ \n              rnorm(1, mean =  39841.721 , sd= 7873.446) + \n              rnorm(1, mean =   41751.747, sd = 5687.030)+ \n              rnorm(1, mean =   43243.143, sd = 10517.841)+ \n              rnorm(1, mean = 43010.307  , sd = 7741.889)+ \n              rnorm(1, mean = 61191.300  , sd = 7202.989)+ \n              rnorm(1, mean =  85684.058 , sd = 8371.359 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)]+ \n                  tiempo_llegada,tiempo[length(tiempo)]+ \n                  tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                      Cramer_trayectoria[length(Cramer_trayectoria)]-\n                      c*tiempo_llegada, \n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                      c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n# 1.08*u es la ganancia inferior a la de un tasa de \n# un título financieropara el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02833*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                            rename(Tiempo = tiempo, \n                                            Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_baja_ganancia_post_pandemia <- replicate(n_replicaciones, \n          trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[2])\n#r_baja_ganancia_post_pandemia \nprob_baja_ganancia_post_pandemia <- sum(r_baja_ganancia_post_pandemia >0)/\nn_replicaciones\nprob_baja_ganancia_post_pandemia\n```\n\n::: {style=\"text-align:justify\"}\nEl código para calcular la probabilidad de ruina es el siguiente:\n:::\n\n```{r, eval = FALSE, message=FALSE}\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo , \n#media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) \n#Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)  +\n               rnorm(1, mean =  39841.721 , sd= 7873.446 ) + \n               rnorm(1, mean =   41751.747, sd = 5687.030) + \n               rnorm(1, mean =   43243.143, sd = 10517.841)+ \n               rnorm(1, mean = 43010.307  , sd = 7741.889 )+\n               rnorm(1, mean = 61191.300  , sd = 7202.989) +\n               rnorm(1, mean =  85684.058 , sd = 8371.359 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] +\n                  tiempo_llegada,tiempo[length(tiempo)] + \n                  tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                       Cramer_trayectoria[length(Cramer_trayectoria)]-\n                          c*tiempo_llegada, \n                       Cramer_trayectoria[length(Cramer_trayectoria)]-\n                         c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n# 1.08*u es la ganancia inferior a la de un tasa de \n# un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% \n                                  rename(Tiempo = tiempo, \n                                  Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_ruina_post_pandemia <- replicate(n_replicaciones,\n          trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])\n#r_ruina_post_pandemia\nprob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/\nn_replicaciones\nprob_ruin_post_pandemia\n\n```\n\n::: {style=\"text-align:justify\"}\nLo que significa que a pesar de que las ganancias sean todas menores al capital inicial, en todas la simulaciones, nunca se presenta una que sea menor que cero.\n:::\n\n```{r, echo = FALSE, message=FALSE}\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo , media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) #Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  # 1.08*u es la ganancia inferior a la de un tasa de un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% \n                                  rename(Tiempo = tiempo, \n                                         Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_ruina_post_pandemia <- replicate(n_replicaciones,\n        trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])\n#r_ruina_post_pandemia\nprob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/n_replicaciones\nprob_ruin_post_pandemia\n\n```\n\n::: {style=\"text-align:justify\"}\nEl código para calcular la probabilidad de ruina durante las $17$ semanas es el siguiente:\n:::\n\n```{r, echo = TRUE, message=FALSE}\nlibrary(dplyr) # libreria para poder renombrar \n#las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 17\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo , \n#media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) \n# Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)  + \n               rnorm(1, mean =  39841.721 , sd= 7873.446)  +  \n               rnorm(1, mean =   41751.747, sd = 5687.030) + \n               rnorm(1, mean =   43243.143, sd = 10517.841)+ \n               rnorm(1, mean = 43010.307  , sd = 7741.889) + \n               rnorm(1, mean =  85684.058 , sd = 8371.359)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + \n                  tiempo_llegada,tiempo[length(tiempo)] + \n                  tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                      Cramer_trayectoria[length(Cramer_trayectoria)]-\n                      c*tiempo_llegada, \n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                      c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n# 1.08*u es la ganancia inferior a la de \n# un tasa de un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02833*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% \n                                  rename(Tiempo = tiempo, \n                                         Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,\n                                            lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_ruina_post_pandemia <- replicate(n_replicaciones,\n                          trayectoria_CLt_post_pandemia(u, c, \n                                          lambda_Nt, t_final)[1])\n#r_ruina_post_pandemia\nprob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/\nn_replicaciones\nprob_ruin_post_pandemia\n\n```\n\n#### Análisis de sensibilidad\n\n::: {style=\"text-align:justify\"}\nModificando los parámetros $u$ y $c$ para erl periodo pso-pandemia del modelo modificado y estableciendo los rangos o valores posibles para cada uno de los ciertos parámetros, se presenta el análisis de sensibilidad durante las semanas registradas después de la pandemia que fueron $14$,. Se toman la mediana de las $100$ simulaciones de la ganancia final de la semana obtenida por el modelo, es decir la venta registrada en la última semana de los datos registrados.\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo = TRUE, message=FALSE}\n\nlibrary(dplyr) # librería para poder renombrar \n# las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c = 0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) + \n              rnorm(1, mean =  39841.721 , sd= 7873.446)  +  \n              rnorm(1, mean =   41751.747, sd = 5687.030) + \n              rnorm(1, mean =   43243.143, sd = 10517.841)+ \n              rnorm(1, mean = 43010.307  , sd = 7741.889) + \n              rnorm(1, mean = 61191.300  , sd = 7202.989) + \n              rnorm(1, mean =  85684.058 , sd = 8371.359)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] \n                + tiempo_llegada,tiempo[length(tiempo)] \n                + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                        c*tiempo_llegada, \n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                       c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n    {\n      ruina = 1\n    }\n    else\n    {\n      ruina = 0\n    }\n  }\n  df_post_pandemia<- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                  rename(Tiempo = tiempo, \n                                         Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia$Ct[length\n                                (df_trayectoria_post_pandemia$Ct)])\n}\n\n# La función generador_mediana nos calcula la mediana de \n# las ganancias finales de 100 trayectorias, \n# fijando el u= surplus y el c\ngenerador_mediana_post_pandemia<- function(ui,cj)\n  {\n  ganancia_final_replicas_post_pandemia <- replicate(100,\n           trayectoria_CLt_post_pandemia(u, c,lambda_Nt, t_final))\n    return( median(ganancia_final_replicas_post_pandemia))\n  }\n# Se crea la rejilla donde se hace el analisis de sensibilidad\n# para diferentes valores de u y c\ngrid_u_post_pandemia <- seq(from = (u-100000*4), \n                            to = (u+100000*4), \n                            by = 100000)\ngrid_c_post_pandemia <- seq(from = (decimal_c-0.01*4), \n                            to = (decimal_c+0.01*4), \n                            by = 0.01)\nu_t <- grid_u_post_pandemia\nmatriz_mediana_post_pandemia <- matrix(rep(0, \n      length(grid_u_post_pandemia)*length(grid_c_post_pandemia)),\n      nrow= length(grid_u_post_pandemia), \n      ncol= length(grid_c_post_pandemia))\n\nG_t <- matriz_mediana_post_pandemia\n\nfor (i in 1:length(u_t)) \n{\n  for (j in 1:length(grid_c_post_pandemia)) \n  {\n    G_t[i,j] <- generador_mediana_post_pandemia(u_t[i], \n                                  grid_c_post_pandemia[j]*u_t[i])\n  }\n} \n# matriz_mediana_post_pandemia  \n# Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- u_t*grid_c_post_pandemia\nfig2 <- plot_ly(\n  type = 'surface',\n  contours = list(x = list(show = TRUE, start = u_t[1], \n                  end = grid_u_post_pandemia[length(u_t)], \n                  size =100000 , color = 'black'),\n                  z = list(show = TRUE, start = G_t[1], \n                  end = G_t[length(G_t)], \n                  size = 0.01*100000)),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\nfig2 <- fig2 %>% layout(\n    scene = list(\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 4),\n    camera = list(eye = list(x = 0, \n                             y = -1, \n                             z = 1)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\nfig2\n\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval = FALSE, message=FALSE}\n\nlibrary(dplyr) # libreria para poder renombrar \n# las cabeceras de los dataframes\n\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) + \n              rnorm(1, mean =  39841.721 , sd= 7873.446)  +  \n              rnorm(1, mean =   41751.747, sd = 5687.030) + \n              rnorm(1, mean =   43243.143, sd = 10517.841)+ \n              rnorm(1, mean = 43010.307  , sd = 7741.889) + \n              rnorm(1, mean = 61191.300  , sd = 7202.989) + \n              rnorm(1, mean =  85684.058 , sd = 8371.359)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] \n                + tiempo_llegada,tiempo[length(tiempo)] \n                + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                        c*tiempo_llegada, \n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                       c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n    {\n      ruina = 1\n    }\n    else\n    {\n      ruina = 0\n    }\n  }\n  df_post_pandemia<- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                  rename(Tiempo = tiempo, \n                                         Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia$Ct[length\n                                (df_trayectoria_post_pandemia$Ct)])\n}\n\n# La función generador_mediana nos calcula la mediana de \n# las ganancias finales de 100 trayectorias, \n# fijando el u= surplus y el c\ngenerador_mediana_post_pandemia<- function(ui,cj)\n  {\n  ganancia_final_replicas_post_pandemia <- replicate(100,\n           trayectoria_CLt_post_pandemia(u, c,lambda_Nt, t_final))\n    return( median(ganancia_final_replicas_post_pandemia))\n  }\n# Se crea la rejilla donde se hace el analisis de sensibilidad\n# para diferentes valores de u y c\ngrid_u_post_pandemia <- seq(from = (u-100000*4), \n                            to = (u+100000*4), \n                            by = 100000)\ngrid_c_post_pandemia <- seq(from = (decimal_c-0.01*4), \n                            to = (decimal_c+0.01*4), \n                            by = 0.01)\nu_t <- grid_u_post_pandemia\nmatriz_mediana_post_pandemia <- matrix(rep(0, \n      length(grid_u_post_pandemia)*length(grid_c_post_pandemia)),\n      nrow= length(grid_u_post_pandemia), \n      ncol= length(grid_c_post_pandemia))\n\nG_t <- matriz_mediana_post_pandemia\n\nfor (i in 1:length(u_t)) \n{\n  for (j in 1:length(grid_c_post_pandemia)) \n  {\n    G_t[i,j] <- generador_mediana_post_pandemia(u_t[i], \n                                  grid_c_post_pandemia[j]*u_t[i])\n  }\n}  \n# matriz_mediana_post_pandemia  \n# Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- u_t*grid_c_post_pandemia\nfig2 <- plot_ly(\n  type = 'surface',\n  contours = list(x = list(show = TRUE, start = u_t[1], \n                  end = grid_u_post_pandemia[length(u_t)], \n                  size =100000 , color = 'black'),\n                  z = list(show = TRUE, start = G_t[1], \n                  end = G_t[length(G_t)], \n                  size = 0.01*100000)),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\nfig2 <- fig2 %>% layout(\n    scene = list(\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 4),\n    camera = list(eye = list(x = 0, \n                             y = -1, \n                             z = 1)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\nfig2\n\n\n```\n:::\n\n![](fig-analisis2pdf.png){fig-align=\"center\" width=\"600\"}\n\n::: {style=\"text-align:justify\"}\nSe presenta también el análisis de sensibilidad para $t = 19$, debido a que en $19$ semanas se presenta el caso donde se pueden registrar ventas por debajo del cero, es decir, casos donde $G(t)\\leq0$.\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo=TRUE, message=FALSE, warning=FALSE}\n\n\nlibrary(dplyr) # libreria para poder \n# renombrar las cabeceras de los dataframes\n\n# Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n# Es un estimado a partir de la media de las ganancias por semana, \n# multiplicado por 10/3, \n# siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 19\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n# donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n# CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n# Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) + \n              rnorm(1, mean =  39841.721 , sd= 7873.446)  +  \n              rnorm(1, mean =   41751.747, sd = 5687.030) + \n              rnorm(1, mean =   43243.143, sd = 10517.841)+ \n              rnorm(1, mean = 43010.307  , sd = 7741.889) + \n              rnorm(1, mean = 61191.300  , sd = 7202.989) + \n              rnorm(1, mean =  85684.058 , sd = 8371.359)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] \n                + tiempo_llegada,tiempo[length(tiempo)] \n                + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                        c*tiempo_llegada, \n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                       c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n    {\n      ruina = 1\n    }\n    else\n    {\n      ruina = 0\n    }\n  }\n  df_post_pandemia<- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                  rename(Tiempo = tiempo, \n                                         Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia$Ct[length\n                                (df_trayectoria_post_pandemia$Ct)])\n}\n\n# La función generador_mediana nos calcula la mediana de \n# las ganancias finales de 100 trayectorias, \n# fijando el u= surplus y el c\ngenerador_mediana_post_pandemia<- function(ui,cj)\n  {\n  ganancia_final_replicas_post_pandemia <- replicate(100,\n           trayectoria_CLt_post_pandemia(u, c,lambda_Nt, t_final))\n    return( median(ganancia_final_replicas_post_pandemia))\n  }\n# Se crea la rejilla donde se hace el analisis de sensibilidad\n# para diferentes valores de u y c\ngrid_u_post_pandemia <- seq(from = (u-100000*4), \n                            to = (u+100000*4), \n                            by = 100000)\ngrid_c_post_pandemia <- seq(from = (decimal_c-0.01*4), \n                            to = (decimal_c+0.01*4), \n                            by = 0.01)\nu_t <- grid_u_post_pandemia\nmatriz_mediana_post_pandemia <- matrix(rep(0, \n      length(grid_u_post_pandemia)*length(grid_c_post_pandemia)),\n      nrow= length(grid_u_post_pandemia), \n      ncol= length(grid_c_post_pandemia))\n\nG_t <- matriz_mediana_post_pandemia\n\nfor (i in 1:length(u_t)) \n{\n  for (j in 1:length(grid_c_post_pandemia)) \n  {\n    G_t[i,j] <- generador_mediana_post_pandemia(u_t[i], \n                                  grid_c_post_pandemia[j]*u_t[i])\n  }\n} \n\n#Grafica del ánalisis de sensibilidad\n#Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- grid_u_post_pandemia*grid_c_post_pandemia\n\nz1<- matrix(rep(0,\nlength(grid_u_post_pandemia)*length(grid_c_post_pandemia)), nrow=\nlength(grid_u_post_pandemia), ncol= length(grid_c_post_pandemia))\n\nz2<- matrix(rep(u,\nlength(grid_u_post_pandemia)*length(grid_c_post_pandemia)), nrow=\nlength(grid_u_post_pandemia), ncol= length(grid_c_post_pandemia))\n\nfig3 <- plot_ly(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], end =\nu_t[length(u_t)], size =100000 ,\ncolor = 'black'),\n    z = list(show = TRUE, start = G_t[1], \n             end = G_t[length(G_t)], size =0.01*100000 , \n             color = 'white')),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\n\nfig3 <- fig3%>% add_surface(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], \n             end = u_t[length(u_t)], size =100000 ,\n             color = 'black'),\n    y = list(show = TRUE, start = c_t[1], \n             end = c_t[length(c_t)], \n             size = 0.01*100000 , color = 'red')),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~z1)\n\nfig3 <- fig3 %>% layout(\n  scene = list(\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 4),\n    camera = list(eye = list(x = 0, y = -1, z = 1)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\n\nfig3\n\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, eval=FALSE, message=FALSE, warning=FALSE}\n\n\nlibrary(dplyr) # libreria para poder \n# renombrar las cabeceras de los dataframes\n\n# Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n# Es un estimado a partir de la media de las ganancias por semana, \n# multiplicado por 10/3, \n# siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 19\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n# donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n# CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n# Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) + \n              rnorm(1, mean =  39841.721 , sd= 7873.446)  +  \n              rnorm(1, mean =   41751.747, sd = 5687.030) + \n              rnorm(1, mean =   43243.143, sd = 10517.841)+ \n              rnorm(1, mean = 43010.307  , sd = 7741.889) + \n              rnorm(1, mean = 61191.300  , sd = 7202.989) + \n              rnorm(1, mean =  85684.058 , sd = 8371.359)) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] \n                + tiempo_llegada,tiempo[length(tiempo)] \n                + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                        c*tiempo_llegada, \n                      Cramer_trayectoria[length(Cramer_trayectoria)]- \n                       c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n    {\n      ruina = 1\n    }\n    else\n    {\n      ruina = 0\n    }\n  }\n  df_post_pandemia<- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%\n                                  rename(Tiempo = tiempo, \n                                         Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia$Ct[length\n                                (df_trayectoria_post_pandemia$Ct)])\n}\n\n# La función generador_mediana nos calcula la mediana de \n# las ganancias finales de 100 trayectorias, \n# fijando el u= surplus y el c\ngenerador_mediana_post_pandemia<- function(ui,cj)\n  {\n  ganancia_final_replicas_post_pandemia <- replicate(100,\n           trayectoria_CLt_post_pandemia(u, c,lambda_Nt, t_final))\n    return( median(ganancia_final_replicas_post_pandemia))\n  }\n# Se crea la rejilla donde se hace el analisis de sensibilidad\n# para diferentes valores de u y c\ngrid_u_post_pandemia <- seq(from = (u-100000*4), \n                            to = (u+100000*4), \n                            by = 100000)\ngrid_c_post_pandemia <- seq(from = (decimal_c-0.01*4), \n                            to = (decimal_c+0.01*4), \n                            by = 0.01)\nu_t <- grid_u_post_pandemia\nmatriz_mediana_post_pandemia <- matrix(rep(0, \n      length(grid_u_post_pandemia)*length(grid_c_post_pandemia)),\n      nrow= length(grid_u_post_pandemia), \n      ncol= length(grid_c_post_pandemia))\n\nG_t <- matriz_mediana_post_pandemia\n\nfor (i in 1:length(u_t)) \n{\n  for (j in 1:length(grid_c_post_pandemia)) \n  {\n    G_t[i,j] <- generador_mediana_post_pandemia(u_t[i], \n                                  grid_c_post_pandemia[j]*u_t[i])\n  }\n} \n\n#Grafica del ánalisis de sensibilidad\n#Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- grid_u_post_pandemia*grid_c_post_pandemia\n\nz1<- matrix(rep(0,\nlength(grid_u_post_pandemia)*length(grid_c_post_pandemia)), nrow=\nlength(grid_u_post_pandemia), ncol= length(grid_c_post_pandemia))\n\nz2<- matrix(rep(u,\nlength(grid_u_post_pandemia)*length(grid_c_post_pandemia)), nrow=\nlength(grid_u_post_pandemia), ncol= length(grid_c_post_pandemia))\n\nfig3 <- plot_ly(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], end =\nu_t[length(u_t)], size =100000 ,\ncolor = 'black'),\n    z = list(show = TRUE, start = G_t[1], \n             end = G_t[length(G_t)], size =0.01*100000 , \n             color = 'white')),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\n\nfig3 <- fig3%>% add_surface(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], \n             end = u_t[length(u_t)], size =100000 ,\n             color = 'black'),\n    y = list(show = TRUE, start = c_t[1], \n             end = c_t[length(c_t)], \n             size = 0.01*100000 , color = 'red')),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~z1)\n\nfig3 <- fig3 %>% layout(\n  scene = list(\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 4),\n    camera = list(eye = list(x = 0, y = -1, z = 1)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\n\nfig3\n\n```\n\n![](fig-analisis3pdf.png){fig-align=\"center\" width=\"600\"}\n:::\n\n## Análisis de resultados y recomendaciones.\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align:justify\"}\nCon los datos registrados de $90$ semanas antes de pandemia en el modelo modificado (@eq-4.1) se obtiene un crecimiento positivo de las ganancias simuladas, en particular mayor que el capital inicial, es decir la probabilidad del evento donde $G(t)\\geq u$ es positiva, con $t=90$, como se puede observar en la imagen (@fig-trayectoria), por lo que en el intervalo de tiempo en el que se estudia la empresa generaría siempre ganancias positivas y se lograría suplir la deuda e incluso pensar en implementar más equipos inmobiliarios.\n\nMientras que después de la pandemia, se puede argumentar con base en las observaciones de las $14$ semanas de las ventas registradas, usando los mismos parámetros obtenidos para los datos antes de la pandemia implementados, las ganancias son bajas como se muestra en la imagen (@fig-trayectoria2). Aquí se observa que la simulación de las ganancias son menores que el capital inicial y al dar seguimiento en el intervalo de tiempo con los datos registrados después de pandemiahasta la semana $17$ se observa que las ganancias son menores que cero, por lo que se puede concluir que se llega a una ruina total, como se muestra el caso en la imagen (@fig-trayectoria3).\n\nAnalizando el caso en el que se modificara los parámetros de los costos del modelo (@eq-4.1), se concluye que al calibrar el parámetro $c$, este se puede reducir a un $17 \\%$ para cuando $t=14$, es decir, al final de la semana $14$ puede evitarse la perdida total de las ganancias que son mayores que el capital inicial, como se observa en la figura (@fig-trayectoria4).\n\nComo $c$, es el parámetro de los pagos que incluye el pago por la adquisición de la franquicia, compras de equipos inmobiliarios, pagos de empleados y prestamos, el anterior análisis quiere decir que se necesita un recorte de personal del $17 \\%$ como mínimo y una reestructuración financiera del capital pendiente por pagar, haciendo los pagos más pequeños a un tiempo extendido, con el fin de la funcionalidad del negocio durante este proceso pandemico y evitar el cierre de quiebra.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align:justify\"}\nCon los datos registrados de $90$ semanas antes de pandemia en el modelo modificado (@eq-4.1pdf) se obtiene un crecimiento positivo de las ganancias simuladas, en particular mayor que el capital inicial, es decir la probabilidad del evento donde $G(t)\\geq u$ es positiva, con $t=90$, como se puede observar en la imagen (@fig-fig-trayectoriapdf), por lo que en el intervalo de tiempo en el que se estudia la empresa generaría siempre ganancias positivas y se lograría suplir la deuda e incluso pensar en implementar más equipos inmobiliarios.\n\nMientras que después de la pandemia, se puede argumentar con base en las observaciones de las $14$ semanas de las ventas registradas, usando los mismos parámetros obtenidos para los datos antes de la pandemia implementados, las ganancias son bajas como se muestra en la imagen (@fig-fig-trayectoria2pdf). Aquí se observa que la simulación de las ganancias son menores que el capital inicial y al dar seguimiento en el intervalo de tiempo con los datos registrados después de pandemia hasta la semana $17$ se observa que las ganancias son menores que cero, por lo que se puede concluir que se llega a una ruina total, como se muestra el caso en la imagen (@fig-fig-trayectoria3pdf).\n\nAnalizando el caso en el que se modifica los parámetros de los costos del modelo (@eq-4.1pdf) , se concluye que al calibrar el parámetro $c$, este se puede reducir a un $17 \\%$ para cuando $t=14$, es decir, al final de la semana $14$ puede evitarse la perdida total de las ganancias que son mayores que el capital inicial, como se observa en la figura (@fig-fig-trayectoria4pdf).\n\nComo $c$, es el parámetro de los pagos que incluye el pago de la adquisición de la franquicia, compras de equipos inmobiliarios, pagos de empleados y prestamos, el anterior análisis quiere decir que se necesita un recorte de personal del $17 \\%$ como mínimo y una reestructuración financiera del capital pendiente por pagar, haciendo los pagos más pequeños a un tiempo extendido, con el fin de la funcionalidad del negocio durante este proceso pandemico y evitar el cierre de quiebra.\n:::\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"Estudio_caso.html"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Artículo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar código fuente","notebook-preview-back":"Volver al Artículo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Apéndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilización","section-title-copyright":"Derechos de autor","section-title-citation":"Cómo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliación","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicación","title-block-modified":"Fecha de modificación","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precaución","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar todo el código","code-tools-hide-all-code":"Ocultar todo el código","code-tools-view-source":"Ver el código fuente","code-tools-source-code":"Ejecutar el código","tools-share":"Compartir","tools-download":"Descargar","code-line":"Línea","code-lines":"Líneas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta página","repo-action-links-source":"Ver el código","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la búsqueda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar sección","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegación de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposición","crossref-cnj-title":"Conjetura","crossref-def-title":"Definición","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apéndice","crossref-sec-prefix":"Sección","crossref-eq-prefix":"Ecuación","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observación","environment-solution-title":"Solución","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"Más reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"Título","listing-page-field-description":"Descripción","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificación","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categorías","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"lang":"es","fig-responsive":true,"quarto-version":"1.5.43","bibliography":["references.bib"],"editor":"visual","theme":{"dark":"darkly"},"grid":{"sidebar-width":"300px","body-width":"900px","margin-width":"300px","gutter-width":"1.5rem"},"code-copy":true},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":["packa.tex"],"output-file":"Estudio_caso.pdf"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Artículo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar código fuente","notebook-preview-back":"Volver al Artículo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Apéndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilización","section-title-copyright":"Derechos de autor","section-title-citation":"Cómo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliación","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicación","title-block-modified":"Fecha de modificación","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precaución","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar todo el código","code-tools-hide-all-code":"Ocultar todo el código","code-tools-view-source":"Ver el código fuente","code-tools-source-code":"Ejecutar el código","tools-share":"Compartir","tools-download":"Descargar","code-line":"Línea","code-lines":"Líneas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta página","repo-action-links-source":"Ver el código","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la búsqueda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar sección","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegación de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposición","crossref-cnj-title":"Conjetura","crossref-def-title":"Definición","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apéndice","crossref-sec-prefix":"Sección","crossref-eq-prefix":"Ecuación","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observación","environment-solution-title":"Solución","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"Más reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"Título","listing-page-field-description":"Descripción","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificación","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categorías","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","lang":"es","template-partials":["before-body.tex"],"documentclass":"scrreprt","papersize":"us-letter","institution":"Universidad Autónoma de Chiapas","email":"x1800999@unach.mx"},"extensions":{"book":{"selfContainedOutput":true}}},"epub":{"identifier":{"display-name":"ePub","target-format":"epub","base-format":"epub"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","html-math-method":"mathml","to":"epub","output-file":"Estudio_caso.epub"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Artículo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar código fuente","notebook-preview-back":"Volver al Artículo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Apéndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilización","section-title-copyright":"Derechos de autor","section-title-citation":"Cómo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliación","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicación","title-block-modified":"Fecha de modificación","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precaución","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar todo el código","code-tools-hide-all-code":"Ocultar todo el código","code-tools-view-source":"Ver el código fuente","code-tools-source-code":"Ejecutar el código","tools-share":"Compartir","tools-download":"Descargar","code-line":"Línea","code-lines":"Líneas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta página","repo-action-links-source":"Ver el código","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la búsqueda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar sección","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegación de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposición","crossref-cnj-title":"Conjetura","crossref-def-title":"Definición","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apéndice","crossref-sec-prefix":"Sección","crossref-eq-prefix":"Ecuación","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observación","environment-solution-title":"Solución","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"Más reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"Título","listing-page-field-description":"Descripción","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificación","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categorías","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"bibliography":["references.bib"],"editor":"visual","cover-image":"FCFM-UNACH.png","lang":"es"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf","epub"]}