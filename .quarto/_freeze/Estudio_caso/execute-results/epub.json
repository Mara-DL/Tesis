{
  "hash": "be99a343b0c649d2c04c3292a1ea8b5a",
  "result": {
    "engine": "knitr",
    "markdown": "---\nlang: es\n---\n\n\n\n# Estudio de caso: Análisis de ventas de una empresa de comida rápida\n\n## Descripción del problema\n\n::: {style=\"text-align:justify\"}\nSe presentan datos que son parte de las ventas de una empresa de comida rápida, esta empresa ofrece en sus productos dos tipos de hamburguesas, bebidas como sodas, cervezas y cafés, en la información de las ventas incluye registros obtenidos por una Terminal Punto de Venta (TPV), un dispositivo usado en establecimientos comerciales para procesar transacciones de venta. Permiten a los comerciantes aceptar pagos de tarjeta de crédito y débito. Se tiene registro de las ventas por cada día desde el año 2018 al noviembre del 2020, haciendo un cierre pandemico, por lo que se registran en dos etapas, antes de pandemia se registraron datos a partir del 25 de julio del 2018, haciendo un cierre pandemico el 10 de abril del 2020, después de pandemia se registraron los datos a partir del 3 de agosto del 2020 y cerrando finalmente el 10 de noviembre del 2020, los cuales se les aplicó una homogenización para un buen manejo de los datos y así poder presentar un mejor análisis.\n:::\n\n## Elementos de Ciencia de Datos\n\n### Importación de los datos originales a R\n\n::: {style=\"text-align:justify\"}\nSe cargan los datos del archivo excel para ser leído y almacenarlo en un dataframe para poder manipular cada uno de los elementos de la base de datos.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nDatos <- read_excel(\"~/TM/Datos.xlsx\", col_types = \n                      c(\"numeric\",\"numeric\", \"numeric\", \"numeric\", \"numeric\",\n                        \"numeric\", \"numeric\", \"numeric\", \"numeric\",\"numeric\", \n                        \"numeric\", \"numeric\", \"numeric\",\"numeric\", \"numeric\", \n                        \"numeric\", \"numeric\",\"numeric\", \"numeric\", \"numeric\", \n                        \"numeric\",\"numeric\", \"numeric\", \"numeric\", \"numeric\", \n                        \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \n                        \"numeric\", \"numeric\", \"numeric\",\"numeric\", \"numeric\", \n                        \"numeric\", \"numeric\",\"numeric\", \"numeric\", \"numeric\", \n                        \"numeric\",\"numeric\", \"numeric\", \"numeric\", \"numeric\",\n                        \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \n                        \"numeric\", \"numeric\", \"numeric\",\"numeric\", \"numeric\", \n                        \"numeric\", \"numeric\",\"numeric\", \"numeric\", \"numeric\", \n                        \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \n                        \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \n                        \"numeric\", \"numeric\", \"numeric\",   \"numeric\", \"numeric\"\n                        ))\n\nDatos\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,416 × 75\n    ...1  ...2  ...3  ...4  ...5  ...6 `240519` `82253.5` `247172.9` ...10 `973`\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>     <dbl>      <dbl> <dbl> <dbl>\n 1    NA    NA    NA    NA    NA    NA      NA        NA         NA     NA   NA \n 2    NA    NA    NA    NA    NA    NA    9382.     9441.        NA     NA 9382.\n 3  2018     7    30     4 43306    NA  188038.       NA     188038.    NA  682 \n 4  2018     7    30     5 43307    NA  220827        NA     220827     NA  694 \n 5  2018     7    30     6 43308    NA  240519        NA     240519     NA  762 \n 6  2018     7    30     7 43309    NA  229542        NA     229542     NA  704 \n 7  2018     7    30     1 43310    NA  239776.       NA     239776.    NA  706 \n 8  2018     7    31     2 43311    NA  172946        NA     172946     NA  602 \n 9  2018     7    31     3 43312    NA  210671        NA     210671     NA  709 \n10  2018     8    31     4 43313    NA  195662        NA     195662     NA  649 \n# ℹ 2,406 more rows\n# ℹ 64 more variables: `384` <dbl>, `1136` <dbl>, ...14 <dbl>,\n#   `371.753114754098` <dbl>, `2428.16666666666` <dbl>, ...17 <dbl>,\n#   ...18 <dbl>, `2099` <dbl>, `222` <dbl>, `2162` <dbl>, ...22 <dbl>,\n#   `1384...23` <dbl>, `559` <dbl>, `1384...25` <dbl>, ...26 <dbl>,\n#   `2402` <dbl>, `658` <dbl>, `2525` <dbl>, ...30 <dbl>, `1556...31` <dbl>,\n#   `462` <dbl>, `1556...33` <dbl>, ...34 <dbl>, `61` <dbl>, `57` <dbl>, …\n```\n\n\n:::\n:::\n\n\n\nSe eliminaron las columnas de las cuales no haremos utilidad y nos quedamos con las columnas de las ventas de los diferentes productos que oferta la empresa para así obtener las ventas totales.\n:::\n\n### Homogenización del total de ventas por día\n\n::: {style=\"text-align:justify\"}\nMediante este proceso se eliminan y se corrigen valores atípicos, valores faltantes o alguna inconsistencia que se presentan en los datos. Esto implica la eliminación de datos incompletos, conocidos como datos faltantes o NA. También se renombran las cabeceras de cada columna del dataframe para facilitar la lectura del archivo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Eliminamos las columnas con datos faltantes\ndatos <- Datos[, -c(6,8,10,12,14,16,18,20,22,24, 26,28, 30,32, 34, 36,\n                    38,39, 40,  42, 44, 46, 48, 50,51,52, 53, 54,55, 56, \n57,58,59,60,61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73,74,72, 75)]\n#Cambiar las cabeceras del dataframe  \ndatos <- data.frame(datos%>% rename(Año = ...1 ))\ndatos <- data.frame(datos%>% rename(Mes = ...2, Semana = ...3, Dia= ...4 , Fecha = ...5, \nVentas= X240519, TotalVentas = X247172.9,Customers = X973, Totalcustomers = X1136, \nCH_Promedio = X371.753114754098, TotalCH_Promedio = ...17, Burgers = X2099, \nTotalBurgers = X2162, Thickurgers = X1384...23, TotalThickburgers = X1384...25, \nTotal_Burgers = X2402, T_Total_Burgers= X2525, Bebidas = X1556...31, \nTotalbebidas = X1556...33, Cervezas = X61, Totalcervezas = X83, Cafes = X83, \nTotalcafes = X54, Ventas_TPV = X158904, Total_Ventas_TPV = X173412.5, HR_Laborales = ...47, \nTotal_HR_Laborales = ...49 ))\n```\n:::\n\n\n\nPor último se realizó la separación de la base de datos antes de la pandemia y después de la pandemia, presentando así los dataframes resultantes en el siguiente código:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Analisis de los datos:\n#Filtros por días:\n#_________________________________Antes de la pandemia_____________________________________\nfil_before1<- data.frame(subset(datos, Año <= 2019))\nfil_before2<- data.frame(subset(datos, Año == 2020 & Mes <= 4))\nfil_before <- rbind(fil_before1, fil_before2)\n\n#________________________Después de la pandemia__________________________________\n\nfil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8))\n```\n:::\n\n\n:::\n\n### DataFrame Resultante: Antes de la pandemia\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-5-1.png)\n:::\n:::\n\n\n\n### DataFrame Resultante: Después de la pandemia\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-6-1.png)\n:::\n:::\n\n\n\n::: {style=\"text-align:justify\"}\nPara realizar la identificación de las diferentes distribuciones e implementar los gráficos como los histogramas y los boxplot, se elaboran filtros correspondientes para las ventas por cada día antes y después de pandemia\n\nLos comandos para realizar los filtros es el siguiente:\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#filtra los datos del día Domingo antes de la pandemia\nfil_dat_1_before<- data.frame(subset(fil_before, Dia == 1))\n#_______________________________________________________________________\n#filtra los datos del día Lunes antes de la pandemia\nfil_dat_2_before<- data.frame(subset(fil_before, Dia == 2))\n#_________________________________________________________________________\n#filtra los datos del día martes antes de la pandemia\nfil_dat_3_before<- data.frame(subset(fil_before, Dia == 3))\n#______________________________________________________________________\n#filtra los datos del día miércoles antes de la pandemia\nfil_dat_4_before<- data.frame(subset(fil_before, Dia == 4))\n#___________________________________________________________\n#filtra los datos del día Jueves antes de la pandemia\nfil_dat_5_before<- data.frame(subset(fil_before, Dia == 5))\n#___________________________________________________________\n#filtra los datos del día Viernes antes de la pandemia\nfil_dat_6_before<- data.frame(subset(fil_before, Dia == 6))\n#___________________________________________________________\n#filtra los datos del día Sábado antes de la pandemia\nfil_dat_7_before<- data.frame(subset(fil_before, Dia == 7))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#________________________Después de la pandemia_________________________\nfil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8))\n#filtra los datos del día domingo despues de la pandemia\nfil_dat_1_after<- data.frame(subset(datos, Año == 2020 & Mes >= 8 & Dia==1))\n\n\n#filtra los datos del día lunes despues de la pandemia\nfil_dat_2_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==2))\n#__________________________________________________________\n#filtra los datos del día martes despues de la pandemia\nfil_dat_3_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==3))\n#___________________________________________________________\n#filtra los datos del día miércoles despues de la pandemia\nfil_dat_4_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==4))\n#___________________________________________________________\n#filtra los datos del día jueves despues de la pandemia\nfil_dat_5_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==5))\n#___________________________________________________________\n#filtra los datos del día viernes despues de la pandemia\nfil_dat_6_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==6))\n#___________________________________________________________\n#filtra los datos del día sábado despues de la pandemia\nfil_dat_7_after<- data.frame(subset(datos,Año == 2020 & Mes >= 8 & Dia ==7))\n```\n:::\n\n\n\n::: {style=\"text-align:justify\"}\nPara visualizar gráficamente el comportamiento de las ventas por día, a continuación se construyen los histogramas por día, en el periodo antes y después de la pandemia\n:::\n\n### Análisis gráfico de las ventas por día:\n\n::: {style=\"text-align:justify\"}\nPara la generación de los gráficos se empleó los filtros anteriores, con el fin de obtener un análisis descriptivo de cada uno de ellos.\n:::\n\n#### Histogramas de los datos de ventas por día antes de la pandemia\n\n::: {style=\"text-align:justify\"}\nEl código que genera estos histogramas en R es el siguiente:\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-his1}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# muestra el gráfico de todos los histogramas de ventas por día antes de la pandemia\npar(mar=c(2,2,2,2))\npar(mfrow =c(3,3))\nhist(fil_dat_1_before$Ventas, main = \"Ventas día Domingo\", xlab = \"Ventas\")\nhist(fil_dat_2_before$Ventas, main = \"Ventas día Lunes\", xlab = \"Ventas\")\nhist(fil_dat_3_before$Ventas, main = \"Ventas día Martes\", xlab = \"Ventas\")\nhist(fil_dat_4_before$Ventas, main = \"Ventas día Miércoles\", xlab = \"Ventas\")\nhist(fil_dat_5_before$Ventas, main = \"Ventas día Jueves\", xlab = \"Ventas\")\nhist(fil_dat_6_before$Ventas, main = \"Ventas día Viernes\", xlab = \"Ventas\")\nhist(fil_dat_7_before$Ventas, main = \"Ventas día Sábado\", xlab = \"Ventas\")\n```\n\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-9-1.png)\n:::\n:::\n\n\n\nHistogramas de las ventas por día antes de la pandemia\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# muestra el gráfico de todos los histogramas de ventas por día antes de la pandemia\n\npar(mfrow =c(3,3))\nhist(fil_dat_1_before$Ventas, main = \"Ventas día Domingo\", xlab = \"Ventas\")\nhist(fil_dat_2_before$Ventas, main = \"Ventas día Lunes\", xlab = \"Ventas\")\nhist(fil_dat_3_before$Ventas, main = \"Ventas día Martes\", xlab = \"Ventas\")\nhist(fil_dat_4_before$Ventas, main = \"Ventas día Miércoles\", xlab = \"Ventas\")\nhist(fil_dat_5_before$Ventas, main = \"Ventas día Jueves\", xlab = \"Ventas\")\nhist(fil_dat_6_before$Ventas, main = \"Ventas día Viernes\", xlab = \"Ventas\")\nhist(fil_dat_7_before$Ventas, main = \"Ventas día Sábado\", xlab = \"Ventas\")\n```\n:::\n\n\n\n![Histogramas de las ventas por día antes de la pandemia](his_1.png)\n:::\n\n::: {style=\"text-align:justify\"}\nPara indagar el comportamiento periódico de las ventas, se presenta ahora los boxplot de las ventas por día.\n:::\n\n#### Boxplot de datos de ventas por días antes de la pandemia\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  30977  122963  135498  138498  158347  239776 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   7430   35919   48676   57388   68030  172946 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  12950   35210   44398   53367   56624  219702 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10832   35847   44213   56365   63585  195662 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  13547   42368   49479   61068   70047  220827 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10331   65730   79464   86514   96522  240519 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24219  100751  110603  119332  135176  229542 \n```\n\n\n:::\n:::\n\n\n\n::: {style=\"text-align:justify\"}\nEl código que genera en R los boxplot es el siguiente:\n:::\n\n::: {#fig-box1}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# muestra el gráfico de todos los boxplot de ventas por día antes de la pandemia \nfig <- plot_ly(y =fil_dat_1_before$Ventas, name = \"Ventas día Domingo\", boxpoints = \"all\",type = \"box\", )\nfig <- fig %>% add_trace(y = fil_dat_2_before$Ventas,  name = \"Ventas día Lunes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_3_before$Ventas,  name = \"Ventas día Martes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_4_before$Ventas,  name = \"Ventas día Miércoles\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_5_before$Ventas,  name = \"Ventas día Jueves\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_6_before$Ventas,  name = \"Ventas día Viernes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_7_before$Ventas,  name = \"Ventas día Sábado\", boxpoints = \"all\")\n\nfig\n```\n\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-12-1.png)\n:::\n:::\n\n\n\nBoxplot de las ventas por día antes de la pandemia\n:::\n\n#### Histogramas de los datos de ventas por día después de la pandemia\n\n::: {style=\"text-align:justify\"}\nEl código que genera estos histogramas en R es el siguiente:\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-his2}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# muestra el gráfico de todos los histogramas de ventas por día despues de la pandemia\npar(mar=c(2,2,2,2))\npar(mfrow =c(3,3))\nhist(fil_dat_1_after$Ventas, main = \"Ventas día Domingo\", xlab = \"Ventas\")\nhist(fil_dat_2_after$Ventas, main = \"Ventas día Lunes\", xlab = \"Ventas\")\nhist(fil_dat_3_after$Ventas, main = \"Ventas día Martes\", xlab = \"Ventas\")\nhist(fil_dat_4_after$Ventas, main = \"Ventas día Miércoles\", xlab = \"Ventas\")\nhist(fil_dat_5_after$Ventas, main = \"Ventas día Jueves\", xlab = \"Ventas\")\nhist(fil_dat_6_after$Ventas, main = \"Ventas día Viernes\", xlab = \"Ventas\")\nhist(fil_dat_7_after$Ventas, main = \"Ventas día Sábado\", xlab = \"Ventas\")\n```\n\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-13-1.png)\n:::\n:::\n\n\n\nHistogramas de las ventas por día después de la pandemia\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# muestra el gráfico de todos los histogramas de ventas por día antes de la pandemia\n\npar(mfrow =c(3,3))\nhist(fil_dat_1_after$Ventas, main = \"Ventas día Domingo\", xlab = \"Ventas\")\nhist(fil_dat_2_after$Ventas, main = \"Ventas día Lunes\", xlab = \"Ventas\")\nhist(fil_dat_3_after$Ventas, main = \"Ventas día Martes\", xlab = \"Ventas\")\nhist(fil_dat_4_after$Ventas, main = \"Ventas día Miércoles\", xlab = \"Ventas\")\nhist(fil_dat_5_after$Ventas, main = \"Ventas día Jueves\", xlab = \"Ventas\")\nhist(fil_dat_6_after$Ventas, main = \"Ventas día Viernes\", xlab = \"Ventas\")\nhist(fil_dat_7_after$Ventas, main = \"Ventas día Sábado\", xlab = \"Ventas\")\n```\n:::\n\n\n\n![Histogramas de las ventas por día antes de la pandemia](his_2.png)\n:::\n\n::: {style=\"text-align:justify\"}\nPara indagar el comportamiento periódico de las ventas, se presenta ahora los boxplot de las ventas por día.\n:::\n\n#### Boxplot de datos de ventas por días limpios después de la pandemia\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fil_dat_1_after$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  80431   95346  103691  101919  107639  122397 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(fil_dat_2_after$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  27106   33867   40804   42339   47566   77299 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(fil_dat_3_after$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  30514   38860   41889   41752   44732   51733 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(fil_dat_4_after$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  30335   34697   43071   43243   46480   70983 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(fil_dat_5_after$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  31704   39901   43144   43010   47048   63104 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(fil_dat_6_after$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  45908   56956   63361   61191   66915   70159 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(fil_dat_7_after$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  73606   78646   84130   85684   89730  101467 \n```\n\n\n:::\n:::\n\n\n\n::: {style=\"text-align:justify\"}\nEl código que genera estos los boxplot en R es el siguiente:\n:::\n\n::: {#fig-box2}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\n#día 1 = domingo\n#día 2 = lunes\n#día 3 = martes\n#día 4 = miércoles\n#día 5 = jueves\n#día 6 = viernes \n#día 7 = sábado\nfig <- plot_ly(y =fil_dat_1_after$Ventas, name = \"Ventas día Domingo\", boxpoints = \"all\",type = \"box\")\nfig <- fig %>% add_trace(y = fil_dat_2_after$Ventas,  name = \"Ventas día Lunes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_3_after$Ventas,  name = \"Ventas día Martes\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_4_after$Ventas,  name = \"Ventas día Miércoles\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_5_after$Ventas,  name = \"Ventas día Jueves\", boxpoints = \"all\")\nfig <- fig %>% add_trace(y = fil_dat_6_after$Ventas,  name = \"Ventas día Viernes\", boxpoints=\"all\")\nfig <- fig %>% add_trace(y = fil_dat_7_after$Ventas,  name = \"Ventas día Sábado\", boxpoints = \"all\")\n\nfig\n```\n\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-16-1.png)\n:::\n:::\n\n\n\nBoxplot de las ventas por día después de la pandemia\n:::\n\n## Identificación de distribuciones de probabilidad de las ventas por día\n\n::: {style=\"text-align:justify\"}\nPara identificar las distribuciones de cada día se hizo uso del test de Jarque Bera que ayuda a identificar cuales días siguen una distribución normal y el test de Kolmogorov de Smirnov\n\nEl siguiente código aplica los diferentes test para las ventas por día antes de la pandemia:\n:::\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#El valor p es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra no proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_1_before$Ventas)\n#Como el p-value(2.2e^-16)<0.05 rechazamos la hipótesis nulajau\n#JARQUE BERA\njarque.bera.test(fil_dat_1_before$Ventas) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tJarque Bera Test\n\ndata:  fil_dat_1_before$Ventas\nX-squared = 4.3177, df = 2, p-value = 0.1155\n```\n\n\n:::\n\n```{.r .cell-code}\n#por lo tanto los datos no se distribuyen normalmente\n#Se ajustara una distribuciión con el comando siguiente:\n\nfitdistr(fil_dat_1_before$Ventas, \"normal\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      mean          sd    \n  139929.468    24521.524 \n (  2675.518) (  1891.877)\n```\n\n\n:::\n\n```{.r .cell-code}\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_2_before$Ventas)\n#El valor p es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra no proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_2_before$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_2_before$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tJarque Bera Test\n\ndata:  fil_dat_2_before$Ventas\nX-squared = 2.7606, df = 2, p-value = 0.2515\n```\n\n\n:::\n\n```{.r .cell-code}\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_2_before$Ventas, \"normal\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     mean         sd    \n  48125.734   17150.338 \n ( 1917.466) ( 1355.853)\n```\n\n\n:::\n\n```{.r .cell-code}\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_3_before$Ventas)\n#El valor p es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra no proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_3_before$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_3_before$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tJarque Bera Test\n\ndata:  fil_dat_3_before$Ventas\nX-squared = 4.6048, df = 2, p-value = 0.1\n```\n\n\n:::\n\n```{.r .cell-code}\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_3_before$Ventas, \"normal\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     mean         sd    \n  44509.755   14312.338 \n ( 1590.260) ( 1124.483)\n```\n\n\n:::\n\n```{.r .cell-code}\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_4_before$Ventas)\n#El valor p es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra no proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_4_before$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_4_before$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tJarque Bera Test\n\ndata:  fil_dat_4_before$Ventas\nX-squared = 3.3204, df = 2, p-value = 0.1901\n```\n\n\n:::\n\n```{.r .cell-code}\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_4_before$Ventas, \"normal\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     mean         sd    \n  46904.516   16238.151 \n ( 1815.480) ( 1283.739)\n```\n\n\n:::\n\n```{.r .cell-code}\n#JARQUE BERA\njarque.bera.test(fil_dat_5_before$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tJarque Bera Test\n\ndata:  fil_dat_5_before$Ventas\nX-squared = 4.553, df = 2, p-value = 0.1026\n```\n\n\n:::\n\n```{.r .cell-code}\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_5_before$Ventas)\n#El valor p es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra no proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_5_before$Ventas)\n\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_5_before$Ventas, \"normal\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     mean         sd    \n  52786.734   18403.175 \n ( 2032.291) ( 1437.047)\n```\n\n\n:::\n\n```{.r .cell-code}\n#Calcularemos los test correspondientes a los test de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_6_before$Ventas)\n#El valor p es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra no proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_6_before$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_6_before$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tJarque Bera Test\n\ndata:  fil_dat_6_before$Ventas\nX-squared = 2.5406, df = 2, p-value = 0.2808\n```\n\n\n:::\n\n```{.r .cell-code}\n#ajustamos una distribución (normal)\nfitdistr(fil_dat_6_before$Ventas, \"normal\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     mean         sd    \n  81601.876   23756.037 \n ( 2591.996) ( 1832.818)\n```\n\n\n:::\n:::\n\n\n\n::: {style=\"text-align:justify\"}\nPara el caso del día sábado, denotado como séptimo día, no se obtuvo una distribución normal por lo que se utilizo la paqueteria de R fitdistrplus para probar el ajuste de las distribuciones de probabilidad. Las distribuciones probadas fueron: El mejor ajuste se obtuvo al usar la distribución Weibull, como se presentará más adelante\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfitdistr(fil_dat_7_before$Ventas, \"weibull\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      shape          scale    \n  3.646021e+00   1.335448e+05 \n (2.784858e-01) (4.365588e+03)\n```\n\n\n:::\n\n```{.r .cell-code}\nfitdistr(fil_dat_7_before$Ventas, \"exponential\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       rate    \n  8.379989e-06 \n (8.882771e-07)\n```\n\n\n:::\n\n```{.r .cell-code}\nfitdistr(fil_dat_7_before$Ventas, \"lognormal\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     meanlog        sdlog   \n  11.64220349    0.33374967 \n ( 0.03537739) ( 0.02501560)\n```\n\n\n:::\n:::\n\n\n:::\n\n### Prueba de la distribución Weibull:\n\n::: {style=\"text-align:justify\"}\nUna vez ajustada la distribución Weibull, se aplicó adicionalmente el test de Kolmogorov de Smirnov. El siguiente código implementa ambos procedimientos:\n\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Calcularemos los test correspondientes a los filtros de de ventas por día:\n#SHAPIRO-WILK\n#shapiro.test(fil_dat_7_before$Ventas)\n#El valor p es menor que α = .05, \n#entonces hay evidencia suficiente para decir \n#que la muestra no proviene de una población con distribución normal.\n#CHI-SQUARE\n#chisq.test(fil_dat_7_before$Ventas)\n#JARQUE BERA\njarque.bera.test(fil_dat_7_before$Ventas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tJarque Bera Test\n\ndata:  fil_dat_7_before$Ventas\nX-squared = 12.707, df = 2, p-value = 0.001741\n```\n\n\n:::\n\n```{.r .cell-code}\n#Fitting de de una distri bución weibull\n\n#fil_dat_7_before$Ventas\nfit.weibull <- fitdist(fil_dat_7_before$Ventas, \"weibull\")\nfit.weibull\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFitting of the distribution ' weibull ' by maximum likelihood \nParameters:\n          estimate   Std. Error\nshape 4.784508e+00    0.3789532\nscale 1.295070e+05 3155.3275585\n```\n\n\n:::\n\n```{.r .cell-code}\nvector_ventas7_ordenados <- fil_dat_7_before$Ventas[order(fil_dat_7_before$Ventas)]\nn = 83\nF_x = numeric(n)\nfor(i in 1:n){\n  F_x[i] <- (i/ n)\n}\n#F_x\nf_gorro_x <-  pweibull(vector_ventas7_ordenados, shape = 4.784508e+00, scale =  1.295070e+05 , lower.tail = TRUE, log.p = FALSE)\nks <- abs(F_x - f_gorro_x)\n```\n:::\n\n\n\n#### Representación gráfica al aplicar el test de Kolmogorov de Smirnov\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1936014\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1492794\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-23-1.png)\n:::\n\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-23-2.png)\n:::\n\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-23-3.png)\n:::\n:::\n\n\n\n::: {style=\"text-align:justify\"}\nCon las distribuciones identificadas de las ventas por día, nos ayuda a generar la variable aleatoria que denota el número de las ventas semanales.\n:::\n\n## Modelo Modificado de Cramér-Lundberg para identificar la probabilidad de las ganancias insuficientes en una empresa de comida rápida\n\n::: {style=\"text-align:justify\"}\nEl Modelo de Cramér-Lundberg (MCL) @eq-1.11 es una herramienta utilizada en el campo de la gestión de riesgos y las finanzas para evaluar la probabilidad de incumplimiento o pérdidas insuficientes en una empresa. Aunque no es específicamente diseñado para analizar la variación de las ganancias de una empresa, en particular una empresa de comida rápida, puede adaptarse para evaluar la probabilidad de ganancias insuficientes en este tipo de negocio, que puede llevar a la decisión de cierre de las actividades de la empresa.\n\nPara ello nuestra ecuación general del modelo modificado que representa la evolución de las ganancias en el tiempo, queda definida como: $$G(t) = u -ct + V(t), \\ \\ t \\geq0,$$ {#eq-4.1}\n\n::: {style=\"text-align:justify\"}\nla cual se especificará para cada periodo de tiempo ( pre-pandemia, pos-pandemia)\n:::\n\n-   $V(t)$: son los ingresos de las ganancias por día para cada semana\n\n-   $c$ : Son los costos de las obligaciones financieras del inversionista, como prestamos, pagos por adquisición de la franquicia, compras de equipos inmobiliarios, pagos de empleados, etc.\n\n-   $u \\geq 0$ : Es el capital inicial con el cual inicia la empresa a trabajar.\n:::\n\n### Caso pre-pandemia\n\n::: {style=\"text-align:justify\"}\nPara la implementación del modelo modificado Cramér-Lundberg con los datos antes de la pandemia se hizo la simulación de las variables aleatorias mediante las distribuciones de las ventas por día tomado como las ganancias acumuladas, y se estimó los parámetros de $u$ y $c$, por lo que el modelo es determinista y se incrementa por semana\n:::\n\n#### Modelo de Cramér-Lundberg simulado en R con datos reales de las ventas por día de la empresa.\n\n::: {style=\"text-align:justify\"}\nEn la (@fig-trayectoria) se muestra la trayectoria del modelo bajo los supuestos del modelo modificado, el proceso comienza con $t = 90$, que son las $90$ semanas de de las ventas registradas por día antes del cierre pandemico, con un capital inicial de $u= 1759629$, una tasa de $c= 0.29$, los montos de las ganancias tienen distribución normal y weibull.\n\nEl código que genera la trayectoria es el siguiente:\n:::\n\n::: {#fig-trayectoria}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Simulación Modelo Clásico de Cramér-Lundberg \n#para tres meses: Antes de la pandemia\n#Con los datos reales de la empresa\n\nlibrary(dplyr) # librería para poder renombrar las cabeceras de los dataframes\n#Parámetros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc =0.29*u #prima de pago cada timepo t. c=0.5*u\nt_final = 90\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt <- function(u, c, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)\n  Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) + \n    rnorm(1, mean = 48125.734 , sd=17150.338 ) +  \n   rnorm(1, mean =  44509.755, sd = 14312.338 ) + \n    rnorm(1, mean =   46904.516, sd = 16238.151 ) + \n    rnorm(1, mean = 52786.734  , sd = 18403.17 ) + \n    rnorm(1, mean = 118645.9  , sd = 36530.24) + \n    rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + \n                tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n    Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada,\n    Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  return(df_trayectoria)\n  \n}\ntrayectoria <- trayectoria_CLt(u,c, t_final )\n\nlibrary(ggplot2)\nlibrary(plotly)\n\n#Intalación de plotly usando github\n#devtools::install_github(\"ropensci/plotly\")\n\nfig_tr<- plot_ly(trayectoria, x = ~Tiempo, y = ~Ct, \nname = \"Ganancias: G(t)\", type = \"scatter\", mode = \"lines\")\nfig_tr <- fig_tr %>% add_trace(x = ~Tiempo, y = u,  \nname = \"Capital inicial: u\", type = \"scatter\", mode = \"lines\")\nfig_tr\n```\n\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-24-1.png)\n:::\n:::\n\n\n\nUna trayectoria del proceso de evolución modificado de Cramér Lundberg antes de la pandemia\n:::\n\n#### Probabilidad de ruina\n\n::: {style=\"text-align:justify\"}\nPara calcular la probabilidad de ruina se tomó en cuenta que depende del proceso de la evolución de las ganancias a través del tiempo , utilizando el método de Monte Carlo(citar).\n\nPara ello se quiere analizar el momento en el que $G(t)\\leq u$, es decir cuando la ganancia final es menor a el capital inicial y cuando $G(t)\\leq0$, se denotara como la ruina de la empresa, para ambos caso se utiliza la comparación con la tasa de interés para prestamos bancarios de $0.8$ anual.\n\nEl código para calcular la probabilidad de las ganancias finales bajas es el siguiente:\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Simulación de la probabilidad de ruina: Antes de la pandemia\n#Con los datos reales de la empresa\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n\nt_final = 48\nmu = 1 #tiempos entrellegadas constantes\ntrayectoria_CLt <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1) #Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) + rnorm(1, mean = 48125.734 , sd=17150.338 ) +  rnorm(1, mean =  44509.755, sd = 14312.338 ) + rnorm(1, mean =   46904.516, sd = 16238.151 ) + rnorm(1, mean = 52786.734  , sd = 18403.17 ) + rnorm(1, mean = 81601.876  , sd = 23756.037) + rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  # 1.08*u es la ganancia inferior a la de un tasa de un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.08*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria <- trayectoria_CLt(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de las ganancias bajas\nn_replicaciones = 100\nr_baja_ganancia <- replicate(n_replicaciones, trayectoria_CLt(u, c, lambda_Nt, t_final)[2])\n#r_baja_ganancia \nprob_baja_ganancia <- sum(r_baja_ganancia >0)/n_replicaciones\nprob_baja_ganancia\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.05\n```\n\n\n:::\n:::\n\n\n\nEl código para calcular la probabilidad de ruina es el siguiente:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Simulación de la probabilidad de ruina: Antes de la pandemia\n#Con los datos reales de la empresa\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 48\nmu = 1 #tiempos entrellegadas constantes\ntrayectoria_CLt <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1) #Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) + rnorm(1, mean = 48125.734 , sd=17150.338 ) +  rnorm(1, mean =  44509.755, sd = 14312.338 ) + rnorm(1, mean =   46904.516, sd = 16238.151 ) + rnorm(1, mean = 52786.734  , sd = 18403.17 ) + rnorm(1, mean = 81601.876  , sd = 23756.037) + rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  # 1.08*u es la ganancia inferior a la de un tasa de un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.08*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria <- trayectoria_CLt(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_ruina <- replicate(n_replicaciones, trayectoria_CLt(u, c, lambda_Nt, t_final)[1])\nr_ruina\nprob_ruin <- sum(r_ruina>0)/n_replicaciones\nprob_ruin\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n#### Análisis de sensibilidad\n\n::: {style=\"text-align:justify\"}\nSe desea analizar los cambios del resultado del modelo cuando se modifican sus entradas o parámetros, por lo cual se utilizó la técnica de análisis de sensibilidad.\n\nPara ello se toma los parámetros $u$ y $c$ del modelo modificado y se establece los rangos o valores posibles para cada uno de los ciertos parámetros, también se toma las medianas de las ganancia en la semana final durante 100 simulaciones del modelo, los rangos se determinan hasta que el modelo presente un comportamiento diferente.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Simulación Modelo Clásico de Cramer-Lundberg para tres meses: Antes de la pandemia\n#Con los datos reales de la empresa\n\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 90\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) + rnorm(1, mean = 48125.734 , sd=17150.338 ) +  rnorm(1, mean =  44509.755, sd = 14312.338 ) + rnorm(1, mean =   46904.516, sd = 16238.151 ) + rnorm(1, mean = 52786.734  , sd = 18403.17 ) + rnorm(1, mean = 81601.876  , sd = 23756.037) + rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 )) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n      {\n      ruina = 1\n      }\n    else\n      {\n      ruina = 0\n      }\n  }\n  df <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria <- data.frame(df%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  return(df_trayectoria$Ct[length(df_trayectoria$Ct)])\n  \n}\n\n# La función generador_mediana nos calcula la mediana de las ganancias finales \n#de 100 trayectorias, fihando el u= surplus y el c\ngenerador_mediana<- function(ui,cj)\n  {\n  ganancia_final_replicas <- replicate(100, trayectoria_CLt(u, c,lambda_Nt, t_final))\n  return( median(ganancia_final_replicas))\n  }\n#Se crea la rejilla donde se hace el analisis de sensibilidad para diferentes valores de u y c\ngrid_u <- seq(from = (u-100000*4), to = (u+100000*4), by = 100000)\ngrid_c <- seq(from = (decimal_c-0.01*4), to = (decimal_c+0.01*4), by = 0.01)\n\nmatriz_mediana <- matrix(rep(0, length(grid_u)*length(grid_c)), nrow= length(grid_u), ncol= length(grid_c))\n\nfor (i in 1:length(grid_u)) \n  {\n    for (j in 1:length(grid_c)) \n      {\n        matriz_mediana[i,j] <- generador_mediana(grid_u[i], grid_c[j]*grid_u[i])\n      }\n  }  \n#matriz_mediana\n\n#Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nw <- grid_u*grid_c\nfig <- plot_ly(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = grid_u[1], end = grid_u[length(grid_u)], size =100000 , color = 'red'),\n    y = list(show = TRUE, start = w[1], end = w[length(w)], size = 0.01*100000 , color = 'yellow')),\n  x = ~grid_u,\n  y = ~w,\n  z = ~matriz_mediana)\nfig <- fig %>% layout(\n  scene = list(autosize = F, width = 500, height = 500,\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 4),\n    camera = list(eye = list(x = grid_u[1]-1000, y = w[1\n                                                       ]-1000, z = 3000000)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\nfig\n```\n:::\n\n\n:::\n\n### Caso pos-pandemia\n\n::: {style=\"text-align:justify\"}\nDe manera análoga a los datos pre-pandemicos, para la simulación del modelo Crámer-Lundberg con los datos después de la pandemia se hizo uso de las medias de las distribuciones de las ventas por día tomado como las ganancias acumuladas, y se estimo los parámetros de $u$ y $c$\n:::\n\n#### Modelo de Cramér-Lundberg simulado en R con datos reales de las ventas por día de la empresa\n\n::: {style=\"text-align:justify\"}\nEn la (@fig-trayectoria2) se muestra la trayectoria del modelo bajo los supuestos del modelo modificado, el proceso comienza con $t = 14$, que son las $14$ semanas de de las ventas registradas por día después del cierre pandemico, con un capital inicial de $u= 1759629$, una tasa de $c= 0.29$, los montos de las ganancias tienen todas distribución normal\n\nEl código que genera la trayectoria es el siguiente:\n:::\n\n::: {#fig-trayectoria2}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = (0.29*u) #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 \n    ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr2 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, y = ~Ct, name = \"Ganancias\",type = \"scatter\", mode = \"lines\")\n\nfig_tr2 <- fig_tr2 %>% add_trace(x = ~Tiempo, y = u,  name = \"Capital inicial\", type = \"scatter\", mode = \"lines\")\nfig_tr2\n```\n\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-30-1.png)\n:::\n:::\n\n\n\nUna trayectoria del proceso de evolución modificado de Cramér Lundberg después de la pandemia\n:::\n\n::: {style=\"text-align:justify\"}\nSe emplea todo el análisis anterior con los mismos parámetros del modelo modificado para el caso cuando las ventas llegan por completo a una ruina, que se da al llegar a las $17$ semanas.\n:::\n\n::: {#fig-trayectoria3}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 17\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 \n    ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr3 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, y = ~Ct,  name = \"Ganancias\",type = \"scatter\", mode = \"lines\")\n\nfig_tr3 <- fig_tr3 %>% add_trace(x = ~Tiempo, y = u,  name = \"Capital inicial\", type = \"scatter\", mode = \"lines\")\nfig_tr3\n```\n\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-31-1.png)\n:::\n:::\n\n\n\nUna trayectoria del proceso de evolución modificado de Cramér Lundberg después de la pandemia para 17 semanas\n:::\n\n::: {style=\"text-align:justify\"}\nQueriendo un análisis contrario al caso anterior, en el que las ganancias sean mayor al capital inicial evitando la ruina de la empresa se simula el modelo mediante la modificación del parámetro $c$, reduciéndolo a un $17\\%$ presentándose así los resultados siguientes mediante el siguiente código.\n:::\n\n::: {#fig-trayectoria4}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = (0.29*u)*(0.83) #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 \n    ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia)\n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n\n\nlibrary(plotly)\n#plot(trayectoria$Tiempo, trayectoria$Ct, type= \"l\")\nfig_tr4 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, y = ~Ct, name = \"Ganancias\",type = \"scatter\", mode = \"lines\")\n\nfig_tr4 <- fig_tr4 %>% add_trace(x = ~Tiempo, y = u,  name = \"Capital inicial\", type = \"scatter\", mode = \"lines\")\nfig_tr4\n```\n\n::: {.cell-output-display}\n![](Estudio_caso_files/figure-epub/unnamed-chunk-32-1.png)\n:::\n:::\n\n\n\nUna trayectoria del proceso de evolución modificado de Cramér Lundberg después de la pandemia con la reducción de los costos al $17 \\%$.\n:::\n\n#### Probabilidad de ruina\n\n::: {style=\"text-align:justify\"}\nAl igual que para el caso con los datos antes de la pandemia se analizó el momento en el que $G(t)\\leq u$ y cuando $G(t)\\leq0$, haciendo la comparación con la tasa de interés para prestamos bancarios de $0.8$ anual, por lo que para este caso se usa la tasa $0.233$, pues se tienen registrado hasta $14$ semanas, es decir $t=14$.\n\nEl código para calcular la probabilidad de las ganancias finales bajas es el siguiente:\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # librería para poder renombrar las cabeceras de los dataframes\n#Parámetros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo , media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) #Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  # 1.08*u es la ganancia inferior a la de un tasa de un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_baja_ganancia_post_pandemia <- replicate(n_replicaciones, trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[2])\nr_baja_ganancia_post_pandemia \nprob_baja_ganancia_post_pandemia <- sum(r_baja_ganancia_post_pandemia >0)/n_replicaciones\nprob_baja_ganancia_post_pandemia\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\nEl código para calcular la probabilidad de las ganancias finales bajas durante las $17$ semanas es el siguiente:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 17\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo , media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) #Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  # 1.08*u es la ganancia inferior a la de un tasa de un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02833*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_baja_ganancia_post_pandemia <- replicate(n_replicaciones, trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[2])\n#r_baja_ganancia_post_pandemia \nprob_baja_ganancia_post_pandemia <- sum(r_baja_ganancia_post_pandemia >0)/n_replicaciones\nprob_baja_ganancia_post_pandemia\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n::: {style=\"text-align:justify\"}\nEl código para calcular la probabilidad de ruina es el siguiente:\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo , media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) #Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  # 1.08*u es la ganancia inferior a la de un tasa de un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_ruina_post_pandemia <- replicate(n_replicaciones, trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])\nr_ruina_post_pandemia\nprob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/n_replicaciones\nprob_ruin_post_pandemia\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n::: {style=\"text-align:justify\"}\nEl código para calcular la probabilidad de ruina durante las $17$ semanas es el siguiente:\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\nc = 0.29*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 17\nmu = 1 #tiempos entrellegadas constantes\n#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo , media_trayectoria = cramer_media)\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1) #Suponiendo los tiempos entrellegadas constantes \\mu = 1\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){\n      ruina = 1\n    }\n    else{\n      ruina = 0\n    }\n  }\n  # 1.08*u es la ganancia inferior a la de un tasa de un título financiero para el año 2018\n  if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02833*u) {\n    ganancia_no_deseada = 1\n    \n  } \n  else{\n    ganancia_no_deseada = 0\n  }\n  df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  salida <- c(ruina, ganancia_no_deseada)\n  return(salida)\n  \n}\ntrayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )\n#Método de monte carlo para estimar la probabilidad de ruina\nn_replicaciones = 100\nr_ruina_post_pandemia <- replicate(n_replicaciones, trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])\n#r_ruina_post_pandemia\nprob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/n_replicaciones\nprob_ruin_post_pandemia\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.07\n```\n\n\n:::\n:::\n\n\n\n#### Análisis de sensibilidad\n\n::: {style=\"text-align:justify\"}\nModificando los parámetros $u$ y $c$ del modelo modificado y estableciendo los rangos o valores posibles para cada uno de los ciertos parámetros, se presenta el análisis de sensibilidad durante las semanas registradas después de la pandemia que fueron $14$, tomando la mediana de las $100$ simulaciones de la ganancia final obtenida por el modelo, es decir la venta registrada en la última semana de los datos registrados.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # libreria para poder renombrar las cabeceras de los dataframes\n#Parametros\nset.seed(13) #semilla fija\nu = 1759629 #surplus(capital inicial de salvamento)\n#Es un estimado a partir de la media de las ganancias por semana, \n#multiplicado por 10/3, \n#siendo una proporción para evitar la ruina\n# u (sum(medias))*(10/3)\ndecimal_c = 0.29\nc =decimal_c*u #prima de pago cada timepo t. c=0.5*u\nlambda_Nt = 0.5\n#lambda_Xi = 3\nt_final = 14\n# S(t) = \\sum_{i=1}^{N(t)}X_i\n#donde N(t)~ Poisson (lambda*t)\n# X_i ~ exponencial (lambda_Xi)\n#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG\n#Simulación de trayectoria de CL_t, cuando t < t_final.\ntrayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)\n{\n  tiempo <- c(0)\n  Cramer_trayectoria <- c(u)\n  while(tiempo[length(tiempo)] < t_final)\n  {\n    #tiempo_llegada <- rexp(1, rate = lambda_Nt)\n    tiempo_llegada <- (1)\n    Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  ) + rnorm(1, mean =  39841.721 , sd= 7873.446 \n    ) +  rnorm(1, mean =   41751.747, sd = 5687.030  ) + rnorm(1, mean =   43243.143, sd = 10517.841 ) + rnorm(1, mean = 43010.307  , sd = 7741.889 ) + rnorm(1, mean = 61191.300  , sd = 7202.989) + rnorm(1, mean =  85684.058 , sd = 8371.359 ) ) \n    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,tiempo[length(tiempo)] + tiempo_llegada ) \n    Cramer_trayectoria <- c(Cramer_trayectoria,\n                            Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada, Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada +  Y_i )\n    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)\n    {\n      ruina = 1\n    }\n    else\n    {\n      ruina = 0\n    }\n  }\n  df_post_pandemia<- data.frame(tiempo, Cramer_trayectoria)\n  df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))\n  return(df_trayectoria_post_pandemia$Ct[length(df_trayectoria_post_pandemia$Ct)])\n  \n}\n\n# La función generador_mediana nos calcula la mediana de las ganancias finales \n#de 100 trayectorias, fihando el u= surplus y el c\ngenerador_mediana_post_pandemia<- function(ui,cj)\n  {\n    ganancia_final_replicas_post_pandemia <- replicate(100, trayectoria_CLt_post_pandemia(u, c,lambda_Nt, t_final))\n    return( median(ganancia_final_replicas_post_pandemia))\n  }\n#Se crea la rejilla donde se hace el analisis de sensibilidad para diferentes valores de u y c\ngrid_u_post_pandemia <- seq(from = (u-100000*4), to = (u+100000*4), by = 100000)\ngrid_c_post_pandemia <- seq(from = (decimal_c-0.01*4), to = (decimal_c+0.01*4), by = 0.01)\nu_t <- grid_u_post_pandemia\nmatriz_mediana_post_pandemia <- matrix(rep(0, length(grid_u_post_pandemia)*length(grid_c_post_pandemia)), nrow= length(grid_u_post_pandemia), ncol= length(grid_c_post_pandemia))\nG_t <- matriz_mediana\n\nfor (i in 1:length(u_t)) \n{\n  for (j in 1:length(grid_c_post_pandemia)) \n  {\n    G_t[i,j] <- generador_mediana_post_pandemia(u_t[i], grid_c_post_pandemia[j]*u_t[i])\n  }\n}  \n#matriz_mediana_post_pandemia  \n#Grafica del ánalisis de sensibilidad\nlibrary(plotly)\nlibrary(ggplot2)\nc_t <- u_t*grid_c_post_pandemia\nfig2 <- plot_ly(\n  type = 'surface',\n  contours = list(\n    x = list(show = TRUE, start = u_t[1], end = grid_u_post_pandemia[length(u_t)], size =100000 , color = 'black'),\n    y = list(show = TRUE, start = w[1], end = w[length(w)], size = 0.01*100000 , color = 'white')),\n  x = ~u_t,\n  y = ~c_t,\n  z = ~G_t)\nfig2 <- fig2 %>% layout(\n  scene = list(\n    xaxis = list(nticks = 20),\n    zaxis = list(nticks = 4),\n    camera = list(eye = list(x = u_t[1]-1000, y = c_t[1]-1000, z = 300000)),\n    aspectratio = list(x = .9, y = .8, z = 0.2)))\n\nfig2\n```\n:::\n\n\n\n::: {style=\"text-align:justify\"}\nSe presenta el análisis de sensibilidad para $t = 19$, debido a que en $19$ semanas se presenta el caso donde se pueden registrar ventas por debajo del cero, es decir casos donde $G(t)\\leq0$.\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n##  Análisis de resultados y recomendaciones.\n\n::: {style=\"text-align:justify\"}\nCon los datos registrados de $90$ semanas antes de pandemia en el modelo modificado (@eq-4.1) se obtiene un crecimiento positivo de las ganancias simuladas, en particular mayor que nuestro capital inicial, es decir la probabilidad del evento donde $G(t)\\geq u$ es positiva, con $t=90$, como se puede observar en la imagen (@fig-trayectoria), por lo que en el intervalo de tiempo en el que se estudia la empresa generaría siempre ganancias positivas y se lograría suplir la deuda e incluso pensar en implementar más equipos inmobiliarios.\n\nMientras que después de la pandemia, se puede argumentar con base en las observaciones de las $14$ semanas de las ventas registradas, usando los mismos parámetros obtenidos para los datos antes de la pandemia implementados, las ganancias son bajas como se muestra en la imagen (@fig-trayectoria2). Aquí se observa que la simulación de las ganancias son menores que el capital inicial y dando seguimiento en el intervalo de tiempo con los datos registrados después de pandemia aumentando hasta la semana $17$ se observa que las ganancias son menores que cero, por lo que se puede concluir que se llega a una ruina total, como se muestra el caso en la imagen (@fig-trayectoria3)\n\nAnalizando el caso en el que se modificara los parámetro de los costos del modelo (@eq-4.1) , se concluye que al calibrar el parámetro $c$, este se puede reducir a un $17 \\%$ para cuando $t=14$, es decir al final de la semana $14$ puede evitarse la perdida total de las ganancias siendo estas mayor que nuestro capital inicial, como se observa en la figura (@fig-trayectoria4)\n\nComo $c$, es el parámetro de los pagos incluyendo la adquisición de la franquicia, compras de equipos inmobiliarios, pagos de empleados y prestamos, el anterior análisis quiere decir que se necesita un recorte de personal del $17 \\%$ como mínimo y una reestructuración financiera del capital pendiente por pagar, haciendo los pagos más pequeños a un tiempo extendido, con el fin de la funcionalidad del negocio durante este proceso pandemico y evitar el cierre de quiebra.\n:::\n",
    "supporting": [
      "Estudio_caso_files\\figure-epub"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}