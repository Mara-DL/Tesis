"0","#Simulación Modelo Clásico de Cramer-Lundberg para tres meses: Antes de la pandemia"
"0","#Con los datos reales de la empresa"
"0",""
"0","library(dplyr) # libreria para poder renombrar las cabeceras de los dataframes"
"0","#Parametros"
"0","set.seed(13) #semilla fija"
"0","u = 1759629 #surplus(capital inicial de salvamento)"
"0","#Es un estimado a partir de la media de las ganancias por semana, "
"0","#multiplicado por 10/3, "
"0","#siendo una proporción para evitar la ruina"
"0","# u (sum(medias))*(10/3)"
"0","decimal_c = 0.29"
"0","c =decimal_c*u #prima de pago cada timepo t. c=0.5*u"
"0","lambda_Nt = 0.5"
"0","#lambda_Xi = 3"
"0","t_final = 90"
"0","# S(t) = \sum_{i=1}^{N(t)}X_i"
"0","#donde N(t)~ Poisson (lambda*t)"
"0","# X_i ~ exponencial (lambda_Xi)"
"0","#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG"
"0","#Simulación de trayectoria de CL_t, cuando t < t_final."
"0","trayectoria_CLt <- function(u, c, lambda_Nt, t_final)"
"0","{"
"0","  tiempo <- c(0)"
"0","  Cramer_trayectoria <- c(u)"
"0","  while(tiempo[length(tiempo)] < t_final)"
"0","  {"
"0","    #tiempo_llegada <- rexp(1, rate = lambda_Nt)"
"0","    tiempo_llegada <- (1)"
"0","    Y_i <-  (rnorm(1, mean = 139929.468, sd = 24521.524 ) +"
"0","rnorm(1, mean = 48125.734 , sd=17150.338 ) +  "
"0","rnorm(1, mean =  44509.755, sd = 14312.338 ) + "
"0","rnorm(1, mean =   46904.516, sd = 16238.151 ) + "
"0","rnorm(1, mean = 52786.734  , sd = 18403.17 ) "
"0","+ rnorm(1, mean = 81601.876  , sd = 23756.037) "
"0","+ rweibull(1,  shape = 4.784508e+00, scale = 1.295070e+05 )) "
"0","    tiempo <- c(tiempo, tiempo[length(tiempo)] + tiempo_llegada,"
"0","    tiempo[length(tiempo)] + tiempo_llegada ) "
"0","    Cramer_trayectoria <- c(Cramer_trayectoria,"
"0","    Cramer_trayectoria[length(Cramer_trayectoria)]- c*tiempo_llegada,"
"0","    Cramer_trayectoria[length(Cramer_trayectoria)]- "
"0","c*tiempo_llegada +  Y_i )"
"0","    if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)"
"0","      {"
"0","      ruina = 1"
"0","      }"
"0","    else"
"0","      {"
"0","      ruina = 0"
"0","      }"
"0","  }"
"0","  df <- data.frame(tiempo, Cramer_trayectoria)"
"0","  df_trayectoria <- data.frame(df%>% rename(Tiempo = tiempo, Ct = Cramer_trayectoria))"
"0","  return(df_trayectoria$Ct[length(df_trayectoria$Ct)])"
"0","  "
"0","}"
"0",""
"0","# La función generador_mediana nos calcula la mediana de las ganancias finales "
"0","#de 100 trayectorias, fihando el u= surplus y el c"
"0","generador_mediana<- function(ui,cj)"
"0","  {"
"0","  ganancia_final_replicas <- replicate(100, trayectoria_CLt(u, c,lambda_Nt, t_final))"
"0","  return( median(ganancia_final_replicas))"
"0","  }"
"0","#Se crea la rejilla donde se hace el analisis de sensibilidad"
"0","#para diferentes valores de u y c"
"0","grid_u <- seq(from = (u-100000*4), to = (u+100000*4), by = 100000)"
"0","grid_c <- seq(from = (decimal_c-0.01*4), to = (decimal_c+0.01*4), by = 0.01)"
"0",""
"0","matriz_mediana <- matrix(rep(0, length(grid_u)*length(grid_c)),"
"0","nrow= length(grid_u), ncol= length(grid_c))"
"0",""
"0","for (i in 1:length(grid_u)) "
"0","  {"
"0","    for (j in 1:length(grid_c)) "
"0","      {"
"0","        matriz_mediana[i,j] <- generador_mediana(grid_u[i], grid_c[j]*grid_u[i])"
"0","      }"
"0","  }  "
"0","#matriz_mediana"
"0",""
"0","#Grafica del ánalisis de sensibilidad"
"0","library(plotly)"
"0","library(ggplot2)"
"0","w <- grid_u*grid_c"
"0","fig <- plot_ly("
"0","  type = 'surface',"
"0","  contours = list("
"0","    x = list(show = TRUE, start = grid_u[1], end = grid_u[length(grid_u)], "
"0","size =100000 , color = 'red'),"
"0","    y = list(show = TRUE, start = w[1], end = w[length(w)], "
"0","size = 0.01*100000 , color = 'yellow')),"
"0","  x = ~grid_u,"
"0","  y = ~w,"
"0","  z = ~matriz_mediana)"
"0","fig <- fig %>% layout("
"0","  scene = list(autosize = F, width = 500, height = 500,"
"0","    xaxis = list(nticks = 20),"
"0","    zaxis = list(nticks = 4),"
"0","    camera = list(eye = list(x = grid_u[1]-1000, y = w[1"
"0","                                                       ]-1000, z = 3000000)),"
"0","    aspectratio = list(x = .9, y = .8, z = 0.2)))"
"0",""
"0","fig"
