if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)
{
ruina = 1
}
else
{
ruina = 0
}
}
df_post_pandemia<- data.frame(tiempo, Cramer_trayectoria)
df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%
rename(Tiempo = tiempo,
Ct = Cramer_trayectoria))
return(df_trayectoria_post_pandemia$Ct[length
(df_trayectoria_post_pandemia$Ct)])
}
# La función generador_mediana nos calcula la mediana de
# las ganancias finales de 100 trayectorias,
# fijando el u= surplus y el c
generador_mediana_post_pandemia<- function(ui,cj)
{
ganancia_final_replicas_post_pandemia <- replicate(100,
trayectoria_CLt_post_pandemia(u, c,lambda_Nt, t_final))
return( median(ganancia_final_replicas_post_pandemia))
}
# Se crea la rejilla donde se hace el analisis de sensibilidad
# para diferentes valores de u y c
grid_u_post_pandemia <- seq(from = (u-100000*4),
to = (u+100000*4),
by = 100000)
grid_c_post_pandemia <- seq(from = (decimal_c-0.01*4),
to = (decimal_c+0.01*4),
by = 0.01)
u_t <- grid_u_post_pandemia
matriz_mediana_post_pandemia <- matrix(rep(0,
length(grid_u_post_pandemia)*length(grid_c_post_pandemia)),
nrow= length(grid_u_post_pandemia),
ncol= length(grid_c_post_pandemia))
G_t <- matriz_mediana_post_pandemia
for (i in 1:length(u_t))
{
for (j in 1:length(grid_c_post_pandemia))
{
G_t[i,j] <- generador_mediana_post_pandemia(u_t[i],
grid_c_post_pandemia[j]*u_t[i])
}
}
# matriz_mediana_post_pandemia
# Grafica del ánalisis de sensibilidad
library(plotly)
library(ggplot2)
c_t <- u_t*grid_c_post_pandemia
fig2 <- plot_ly(
type = 'surface',
contours = list(x = list(show = TRUE, start = u_t[1],
end = grid_u_post_pandemia[length(u_t)],
size =100000 , color = 'black'),
z = list(show = TRUE, start = G_t[1],
end = G_t[length(G_t)],
size = 0.01*100000)),
x = ~u_t,
y = ~c_t,
z = ~G_t)
fig2 <- fig2 %>% layout(
scene = list(
xaxis = list(nticks = 20),
zaxis = list(nticks = 4),
camera = list(eye = list(x = 0,
y = -1,
z = 1)),
aspectratio = list(x = .9, y = .8, z = 0.2)))
fig2
library(dplyr) # libreria para poder
# renombrar las cabeceras de los dataframes
# Parametros
set.seed(13) #semilla fija
u = 1759629 #surplus(capital inicial de salvamento)
# Es un estimado a partir de la media de las ganancias por semana,
# multiplicado por 10/3,
# siendo una proporción para evitar la ruina
# u (sum(medias))*(10/3)
decimal_c = 0.29
c =decimal_c*u #prima de pago cada timepo t. c=0.5*u
lambda_Nt = 0.5
#lambda_Xi = 3
t_final = 19
# S(t) = \sum_{i=1}^{N(t)}X_i
# donde N(t)~ Poisson (lambda*t)
# X_i ~ exponencial (lambda_Xi)
# CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG
# Simulación de trayectoria de CL_t, cuando t < t_final.
trayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)
{
tiempo <- c(0)
Cramer_trayectoria <- c(u)
while(tiempo[length(tiempo)] < t_final)
{
#tiempo_llegada <- rexp(1, rate = lambda_Nt)
tiempo_llegada <- (1)
Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075) +
rnorm(1, mean =  39841.721 , sd= 7873.446)  +
rnorm(1, mean =   41751.747, sd = 5687.030) +
rnorm(1, mean =   43243.143, sd = 10517.841)+
rnorm(1, mean = 43010.307  , sd = 7741.889) +
rnorm(1, mean = 61191.300  , sd = 7202.989) +
rnorm(1, mean =  85684.058 , sd = 8371.359))
tiempo <- c(tiempo, tiempo[length(tiempo)]
+ tiempo_llegada,tiempo[length(tiempo)]
+ tiempo_llegada )
Cramer_trayectoria <- c(Cramer_trayectoria,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada +  Y_i )
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0)
{
ruina = 1
}
else
{
ruina = 0
}
}
df_post_pandemia<- data.frame(tiempo, Cramer_trayectoria)
df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%
rename(Tiempo = tiempo,
Ct = Cramer_trayectoria))
return(df_trayectoria_post_pandemia$Ct[length
(df_trayectoria_post_pandemia$Ct)])
}
# La función generador_mediana nos calcula la mediana de
# las ganancias finales de 100 trayectorias,
# fijando el u= surplus y el c
generador_mediana_post_pandemia<- function(ui,cj)
{
ganancia_final_replicas_post_pandemia <- replicate(100,
trayectoria_CLt_post_pandemia(u, c,lambda_Nt, t_final))
return( median(ganancia_final_replicas_post_pandemia))
}
# Se crea la rejilla donde se hace el analisis de sensibilidad
# para diferentes valores de u y c
grid_u_post_pandemia <- seq(from = (u-100000*4),
to = (u+100000*4),
by = 100000)
grid_c_post_pandemia <- seq(from = (decimal_c-0.01*4),
to = (decimal_c+0.01*4),
by = 0.01)
u_t <- grid_u_post_pandemia
matriz_mediana_post_pandemia <- matrix(rep(0,
length(grid_u_post_pandemia)*length(grid_c_post_pandemia)),
nrow= length(grid_u_post_pandemia),
ncol= length(grid_c_post_pandemia))
G_t <- matriz_mediana_post_pandemia
for (i in 1:length(u_t))
{
for (j in 1:length(grid_c_post_pandemia))
{
G_t[i,j] <- generador_mediana_post_pandemia(u_t[i],
grid_c_post_pandemia[j]*u_t[i])
}
}
#Grafica del ánalisis de sensibilidad
#Grafica del ánalisis de sensibilidad
library(plotly)
library(ggplot2)
c_t <- grid_u_post_pandemia*grid_c_post_pandemia
z1<- matrix(rep(0,
length(grid_u_post_pandemia)*length(grid_c_post_pandemia)), nrow=
length(grid_u_post_pandemia), ncol= length(grid_c_post_pandemia))
z2<- matrix(rep(u,
length(grid_u_post_pandemia)*length(grid_c_post_pandemia)), nrow=
length(grid_u_post_pandemia), ncol= length(grid_c_post_pandemia))
fig3 <- plot_ly(
type = 'surface',
contours = list(
x = list(show = TRUE, start = u_t[1], end =
u_t[length(u_t)], size =100000 ,
color = 'black'),
z = list(show = TRUE, start = G_t[1],
end = G_t[length(G_t)], size =0.01*100000 ,
color = 'white')),
x = ~u_t,
y = ~c_t,
z = ~G_t)
fig3 <- fig3%>% add_surface(
type = 'surface',
contours = list(
x = list(show = TRUE, start = u_t[1],
end = u_t[length(u_t)], size =100000 ,
color = 'black'),
y = list(show = TRUE, start = c_t[1],
end = c_t[length(c_t)],
size = 0.01*100000 , color = 'red')),
x = ~u_t,
y = ~c_t,
z = ~z1)
fig3 <- fig3 %>% layout(
scene = list(
xaxis = list(nticks = 20),
zaxis = list(nticks = 4),
camera = list(eye = list(x = 0, y = -1, z = 1)),
aspectratio = list(x = .9, y = .8, z = 0.2)))
fig3
#
#Poner un apartado donde explique que es la visualización de los datos
#Elimina las filas con datos faltantes
#datos <- data.frame( datos %>% filter(!is.na(Año)))
#DATAFRAME RESULTANTE:
#_________________________________Antes de la pandemia____________________________
fil_before1<- data.frame(subset(datos, Año <= 2019))
fil_before2<- data.frame(subset(datos, Año == 2020 & Mes <= 4))
fil_before <- rbind(fil_before1, fil_before2)
#fil_before_new <- fil_before %>%select(Año, Mes, Dia, Ventas)
fil_before_new <- subset(fil_before, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_before_new
#
#Poner un apartado donde explique que es la visualización de los datos
#Elimina las filas con datos faltantes
#datos <- data.frame( datos %>% filter(!is.na(Año)))
#DATAFRAME RESULTANTE:
#_________________________________Antes de la pandemia____________________________
fil_before1<- data.frame(subset(datos, Año <= 2019))
fil_before2<- data.frame(subset(datos, Año == 2020 & Mes <= 4))
fil_before <- rbind(fil_before1, fil_before2)
#fil_before_new <- fil_before %>%select(Año, Mes, Dia, Ventas)
fil_before_new <- subset(fil_before, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_before_new
#
#Poner un apartado donde explique que es la visualización de los datos
#Elimina las filas con datos faltantes
#datos <- data.frame( datos %>% filter(!is.na(Año)))
#DATAFRAME RESULTANTE:
#_________________________________Antes de la pandemia____________________________
fil_before1<- data.frame(subset(datos, Año <= 2019))
fil_before_new1 <- rbind(fil_before1, fil_before2)
#fil_before_new <- fil_before %>%select(Año, Mes, Dia, Ventas)
fil_before_new <- subset(fil_before, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_before_new
#
#Poner un apartado donde explique que es la visualización de los datos
#Elimina las filas con datos faltantes
#datos <- data.frame( datos %>% filter(!is.na(Año)))
#DATAFRAME RESULTANTE:
#_________________________________Antes de la pandemia____________________________
fil_before1<- data.frame(subset(datos, Año <= 2019))
#fil_before_new <- fil_before %>%select(Año, Mes, Dia, Ventas)
fil_before_new <- subset(fil_before1, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_before_new
#
#Poner un apartado donde explique que es la visualización de los datos
#Elimina las filas con datos faltantes
#datos <- data.frame( datos %>% filter(!is.na(Año)))
#DATAFRAME RESULTANTE:
#_________________________________Antes de la pandemia____________________________
fil_before1_new<- data.frame(subset(datos, Año <= 2019 & Mes <= 9))
#fil_before_new <- fil_before %>%select(Año, Mes, Dia, Ventas)
fil_before_new <- subset(fil_before1_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_before_new
#
#Poner un apartado donde explique que es la visualización de los datos
#Elimina las filas con datos faltantes
#datos <- data.frame( datos %>% filter(!is.na(Año)))
#DATAFRAME RESULTANTE:
#_________________________________Antes de la pandemia____________________________
fil_before1_new<- data.frame(subset(datos, Año <= 2019 & Mes <= 8))
#fil_before_new <- fil_before %>%select(Año, Mes, Dia, Ventas)
fil_before_new <- subset(fil_before1_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_before_new
#
#Poner un apartado donde explique que es la visualización de los datos
#Elimina las filas con datos faltantes
#datos <- data.frame( datos %>% filter(!is.na(Año)))
#DATAFRAME RESULTANTE:
#_________________________________Antes de la pandemia____________________________
fil_before1_new<- data.frame(subset(datos, Año <= 2019 & Mes <= 8))
#fil_before_new <- fil_before %>%select(Año, Mes, Dia, Ventas)
fil_before_new <- subset(fil_before1_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_before_new
View(fil_before_new)
#
#Poner un apartado donde explique que es la visualización de los datos
#Elimina las filas con datos faltantes
#datos <- data.frame( datos %>% filter(!is.na(Año)))
#DATAFRAME RESULTANTE:
#_________________________________Antes de la pandemia____________________________
fil_before1_new<- data.frame(subset(datos, Año <= 2019 & Mes <= 7))
#fil_before_new <- fil_before %>%select(Año, Mes, Dia, Ventas)
fil_before_new <- subset(fil_before1_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_before_new
#
#Poner un apartado donde explique que es la visualización de los datos
#Elimina las filas con datos faltantes
#datos <- data.frame( datos %>% filter(!is.na(Año)))
#DATAFRAME RESULTANTE:
#_________________________________Antes de la pandemia____________________________
fil_before1_new<- data.frame(subset(datos, Año < 2019 & Mes <= 9))
#fil_before_new <- fil_before %>%select(Año, Mes, Dia, Ventas)
fil_before_new <- subset(fil_before1_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_before_new
#
#Poner un apartado donde explique que es la visualización de los datos
#Elimina las filas con datos faltantes
#datos <- data.frame( datos %>% filter(!is.na(Año)))
#DATAFRAME RESULTANTE:
#_________________________________Antes de la pandemia____________________________
fil_before1_new<- data.frame(subset(datos, Año < 2019 & Mes <= 8))
#fil_before_new <- fil_before %>%select(Año, Mes, Dia, Ventas)
fil_before_new <- subset(fil_before1_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_before_new
#________________________Después de la pandemia__________________________________
fil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8))
DT::datatable(fil_dat_after)
#________________________Después de la pandemia__________________________________
fil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8))
fil_dat_after
#________________________Después de la pandemia__________________________________
fil_dat_after <- data.frame(subset(datos, Año == 2020 & Mes>=8 & Mes<=9))
fil_dat_after
#________________________Después de la pandemia__________________________________
fil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes>=8 & Mes<=9))
fil_after_new <- subset(fil_after_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
#________________________Después de la pandemia__________________________________
fil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes>=8 & Mes<=9))
fil_after_new <- subset(fil_dat_after_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_dat_after
#________________________Después de la pandemia__________________________________
fil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes>=8 & Mes<9))
fil_after_new <- subset(fil_dat_after_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_dat_after
#________________________Después de la pandemia__________________________________
fil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes>=8 & Mes<9))
fil_after_new <- subset(fil_dat_after_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_dat_after
#________________________Después de la pandemia__________________________________
fil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes=8 ))
#________________________Después de la pandemia__________________________________
fil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes==8 ))
fil_after_new <- subset(fil_dat_after_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_dat_after
#________________________Después de la pandemia__________________________________
fil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes==8 ))
fil_after_new <- subset(fil_dat_after_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_dat_new
#________________________Después de la pandemia__________________________________
fil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes==8 ))
fil_after_new <- subset(fil_dat_after_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_dat_after_new
#________________________Después de la pandemia__________________________________
fil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes>=8 & Mes<=9))
fil_after_new <- subset(fil_dat_after_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_dat_after_new
#________________________Después de la pandemia__________________________________
fil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes>=8 & Mes<9))
fil_after_new <- subset(fil_dat_after_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_dat_after_new
#________________________Después de la pandemia__________________________________
fil_dat_after_new <- data.frame(subset(datos, Año == 2020 & Mes>=8 & Mes<9))
fil_after_new <- subset(fil_dat_after_new, select=c(Año, Mes, Dia, Ventas, TotalVentas))
fil_after_new
# muestra el gráfico de todos los boxplot de ventas por día antes de la pandemia
fig <- plot_ly(y =fil_dat_1_before$Ventas, name = "Ventas día Domingo",
boxpoints = "all",type = "box", )
model <- CramerLundberg(initial_capital = 0,
premium_rate = 1,
claim_poisson_arrival_rate = 1,
claim_size_generator = rexp,
claim_size_parameters = list(rate = 1))
model
plot(model)
model$rate
model
ruin_probability(model = model,
time_horizon = 10,
simulation_number = 100,
return_paths = TRUE,
parallel = FALSE)
pppp<-ruin_probability(model = model,
time_horizon = 10,
simulation_number = 100,
return_paths = TRUE,
parallel = FALSE)
pppp
pppp$ruin_probability
plot(pppp)
plot(pppp$ruin_probability)
plot(pppp$ruin_probability, "l")
plot(pppp$ruin_probability, type = "l")
plot(pppp$ruin_probability, "l")
plot(pppp$ruin_probability)
12*4
(14*o.08)/48
(14*0.08)/48
(1 + (14*0.08)/48)*u)
(1 + (14*0.08)/48)*u)
u
(1 + (14*0.08)/48)*u)
(1 + (14*0.08)/48)*u
prob_baja_ganancia_post_pandemia
library(dplyr) # libreria para poder renombrar
#las cabeceras de los dataframes
#Parametros
set.seed(13) #semilla fija
u = 1759629 #surplus(capital inicial de salvamento)
#Es un estimado a partir de la media de las ganancias por semana,
#multiplicado por 10/3,
#siendo una proporción para evitar la ruina
# u (sum(medias))*(10/3)
c = 0.29*u #prima de pago cada timepo t. c=0.5*u
lambda_Nt = 0.5
#lambda_Xi = 3
t_final = 17
# S(t) = \sum_{i=1}^{N(t)}X_i
#donde N(t)~ Poisson (lambda*t)
# X_i ~ exponencial (lambda_Xi)
#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG
#Simulación de trayectoria de CL_t, cuando t < t_final.
trayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)
{
tiempo <- c(0)
Cramer_trayectoria <- c(u)
while(tiempo[length(tiempo)] < t_final)
{
tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)
Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  )
+ rnorm(1, mean =  39841.721 , sd= 7873.446
) +
rnorm(1, mean =   41751.747, sd = 5687.030  ) +
rnorm(1, mean =   43243.143, sd = 10517.841 ) +
rnorm(1, mean = 43010.307  , sd = 7741.889 ) +
rnorm(1, mean = 61191.300  , sd = 7202.989) +
rnorm(1, mean =  85684.058 , sd = 8371.359 ) )
tiempo <- c(tiempo, tiempo[length(tiempo)]
+ tiempo_llegada,tiempo[length(tiempo)]
+ tiempo_llegada )
Cramer_trayectoria <- c(Cramer_trayectoria,
Cramer_trayectoria[length(Cramer_trayectoria)]
- c*tiempo_llegada,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada +  Y_i )
}
df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)
df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%
rename(Tiempo = tiempo,
Ct = Cramer_trayectoria))
return(df_trayectoria_post_pandemia)
}
trayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,lambda_Nt, t_final )
library(plotly)
#plot(trayectoria$Tiempo, trayectoria$Ct, type= "l")
fig_tr3 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo, y = ~Ct,  name = "Ganancias:G(t)",type = "scatter", mode = "lines")
fig_tr3 <- fig_tr3 %>% add_trace(x = ~Tiempo, y = u,
name = "Capital inicial:u", type = "scatter",
mode = "lines")
fig_tr3
library(dplyr) # libreria para poder renombrar
# las cabeceras de los dataframes
#Parametros
set.seed(13) #semilla fija
u = 1759629 #surplus(capital inicial de salvamento)
#Es un estimado a partir de la media de las ganancias por semana,
#multiplicado por 10/3,
#siendo una proporción para evitar la ruina
# u (sum(medias))*(10/3)
c = 0.29*u #prima de pago cada timepo t. c=0.5*u
lambda_Nt = 0.5
#lambda_Xi = 3
t_final = 17
# S(t) = \sum_{i=1}^{N(t)}X_i
#donde N(t)~ Poisson (lambda*t)
# X_i ~ exponencial (lambda_Xi)
#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG
#Simulación de trayectoria de CL_t, cuando t < t_final.
trayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)
{
tiempo <- c(0)
Cramer_trayectoria <- c(u)
while(tiempo[length(tiempo)] < t_final)
{
tiempo_llegada <- (1)#rexp(1, rate = lambda_Nt)
Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075  )
+ rnorm(1, mean =  39841.721 , sd= 7873.446
) +
rnorm(1, mean =   41751.747, sd = 5687.030  ) +
rnorm(1, mean =   43243.143, sd = 10517.841 ) +
rnorm(1, mean = 43010.307  , sd = 7741.889 ) +
rnorm(1, mean = 61191.300  , sd = 7202.989) +
rnorm(1, mean =  85684.058 , sd = 8371.359 ) )
tiempo <- c(tiempo, tiempo[length(tiempo)]
+ tiempo_llegada,tiempo[length(tiempo)]
+ tiempo_llegada )
Cramer_trayectoria <- c(Cramer_trayectoria,
Cramer_trayectoria[length(Cramer_trayectoria)]
- c*tiempo_llegada,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada +  Y_i )
}
df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)
df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%
rename(Tiempo = tiempo,
Ct = Cramer_trayectoria))
return(df_trayectoria_post_pandemia)
}
trayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,
lambda_Nt, t_final )
library(plotly)
#plot(trayectoria$Tiempo, trayectoria$Ct, type= "l")
fig_tr3 <- plot_ly(trayectoria_post_pandemia, x = ~Tiempo,
y = ~Ct,
name = "Ganancias:G(t)",type = "scatter", mode = "lines")
fig_tr3 <- fig_tr3 %>% add_trace(x = ~Tiempo, y = u,
name = "Capital inicial:u", type = "scatter", mode = "lines")
fig_tr3
