ruina = 1
}
else{
ruina = 0
}
}
# 1.08*u es la ganancia inferior a la de un tasa de
# un título financiero para el año 2018
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {
ganancia_no_deseada = 1
}
else{
ganancia_no_deseada = 0
}
df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)
df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%
rename(Tiempo = tiempo,
Ct = Cramer_trayectoria))
salida <- c(ruina, ganancia_no_deseada)
return(salida)
}
trayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,
lambda_Nt, t_final )
#Método de monte carlo para estimar la probabilidad de ruina
n_replicaciones = 100
r_ruina_post_pandemia <- replicate(n_replicaciones,
trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])
#r_ruina_post_pandemia
prob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/
n_replicaciones
prob_ruin_post_pandemia
library(dplyr) # librería para poder renombrar
#las cabeceras de los dataframes
#Parámetros
set.seed(13) #semilla fija
u = 1759629 #surplus(capital inicial de salvamento)
#Es un estimado a partir de la media de las ganancias por semana,
#multiplicado por 10/3,
#siendo una proporción para evitar la ruina
# u (sum(medias))*(10/3)
c = 0.29*u #prima de pago cada tiempo t. c = 0.5*u
lambda_Nt = 0.5
#lambda_Xi = 3
t_final = 14
mu = 1 #tiempos entre llegadas constantes
#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo ,
#media_trayectoria = cramer_media)
# S(t) = \sum_{i=1}^{N(t)}X_i
#donde N(t)~ Poisson (lambda*t)
# X_i ~ exponencial (lambda_Xi)
#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG
#Simulación de trayectoria de CL_t, cuando t < t_final.
trayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)
{
tiempo <- c(0)
Cramer_trayectoria <- c(u)
while(tiempo[length(tiempo)] < t_final)
{
#tiempo_llegada <- rexp(1, rate = lambda_Nt)
tiempo_llegada <- (1)
#Suponiendo los tiempos entre llegadas constantes \mu = 1
Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)  +
rnorm(1, mean =  39841.721 , sd= 7873.446 ) +
rnorm(1, mean =   41751.747, sd = 5687.030) +
rnorm(1, mean =   43243.143, sd = 10517.841)+
rnorm(1, mean = 43010.307  , sd = 7741.889 )+
rnorm(1, mean = 61191.300  , sd = 7202.989) +
rnorm(1, mean =  85684.058 , sd = 8371.359 ))
tiempo <- c(tiempo, tiempo[length(tiempo)] +
tiempo_llegada,tiempo[length(tiempo)] +
tiempo_llegada )
Cramer_trayectoria <- c(Cramer_trayectoria,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada +  Y_i )
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){
ruina = 1
}
else{
ruina = 0
}
}
# 1.08*u es la ganancia inferior a la de un tasa de
# un título financiero para el año 2018
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {
ganancia_no_deseada = 1
}
else{
ganancia_no_deseada = 0
}
df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)
df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%
rename(Tiempo = tiempo,
Ct = Cramer_trayectoria))
salida <- c(ruina, ganancia_no_deseada)
return(salida)
}
trayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,
lambda_Nt, t_final )
#Método de monte carlo para estimar la probabilidad de ruina
n_replicaciones = 100
r_ruina_post_pandemia <- replicate(n_replicaciones,
trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])
#r_ruina_post_pandemia
prob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/
n_replicaciones
prob_ruin_post_pandemia
library(dplyr) # librería para poder renombrar
#las cabeceras de los dataframes
#Parámetros
set.seed(13) #semilla fija
u = 1759629 #surplus(capital inicial de salvamento)
#Es un estimado a partir de la media de las ganancias por semana,
#multiplicado por 10/3,
#siendo una proporción para evitar la ruina
# u (sum(medias))*(10/3)
c = 0.29*u #prima de pago cada tiempo t. c = 0.5*u
lambda_Nt = 0.5
#lambda_Xi = 3
t_final = 17
mu = 1 #tiempos entre llegadas constantes
#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo ,
#media_trayectoria = cramer_media)
# S(t) = \sum_{i=1}^{N(t)}X_i
#donde N(t)~ Poisson (lambda*t)
# X_i ~ exponencial (lambda_Xi)
#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG
#Simulación de trayectoria de CL_t, cuando t < t_final.
trayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)
{
tiempo <- c(0)
Cramer_trayectoria <- c(u)
while(tiempo[length(tiempo)] < t_final)
{
#tiempo_llegada <- rexp(1, rate = lambda_Nt)
tiempo_llegada <- (1)
#Suponiendo los tiempos entre llegadas constantes \mu = 1
Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)  +
rnorm(1, mean =  39841.721 , sd= 7873.446 ) +
rnorm(1, mean =   41751.747, sd = 5687.030) +
rnorm(1, mean =   43243.143, sd = 10517.841)+
rnorm(1, mean = 43010.307  , sd = 7741.889 )+
rnorm(1, mean = 61191.300  , sd = 7202.989) +
rnorm(1, mean =  85684.058 , sd = 8371.359 ))
tiempo <- c(tiempo, tiempo[length(tiempo)] +
tiempo_llegada,tiempo[length(tiempo)] +
tiempo_llegada )
Cramer_trayectoria <- c(Cramer_trayectoria,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada +  Y_i )
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){
ruina = 1
}
else{
ruina = 0
}
}
# 1.08*u es la ganancia inferior a la de un tasa de
# un título financiero para el año 2018
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {
ganancia_no_deseada = 1
}
else{
ganancia_no_deseada = 0
}
df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)
df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%
rename(Tiempo = tiempo,
Ct = Cramer_trayectoria))
salida <- c(ruina, ganancia_no_deseada)
return(salida)
}
trayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,
lambda_Nt, t_final )
#Método de monte carlo para estimar la probabilidad de ruina
n_replicaciones = 100
r_ruina_post_pandemia <- replicate(n_replicaciones,
trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])
#r_ruina_post_pandemia
prob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/
n_replicaciones
prob_ruin_post_pandemia
prob_baja_ganancia_post_pandemia
prob_baja_ganancia_post_pandemia
library(dplyr) # librería para poder renombrar
#las cabeceras de los dataframes
#Parámetros
set.seed(13) #semilla fija
u = 1759629 #surplus(capital inicial de salvamento)
#Es un estimado a partir de la media de las ganancias por semana,
#multiplicado por 10/3,
#siendo una proporción para evitar la ruina
# u (sum(medias))*(10/3)
c = 0.29*u #prima de pago cada tiempo t. c = 0.5*u
lambda_Nt = 0.5
#lambda_Xi = 3
t_final = 17
mu = 1 #tiempos entre llegadas constantes
#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo ,
#media_trayectoria = cramer_media)
# S(t) = \sum_{i=1}^{N(t)}X_i
#donde N(t)~ Poisson (lambda*t)
# X_i ~ exponencial (lambda_Xi)
#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG
#Simulación de trayectoria de CL_t, cuando t < t_final.
trayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)
{
tiempo <- c(0)
Cramer_trayectoria <- c(u)
while(tiempo[length(tiempo)] < t_final)
{
#tiempo_llegada <- rexp(1, rate = lambda_Nt)
tiempo_llegada <- (1)
#Suponiendo los tiempos entre llegadas constantes \mu = 1
Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)  +
rnorm(1, mean =  39841.721 , sd= 7873.446 ) +
rnorm(1, mean =   41751.747, sd = 5687.030) +
rnorm(1, mean =   43243.143, sd = 10517.841)+
rnorm(1, mean = 43010.307  , sd = 7741.889 )+
rnorm(1, mean = 61191.300  , sd = 7202.989) +
rnorm(1, mean =  85684.058 , sd = 8371.359 ))
tiempo <- c(tiempo, tiempo[length(tiempo)] +
tiempo_llegada,tiempo[length(tiempo)] +
tiempo_llegada )
Cramer_trayectoria <- c(Cramer_trayectoria,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada +  Y_i )
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){
ruina = 1
}
else{
ruina = 0
}
}
# 1.08*u es la ganancia inferior a la de un tasa de
# un título financiero para el año 2018
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {
ganancia_no_deseada = 1
}
else{
ganancia_no_deseada = 0
}
df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)
df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%
rename(Tiempo = tiempo,
Ct = Cramer_trayectoria))
salida <- c(ruina, ganancia_no_deseada)
return(salida)
}
trayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,
lambda_Nt, t_final )
#Método de monte carlo para estimar la probabilidad de ruina
n_replicaciones = 100
r_ruina_post_pandemia <- replicate(n_replicaciones,
trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])
#r_ruina_post_pandemia
prob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/
n_replicaciones
prob_ruin_post_pandemia
prob_ruin_post_pandemia
r_ruina_post_pandemia <- replicate(n_replicaciones,
trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])
prob_ruin_post_pandemia
r_ruina_post_pandemia
r_ruina_post_pandemia>0
n_replicaciones
4/100
sum(r_ruina_post_pandemia>0)/
n_replicaciones
library(dplyr) # librería para poder renombrar
#las cabeceras de los dataframes
#Parámetros
set.seed(13) #semilla fija
u = 1759629 #surplus(capital inicial de salvamento)
#Es un estimado a partir de la media de las ganancias por semana,
#multiplicado por 10/3,
#siendo una proporción para evitar la ruina
# u (sum(medias))*(10/3)
c = 0.29*u #prima de pago cada tiempo t. c = 0.5*u
lambda_Nt = 0.5
#lambda_Xi = 3
t_final = 17
mu = 1 #tiempos entre llegadas constantes
#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo ,
#media_trayectoria = cramer_media)
# S(t) = \sum_{i=1}^{N(t)}X_i
#donde N(t)~ Poisson (lambda*t)
# X_i ~ exponencial (lambda_Xi)
#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG
#Simulación de trayectoria de CL_t, cuando t < t_final.
trayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)
{
tiempo <- c(0)
Cramer_trayectoria <- c(u)
while(tiempo[length(tiempo)] < t_final)
{
#tiempo_llegada <- rexp(1, rate = lambda_Nt)
tiempo_llegada <- (1)
#Suponiendo los tiempos entre llegadas constantes \mu = 1
Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)  +
rnorm(1, mean =  39841.721 , sd= 7873.446 ) +
rnorm(1, mean =   41751.747, sd = 5687.030) +
rnorm(1, mean =   43243.143, sd = 10517.841)+
rnorm(1, mean = 43010.307  , sd = 7741.889 )+
rnorm(1, mean = 61191.300  , sd = 7202.989) +
rnorm(1, mean =  85684.058 , sd = 8371.359 ))
tiempo <- c(tiempo, tiempo[length(tiempo)] +
tiempo_llegada,tiempo[length(tiempo)] +
tiempo_llegada )
Cramer_trayectoria <- c(Cramer_trayectoria,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada +  Y_i )
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){
ruina = 1
}
else{
ruina = 0
}
}
# 1.08*u es la ganancia inferior a la de un tasa de
# un título financiero para el año 2018
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {
ganancia_no_deseada = 1
}
else{
ganancia_no_deseada = 0
}
df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)
df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%
rename(Tiempo = tiempo,
Ct = Cramer_trayectoria))
salida <- c(ruina, ganancia_no_deseada)
return(salida)
}
trayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,
lambda_Nt, t_final )
#Método de monte carlo para estimar la probabilidad de ruina
n_replicaciones = 100
r_ruina_post_pandemia <- replicate(n_replicaciones,
trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])
#r_ruina_post_pandemia
prob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/
n_replicaciones
prob_ruin_post_pandemia
library(dplyr) # librería para poder renombrar
#las cabeceras de los dataframes
#Parámetros
set.seed(13) #semilla fija
u = 1759629 #surplus(capital inicial de salvamento)
#Es un estimado a partir de la media de las ganancias por semana,
#multiplicado por 10/3,
#siendo una proporción para evitar la ruina
# u (sum(medias))*(10/3)
c = 0.29*u #prima de pago cada tiempo t. c = 0.5*u
lambda_Nt = 0.5
#lambda_Xi = 3
t_final = 17
mu = 1 #tiempos entre llegadas constantes
#df_media <- data.frame(df_media%>% rename(tiempos = Tiempo ,
#media_trayectoria = cramer_media)
# S(t) = \sum_{i=1}^{N(t)}X_i
#donde N(t)~ Poisson (lambda*t)
# X_i ~ exponencial (lambda_Xi)
#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG
#Simulación de trayectoria de CL_t, cuando t < t_final.
trayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)
{
tiempo <- c(0)
Cramer_trayectoria <- c(u)
while(tiempo[length(tiempo)] < t_final)
{
#tiempo_llegada <- rexp(1, rate = lambda_Nt)
tiempo_llegada <- (1)
#Suponiendo los tiempos entre llegadas constantes \mu = 1
Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075)  +
rnorm(1, mean =  39841.721 , sd= 7873.446 ) +
rnorm(1, mean =   41751.747, sd = 5687.030) +
rnorm(1, mean =   43243.143, sd = 10517.841)+
rnorm(1, mean = 43010.307  , sd = 7741.889 )+
rnorm(1, mean = 61191.300  , sd = 7202.989) +
rnorm(1, mean =  85684.058 , sd = 8371.359 ))
tiempo <- c(tiempo, tiempo[length(tiempo)] +
tiempo_llegada,tiempo[length(tiempo)] +
tiempo_llegada )
Cramer_trayectoria <- c(Cramer_trayectoria,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada +  Y_i )
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){
ruina = 1
}
else{
ruina = 0
}
}
# 1.08*u es la ganancia inferior a la de un tasa de
# un título financiero para el año 2018
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 1.02333*u) {
ganancia_no_deseada = 1
}
else{
ganancia_no_deseada = 0
}
df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)
df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%
rename(Tiempo = tiempo,
Ct = Cramer_trayectoria))
salida <- c(ruina, ganancia_no_deseada)
return(salida)
}
trayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,
lambda_Nt, t_final )
#Método de monte carlo para estimar la probabilidad de ruina
n_replicaciones = 100
r_ruina_post_pandemia <- replicate(n_replicaciones,
trayectoria_CLt_post_pandemia(u, c, lambda_Nt, t_final)[1])
#r_ruina_post_pandemia
prob_ruin_post_pandemia <- sum(r_ruina_post_pandemia>0)/
n_replicaciones
prob_ruin_post_pandemia
library(dplyr) # librería para poder renombrar las
# cabeceras de los dataframes
#Parámetros
set.seed(13) #semilla fija
u = 1759629 #surplus(capital inicial de salvamento)
#Es un estimado a partir de la media de las ganancias por semana,
#multiplicado por 10/3,
#siendo una proporción para evitar la ruina
# u (sum(medias))*(10/3)
c = 0.29*u #prima de pago cada tiempo t. c = 0.5*u
lambda_Nt = 0.5
#lambda_Xi = 3
t_final = 14
mu = 1 #tiempos entre llegadas constantes
# S(t) = \sum_{i=1}^{N(t)}X_i
#donde N(t)~ Poisson (lambda*t)
# X_i ~ exponencial (lambda_Xi)
#CL = REPRESENTA EL MODELO DE CRAMER LUNDBERG
#Simulación de trayectoria de CL_t, cuando t < t_final.
trayectoria_CLt_post_pandemia <- function(u, c, lambda_Nt, t_final)
{
tiempo <- c(0)
Cramer_trayectoria <- c(u)
while(tiempo[length(tiempo)] < t_final)
{
#tiempo_llegada <- rexp(1, rate = lambda_Nt)
tiempo_llegada <- (1)
#Suponiendo los tiempos entre llegadas constantes \mu = 1
Y_i <-  (rnorm(1, mean = 101919.050 , sd = 10877.075   )
+ rnorm(1, mean =  39841.721 , sd= 7873.446  )
+ rnorm(1, mean =   41751.747, sd = 5687.030 )
+ rnorm(1, mean =   43243.143, sd = 10517.841)
+ rnorm(1, mean = 43010.307  , sd = 7741.889 )
+ rnorm(1, mean = 61191.300  , sd = 7202.989 )
+ rnorm(1, mean =  85684.058 , sd = 8371.359))
tiempo <- c(tiempo, tiempo[length(tiempo)] +
tiempo_llegada,tiempo[length(tiempo)]+
tiempo_llegada)
Cramer_trayectoria <- c(Cramer_trayectoria,
Cramer_trayectoria[length(Cramer_trayectoria)] -
c*tiempo_llegada,
Cramer_trayectoria[length(Cramer_trayectoria)]-
c*tiempo_llegada +  Y_i )
if(Cramer_trayectoria[length(Cramer_trayectoria)] < 0){
ruina = 1
}
else{
ruina = 0
}
}
# 1.08*u es la ganancia inferior a la de un tasa de
# un título financiero  para el año 2018
if(Cramer_trayectoria[length(Cramer_trayectoria)] < (1 + (14*0.08)/48)*u) {
ganancia_no_deseada = 1
}
else{
ganancia_no_deseada = 0
}
df_post_pandemia <- data.frame(tiempo, Cramer_trayectoria)
df_trayectoria_post_pandemia <- data.frame(df_post_pandemia%>%
rename(Tiempo = tiempo,
Ct = Cramer_trayectoria))
salida <- c(ruina, ganancia_no_deseada)
return(salida)
}
trayectoria_post_pandemia <- trayectoria_CLt_post_pandemia(u,c,
lambda_Nt, t_final )
#Método de monte carlo para estimar la probabilidad de ruina
n_replicaciones = 100
r_baja_ganancia_post_pandemia <- replicate(n_replicaciones,
trayectoria_CLt_post_pandemia(u, c,
lambda_Nt, t_final)[2])
r_baja_ganancia_post_pandemia
prob_baja_ganancia_post_pandemia <- sum(r_baja_ganancia_post_pandemia >0)/
n_replicaciones
prob_baja_ganancia_post_pandemia
quarto::quarto_clean()
quarto::quarto_clean()
quarto::quarto_render()
quarto::quarto_publish()
quarto::quarto_publish()
quarto::quarto_publish()
quarto::quarto_clean()
quarto::quarto_publish(force = TRUE)
